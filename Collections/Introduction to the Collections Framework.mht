From: <Saved by Microsoft Internet Explorer 5>
Subject: Introduction to the Collections Framework
Date: Tue, 15 Feb 2005 20:52:16 +0530
MIME-Version: 1.0
Content-Type: multipart/related;
	boundary="----=_NextPart_000_0000_01C513A0.3B9F7C10";
	type="text/html"
X-MimeOLE: Produced By Microsoft MimeOLE V5.50.4927.1200

This is a multi-part message in MIME format.

------=_NextPart_000_0000_01C513A0.3B9F7C10
Content-Type: text/html;
	charset="iso-8859-1"
Content-Transfer-Encoding: quoted-printable
Content-Location: http://java.sun.com/developer/onlineTraining/collections/Collection.html

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<HTML><HEAD><TITLE>Introduction to the Collections Framework</TITLE>
<META content=3D"Learn about the collections framework in this =
tutorial."=20
name=3Ddescription>
<META content=3D"text/html; charset=3DISO-8859-1" =
http-equiv=3DContent-Type>
<META content=3Dfalse name=3Darchive>
<META content=3D2003-03-22 name=3Ddate><LINK=20
href=3D"http://java.sun.com/css/default_developer.css" rel=3Dstylesheet>
<SCRIPT language=3DJavaScript>=0A=
<!--=0A=
=0A=
function SymError()=0A=
{=0A=
  return true;=0A=
}=0A=
=0A=
window.onerror =3D SymError;=0A=
=0A=
//-->=0A=
</SCRIPT>

<SCRIPT src=3D"http://java.sun.com/js/popUp.js" =
type=3Dtext/JavaScript></SCRIPT>
<!--stopindex-->
<META content=3D"MSHTML 5.00.3700.6699" name=3DGENERATOR></HEAD>
<BODY bgColor=3D#ffffff leftMargin=3D0 rightMargin=3D0 topMargin=3D0 =
marginwidth=3D"0"=20
marginheight=3D"0"><A name=3Dtop></A><!-- BEGIN GENERIC MASTHEAD --><!-- =
BEGIN VNV1 MASTHEAD COMPONENT, thinner variation for content pages -->
<TABLE border=3D0 cellPadding=3D0 cellSpacing=3D0 width=3D"100%">
  <TBODY>
  <TR>
    <TD>
      <TABLE border=3D0 cellPadding=3D0 cellSpacing=3D0 class=3Dtopnav =
height=3D25=20
      width=3D"100%">
        <FORM accept-charset=3Dutf-8 action=3D/dispatcher.jsp =
method=3Dpost=20
        name=3Dformsearch><INPUT name=3Dcharset type=3Dhidden =
value=3Dutf-8>=20
        <TBODY>
        <TR>
          <TD><A=20
            =
href=3D"http://java.sun.com/developer/onlineTraining/collections/Collecti=
on.html#mast"><IMG=20
            alt=3D"Skip Masthead Links" border=3D0 height=3D1=20
            src=3D"http://java.sun.com/im/a.gif" width=3D10></A></TD>
          <TD><A =
href=3D"http://developers.sun.com/">developers.sun.com</A></TD>
          <TD width=3D"100%">&nbsp;</TD>
          <TD noWrap><SPAN class=3Drightarrowblue>=BB</SPAN>&nbsp;<A=20
            =
href=3D"http://java.sun.com/dispatcher.jsp?uid=3D6910020">search=20
            tips</A>&nbsp;&nbsp;|&nbsp;&nbsp;<B>Search:</B>&nbsp;</TD>
          <TD><INPUT class=3Dmedium name=3Dqt size=3D7></TD>
          <TD>&nbsp;</TD>
          <TD class=3Dselectcell><SELECT class=3Dglobalsearch =
name=3Duid> <OPTION=20
              selected value=3D6910018>in Developers' Site</OPTION> =
<OPTION=20
              value=3D6910019>in Sun.com</OPTION></SELECT></TD>
          <TD>&nbsp;</TD>
          <TD align=3Dleft vAlign=3Dcenter><INPUT border=3D0 =
class=3Dbuttonred onmouseout=3D"this.style.color=3D'#FFF';" =
onmouseover=3D"this.style.color=3D'#fbe249';" type=3Dsubmit =
value=3D&nbsp;=BB&nbsp;></TD>
          <TD><IMG alt=3D" " height=3D1 =
src=3D"http://java.sun.com/im/a.gif"=20
            width=3D10></TD></TR></FORM></TBODY></TABLE>
      <TABLE border=3D0 cellPadding=3D0 cellSpacing=3D0 width=3D"100%">
        <TBODY>
        <TR>
          <TD><IMG alt=3D" " border=3D0 height=3D1=20
            src=3D"http://java.sun.com/im/a.gif" width=3D10></TD>
          <TD class=3Dgrey3 vAlign=3Dtop><A =
href=3D"http://java.sun.com/"><IMG=20
            alt=3D" " border=3D0 height=3D53=20
            src=3D"http://java.sun.com/im/logo_java_grey.gif" =
width=3D180></A></TD>
          <TD><IMG alt=3D" " border=3D0 height=3D1=20
            src=3D"http://java.sun.com/im/a.gif" width=3D10></TD>
          <TD class=3Dsunblue noWrap vAlign=3Dtop>
            <DIV class=3Dpad6><A =
href=3D"http://developers.sun.com/"><IMG=20
            alt=3D"The Source for Developers" border=3D0 height=3D25=20
            src=3D"http://java.sun.com/im/masthead_the_source.gif"=20
            width=3D262></A><BR><A=20
            =
href=3D"http://java.sun.com/dispatcher.jsp?uid=3D6910022"><IMG=20
            alt=3D"A Sun Developer Network Site" border=3D0 height=3D15=20
            src=3D"http://java.sun.com/im/masthead_sdn_site.gif"=20
            width=3D169></A></DIV></TD>
          <TD class=3Dsunblue><IMG alt=3D" " border=3D0 height=3D1=20
            src=3D"http://java.sun.com/im/a.gif" width=3D10></TD>
          <TD class=3Dsunblue>
            <DIV class=3Dpad6><A=20
            =
href=3D"http://java.sun.com/dispatcher.jsp?uid=3D6910023"><IMG=20
            alt=3D"Products and Technologies" border=3D0 height=3D15=20
            src=3D"http://java.sun.com/im/masthead_prod_and_tech.gif"=20
            width=3D158></A><BR><A=20
            =
href=3D"http://java.sun.com/dispatcher.jsp?uid=3D6910024"><IMG=20
            alt=3D"Technical Topics" border=3D0 height=3D15=20
            src=3D"http://java.sun.com/im/masthead_tech_topics.gif"=20
            width=3D105></A></DIV><IMG alt=3D" " border=3D0 height=3D1=20
            src=3D"http://java.sun.com/im/a.gif" width=3D196></TD>
          <TD align=3Dright class=3Dsunblue vAlign=3Dtop width=3D"100%">
            <DIV class=3Dpad10><A href=3D"http://www.sun.com/"><IMG=20
            alt=3D"Sun Microsystems" border=3D0 height=3D33=20
            src=3D"http://java.sun.com/im/logo_sun.gif" =
width=3D72></A></DIV></TD>
          <TD><A name=3Dmast></A><A=20
            =
href=3D"http://java.sun.com/developer/onlineTraining/collections/Collecti=
on.html#skip2content"><IMG=20
            alt=3D" " border=3D0 height=3D1 =
src=3D"http://java.sun.com/im/a.gif"=20
            =
width=3D10></A></TD></TR></TBODY></TABLE></TD></TR></TBODY></TABLE><SPAN =

class=3Dsp5>&nbsp;</SPAN><BR><!-- END VNV1 MASTHEAD COMPONENT, thinner =
variation for content pages --><!-- END GENERIC MASTHEAD --><!-- BEGIN =
BREADCRUMB -->
<TABLE border=3D0 cellPadding=3D0 cellSpacing=3D0 class=3Dvatop =
width=3D"100%">
  <TBODY>
  <TR>
    <TD>
      <DIV class=3Dbreadcrumb><A=20
      href=3D"http://developers.sun.com/index.html">Developers Home</A> =
&gt; <A=20
      href=3D"http://developers.sun.com/prodtech/index.html">Products =
&amp;=20
      Technologies</A> &gt; <A =
href=3D"http://java.sun.com/index.jsp">Java=20
      Technology</A> &gt; <A=20
      href=3D"http://java.sun.com/learning/index.html">Learning</A> &gt; =
<A=20
      href=3D"http://java.sun.com/learning/online/index.html">Online =
Courses</A>=20
      &gt; <A=20
      =
href=3D"http://java.sun.com/developer/onlineTraining/collections/index2.h=
tml">Training=20
      &amp; Tutorials - Collections</A> &gt; <A=20
      =
href=3D"http://java.sun.com/developer/onlineTraining/collections/index.ht=
ml">Introduction=20
      to the Collections Framework - About This Short Course</A> &gt; =
</DIV></TD>
    <TD align=3Dright noWrap>
      <DIV class=3Dbreadcrumb><B><A=20
      =
href=3D"http://developers.sun.com/dispatcher.jsp?uid=3D6910021">Join a =
Sun=20
      Developer Network Community</A></B><BR><A=20
      =
href=3D"http://developers.sun.com/user_registration/index.html">Profile =
and=20
      Registration</A> | <A=20
      =
href=3D"http://developers.sun.com/user_registration/whyregister.html">Why=
=20
      Register?</A> </DIV></TD></TR>
  <TR>
    <TD colSpan=3D2><IMG alt=3D" " border=3D0 height=3D1=20
      src=3D"http://java.sun.com/im/a.gif" =
width=3D770></TD></TR></TBODY></TABLE><SPAN=20
class=3Dsp5>&nbsp;</SPAN><BR><!-- END BREADCRUMB --><!-- BEGIN PAGETITLE =
-->
<DIV class=3Dpagetitle2>Tutorials &amp; Code Camps</DIV>
<DIV class=3Dpagetitle>Introduction to the Collections =
Framework</DIV><!-- END PAGETITLE --><!-- BEGIN WRAPPER TABLE, 2 COLUMN, =
MAIN/RIGHT -->
<TABLE border=3D0 cellPadding=3D10 cellSpacing=3D0 width=3D"100%">
  <TBODY>
  <TR>
    <TD vAlign=3Dtop width=3D"100%"><!-- BEGIN CENTRAL COLUMN COMPONENTS =
--><!--startindex--><!-- =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D --><!-- =
MAIN CONTENT --><!-- =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D --><A=20
      name=3Dskip2content></A><!--  BEGIN VCD4 PFV  -->
      <TABLE border=3D0 cellPadding=3D0 cellSpacing=3D0 width=3D"100%">
        <TBODY>
        <TR>
          <TD class=3Dsmaller vAlign=3Dtop><EM></EM></TD>
          <TD width=3D10>&nbsp;</TD>
          <TD align=3Dright vAlign=3Dbottom>
            <DIV class=3Dsitelinks=20
            style=3D"PADDING-BOTTOM: 0px; PADDING-LEFT: 0px; =
PADDING-RIGHT: 0px; PADDING-TOP: 0px">
            <TABLE border=3D0 cellPadding=3D0 cellSpacing=3D0>
              <TBODY>
              <TR>
                <TD align=3Dright vAlign=3Dbottom>&nbsp;</TD>
                <TD class=3Dsmaller noWrap vAlign=3Dbottom><A=20
                  href=3D"http://java.sun.com/jsp_utils/PrintPage.jsp"=20
                  =
onclick=3D"openPopup('','printFriendlyView',710,650,'no',1,1,0,0,0,0); =
return true;"=20
                  target=3DprintFriendlyView><IMG alt=3D"Print-friendly =
Version"=20
                  border=3D0 height=3D12 hspace=3D4=20
                  src=3D"http://java.sun.com/im/ic_print.gif"=20
                  width=3D14>Print-friendly=20
            =
Version</A><BR></TD></TR></TBODY></TABLE></DIV></TD></TR></TBODY></TABLE>=
<!--  END VCD4 PFV --><!-- =
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D --><!-- Start =
Main Content --><!-- =
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D --><BR><BR><SPAN=20
      class=3Dbyline><B>by <A=20
      href=3D"http://www.jguru.com/portal/index.html">MageLang =
Institute</A></B>=20
      </SPAN>
      <P>[<A=20
      =
href=3D"http://java.sun.com/developer/onlineTraining/collections/index.ht=
ml">About=20
      This Course</A>| <A=20
      =
href=3D"http://java.sun.com/developer/onlineTraining/collections/magecont=
ents.html">Magercises</A>]=20
      </P>
      <P>This short course will teach you how to use the Collections =
Framework=20
      as found in the Java 2 platform. </P>
      <H3>Course Outline</H3>
      <UL>
        <LI><A=20
        =
href=3D"http://java.sun.com/developer/onlineTraining/collections/Collecti=
on.html#Introduction">Introduction=20
        to the Collections Framework</A>=20
        <UL>
          <LI><A=20
          =
href=3D"http://java.sun.com/developer/onlineTraining/collections/Collecti=
on.html#MathematicalBackground">Mathematical=20
          Background</A>=20
          <LI><A=20
          =
href=3D"http://java.sun.com/developer/onlineTraining/collections/Collecti=
on.html#CollectionInterfacesAndClasses">Collection=20
          Interfaces and Classes</A>=20
          <UL>
            <LI><A=20
            =
href=3D"http://java.sun.com/developer/onlineTraining/collections/Collecti=
on.html#CollectionInterface">Collection=20
            Interface</A>=20
            <UL>
              <LI><A=20
              =
href=3D"http://java.sun.com/developer/onlineTraining/collections/Collecti=
on.html#IteratorInterface">Iterator=20
              Interface</A>=20
              <LI><A=20
              =
href=3D"http://java.sun.com/developer/onlineTraining/collections/Collecti=
on.html#GroupOperations">Group=20
              Operations</A>=20
              <LI><A=20
              =
href=3D"http://java.sun.com/developer/onlineTraining/collections/Collecti=
on.html#AbstractCollectionClass">AbstractCollection=20
              Class</A>=20
              <LI><A=20
              =
href=3D"http://java.sun.com/developer/onlineTraining/collections/Collecti=
on.html#CollectionFrameworkDesignConcerns">Collection=20
              Framework Design Concerns</A> </LI></UL>
            <LI><A=20
            =
href=3D"http://java.sun.com/developer/onlineTraining/collections/Collecti=
on.html#SetInterface">Set=20
            Interface</A>=20
            <UL>
              <LI><A=20
              =
href=3D"http://java.sun.com/developer/onlineTraining/collections/Collecti=
on.html#HashSetTreeSet">HashSet,=20
              TreeSet Classes</A>=20
              <LI><A=20
              =
href=3D"http://java.sun.com/developer/onlineTraining/collections/Collecti=
on.html#SetUsageExample">Set=20
              Usage Example</A>=20
              <LI><A=20
              =
href=3D"http://java.sun.com/developer/onlineTraining/collections/Collecti=
on.html#AbstractSetClass">AbstractSet=20
              Class</A> </LI></UL>
            <LI><A=20
            =
href=3D"http://java.sun.com/developer/onlineTraining/collections/Collecti=
on.html#ListInterface">List=20
            Interface</A>=20
            <UL>
              <LI><A=20
              =
href=3D"http://java.sun.com/developer/onlineTraining/collections/Collecti=
on.html#ListIteratorInterface">ListIterator=20
              Interface</A>=20
              <LI><A=20
              =
href=3D"http://java.sun.com/developer/onlineTraining/collections/Collecti=
on.html#ArrayListLinkedListClasses">ArrayList,=20
              LinkedList Classes</A>=20
              <LI><A=20
              =
href=3D"http://java.sun.com/developer/onlineTraining/collections/Collecti=
on.html#ListUsageExample">List=20
              Usage Example</A>=20
              <LI><A=20
              =
href=3D"http://java.sun.com/developer/onlineTraining/collections/Collecti=
on.html#AbstractListAndAbstractSequentialListClasses">AbstractList=20
              and AbstractSequentialList Classes</A> </LI></UL>
            <LI><A=20
            =
href=3D"http://java.sun.com/developer/onlineTraining/collections/Collecti=
on.html#MapInterface">Map=20
            Interface</A>=20
            <UL>
              <LI><A=20
              =
href=3D"http://java.sun.com/developer/onlineTraining/collections/Collecti=
on.html#MapEntryInterface">Map.Entry=20
              Interface</A>=20
              <LI><A=20
              =
href=3D"http://java.sun.com/developer/onlineTraining/collections/Collecti=
on.html#HashMapTreeMapClasses">HashMap,=20
              TreeMap Classes</A>=20
              <LI><A=20
              =
href=3D"http://java.sun.com/developer/onlineTraining/collections/Collecti=
on.html#MapUsageExample">Map=20
              Usage Example</A>=20
              <LI><A=20
              =
href=3D"http://java.sun.com/developer/onlineTraining/collections/Collecti=
on.html#AbstractMapClass">AbstractMap=20
              Class</A>=20
              <LI><A=20
              =
href=3D"http://java.sun.com/developer/onlineTraining/collections/Collecti=
on.html#WeakHashMapClass">WeakHashMap=20
              Class</A> </LI></UL>
            <LI><A=20
            =
href=3D"http://java.sun.com/developer/onlineTraining/collections/Collecti=
on.html#Sorting">Sorting</A>=20

            <UL>
              <LI><A=20
              =
href=3D"http://java.sun.com/developer/onlineTraining/collections/Collecti=
on.html#ComparableInterface">Comparable=20
              Interface</A>=20
              <LI><A=20
              =
href=3D"http://java.sun.com/developer/onlineTraining/collections/Collecti=
on.html#ComparatorInterface">Comparator=20
              Interface</A>=20
              <LI><A=20
              =
href=3D"http://java.sun.com/developer/onlineTraining/collections/Collecti=
on.html#SortedSetInterface">SortedSet=20
              Interface</A>=20
              <LI><A=20
              =
href=3D"http://java.sun.com/developer/onlineTraining/collections/Collecti=
on.html#SortedMapInterface">SortedMap=20
              Interface</A> </LI></UL></LI></UL></LI></UL>
        <LI><A=20
        =
href=3D"http://java.sun.com/developer/onlineTraining/collections/Collecti=
on.html#SpecialCollectionImplementations">Special=20
        Collection Implementations</A>=20
        <UL>
          <LI><A=20
          =
href=3D"http://java.sun.com/developer/onlineTraining/collections/Collecti=
on.html#ReadOnlyCollections">Read-Only=20
          Collections</A>=20
          <LI><A=20
          =
href=3D"http://java.sun.com/developer/onlineTraining/collections/Collecti=
on.html#ThreadSafeCollections">Thread-Safe=20
          Collections</A>=20
          <LI><A=20
          =
href=3D"http://java.sun.com/developer/onlineTraining/collections/Collecti=
on.html#SingletonCollections">Singleton=20
          Collections</A>=20
          <LI><A=20
          =
href=3D"http://java.sun.com/developer/onlineTraining/collections/Collecti=
on.html#MultipleCopyCollections">Multiple=20
          Copy Collections</A>=20
          <LI><A=20
          =
href=3D"http://java.sun.com/developer/onlineTraining/collections/Collecti=
on.html#EmptyCollections">Empty=20
          Collections</A> </LI></UL>
        <LI><A=20
        =
href=3D"http://java.sun.com/developer/onlineTraining/collections/Collecti=
on.html#HistoricalCollectionClasses">Historical=20
        Collection Classes</A>=20
        <UL>
          <LI><A=20
          =
href=3D"http://java.sun.com/developer/onlineTraining/collections/Collecti=
on.html#Arrays">Arrays</A>=20

          <LI><A=20
          =
href=3D"http://java.sun.com/developer/onlineTraining/collections/Collecti=
on.html#VectorAndStackClasses">Vector=20
          and Stack Classes</A>=20
          <LI><A=20
          =
href=3D"http://java.sun.com/developer/onlineTraining/collections/Collecti=
on.html#Enumeration">Enumeration=20
          Interface</A>=20
          <LI><A=20
          =
href=3D"http://java.sun.com/developer/onlineTraining/collections/Collecti=
on.html#DictionaryHashtablePropertiesClasses">Dictionary,=20
          Hashtable, Properties Classes</A>=20
          <LI><A=20
          =
href=3D"http://java.sun.com/developer/onlineTraining/collections/Collecti=
on.html#BitSetClass">BitSet=20
          Class</A> </LI></UL>
        <LI><A=20
        =
href=3D"http://java.sun.com/developer/onlineTraining/collections/Collecti=
on.html#AlgorithmSupport">Algorithm=20
        Support</A>=20
        <UL>
          <LI><A=20
          =
href=3D"http://java.sun.com/developer/onlineTraining/collections/Collecti=
on.html#SortingArrays">Sorting=20
          Arrays</A>=20
          <LI><A=20
          =
href=3D"http://java.sun.com/developer/onlineTraining/collections/Collecti=
on.html#Searching">Searching</A>=20

          <LI><A=20
          =
href=3D"http://java.sun.com/developer/onlineTraining/collections/Collecti=
on.html#CheckingEquality">Checking=20
          Equality</A>=20
          <LI><A=20
          =
href=3D"http://java.sun.com/developer/onlineTraining/collections/Collecti=
on.html#Manipulating">Manipulating</A>=20

          <LI><A=20
          =
href=3D"http://java.sun.com/developer/onlineTraining/collections/Collecti=
on.html#BigONotation">Big-O=20
          Notation</A> </LI></UL>
        <LI><A=20
        =
href=3D"http://java.sun.com/developer/onlineTraining/collections/Collecti=
on.html#UsageIssues">Usage=20
        Issues</A>=20
        <UL>
          <LI><A=20
          =
href=3D"http://java.sun.com/developer/onlineTraining/collections/Collecti=
on.html#ConvertingFromHistoricalCollectionsToNewCollections">Converting=20
          from Historical Collections to New Collections</A>=20
          <LI><A=20
          =
href=3D"http://java.sun.com/developer/onlineTraining/collections/Collecti=
on.html#ConvertingFromNewCollectionsToHistoricalCollections">Converting=20
          from New Collections to Historical Collections</A>=20
          <LI><A=20
          =
href=3D"http://java.sun.com/developer/onlineTraining/collections/Collecti=
on.html#JDK11Support">Working=20
          with the Collections Framework Support in JDK 1.1</A> =
</LI></UL>
        <LI><A=20
        =
href=3D"http://java.sun.com/developer/onlineTraining/collections/Collecti=
on.html#AlternativeCollections">Alternative=20
        Collections</A>=20
        <UL>
          <LI><A=20
          =
href=3D"http://java.sun.com/developer/onlineTraining/collections/Collecti=
on.html#DougLeaCollectionsPackage">Doug=20
          Lea's Collections Package.</A>=20
          <LI><A=20
          =
href=3D"http://java.sun.com/developer/onlineTraining/collections/Collecti=
on.html#ObjectSpaceJGL">ObjectSpace's=20
          JGL</A> </LI></UL>
        <LI><A=20
        =
href=3D"http://java.sun.com/developer/onlineTraining/collections/Collecti=
on.html#Conclusion">Conclusion</A>=20

        <LI><A=20
        =
href=3D"http://java.sun.com/developer/onlineTraining/collections/Collecti=
on.html#Resources">Resources</A>=20
        </LI></UL>
      <H3><A name=3DIntroduction>Introduction to the Collections=20
Framework</A></H3>
      <P>
      <P>This module takes you on an extended tour of the Collections =
Framework,=20
      first introduced with the Java 2 platform, Standard Edition, =
version 1.2.=20
      The Collections Framework provides a well-designed set of =
interfaces and=20
      classes for storing and manipulating groups of data as a single =
unit, a=20
      collection. The framework provides a convenient API to many of the =

      abstract data types familiar from computer science data structure=20
      curriculum: maps, sets, lists, trees, arrays, hashtables and other =

      collections. Because of their object-oriented design, the Java =
classes in=20
      the Collections Framework encapsulate both the data structures and =
the=20
      algorithms associated with these abstractions. The framework =
provides a=20
      standard programming interface to many of the most common =
abstractions,=20
      without burdening the programmer with too many procedures and =
interfaces.=20
      The operations supported by the collections framework nevertheless =
permit=20
      the programmer to easily define higher level data abstractions, =
such as=20
      stacks, queues, and thread-safe collections.=20
      <P>One thing worth noting early on is that while the framework is =
included=20
      with the Java 2 platform, a subset form is available for use with =
Java 1.1=20
      runtime environments. The framework subset is discussed in a <A=20
      =
href=3D"http://java.sun.com/developer/onlineTraining/collections/Collecti=
on.html#JDK11Support">later=20
      section</A>.=20
      <P>Before diving into the Collections Framework, it helps to =
understand=20
      some of the terminology and set theory involved when working with =
the=20
      framework.
      <H4><A name=3DMathematicalBackground>Mathematical =
Background</A></H4>
      <P>
      <P>In common usage a <I>collection</I> is the same as the =
intuitive,=20
      mathamatical concept of a <I>set</I>. A set is just a group of =
unique=20
      items, meaning that the group contains no duplicates. The =
Collections=20
      Framework in fact includes a <CODE>Set</CODE> interface, and a =
number of=20
      concrete <CODE>Set</CODE> classes. But the formal notion of a set =
predates=20
      Java technology by a century, when the British mathematician =
George Boole=20
      defined it in formal logic. Most people learned some set theory in =

      elementary school when introduced to "set intersection" and "set =
union"=20
      through the familiar Venn Diagrams:
      <P align=3Dcenter><IMG alt=3D"" height=3D244=20
      =
src=3D"http://java.sun.com/developer/onlineTraining/collections/images/ve=
nn.gif"=20
      width=3D256>=20
      <P>Some real-world examples of sets include the following:=20
      <UL>
        <LI>The set of uppercase letters 'A' through 'Z'=20
        <LI>The set of nonnegative integers {0, 1, 2 ...}=20
        <LI>The set of reserved Java programming language keywords =
{'import',=20
        'class', 'public', 'protected'...}=20
        <LI>A set of people (friends, employees, clients, ...)=20
        <LI>The set of records returned by a database query=20
        <LI>The set of <CODE>Component</CODE> objects in a=20
        <CODE>Container</CODE>=20
        <LI>The set of all pairs=20
        <LI>The empty set {} </LI></UL>
      <P>These examples show the basic properties of sets:=20
      <UL>
        <LI>Sets contains only one instance of each item=20
        <LI>Sets may be finite or infinite=20
        <LI>Sets can define abstract concepts </LI></UL>
      <P>Sets are fundamental to logic, mathematics, and computer =
science, but=20
      also practical in everyday applications in business and systems. =
The idea=20
      of a "connection pool" is a set of open connections to a database =
server.=20
      Web servers have to manage sets of clients and connections. File=20
      descriptors provide another example of a set in the operating =
system.=20
      <P>A map is a special kind of set. It is a set of pairs, each pair =

      representing a one-directional "mapping" from one element to =
another. Some=20
      examples of maps are:=20
      <UL>
        <LI>The map of IP addresses to domain names (DNS)=20
        <LI>A map from keys to database records=20
        <LI>A dictionary (words mapped to meanings)=20
        <LI>The conversion from base 2 to base 10 </LI></UL>
      <P>Like sets, the idea behind a map is much older than the Java=20
      programming language, older even than computer science. Sets and =
maps are=20
      important tools in mathematics and their properties are =
well-understood.=20
      People also long recognized the usefulness of solving programming =
problems=20
      with sets and maps. A language called SETL (Set Language) invented =
in 1969=20
      included sets as one of its only primitive data types (SETL also =
included=20
      garbage collection--not widely accepted until Java technology =
developed in=20
      the 1990's). Although sets and maps appear in many languages =
including=20
      C++, the Collections Framework is perhaps the best designed set =
and map=20
      package yet written for a popular language. Users of C++ Standard =
Template=20
      Library (STL) and Smalltalk's collection hierarchy might argue =
that last=20
      point.=20
      <P>Also because they are sets, maps can be finite or infinite. An =
example=20
      of an infinite map is the conversion from base 2 to base 10.=20
      Unfortunately, the Collections Framework does not support =
infatuate=20
      maps--sometimes a mathematical function, formula or algorithm is=20
      preferred. But when a problem can be solved with a finite map, the =

      Collections Framework provides the Java programmer with a useful =
API.=20
      <P>Because the Collections Framework has formal definitions for =
the=20
      classes <CODE>Set</CODE>, <CODE>Collection</CODE>, and =
<CODE>Map</CODE>,=20
      you'll notice the lower case words <I>set</I>, <I>collection</I> =
and=20
      <I>map</I> to distinguish the implementation from the concept.=20
      <H4><A name=3DCollectionInterfacesAndClasses>Collection Interfaces =
and=20
      Classes</A></H4>
      <P>
      <P>Now that you have some set theory under your belt, you should =
be able=20
      to understand with the Collections Framework more easily. The =
Collections=20
      Framework is made up of a set of interfaces for working with =
groups of=20
      objects. The different interfaces describe the different types of =
groups.=20
      For the most part, once you understand the interfaces, you =
understand the=20
      framework. While you always need to create specific =
implementations of the=20
      interfaces, access to the actual collection should be restricted =
to the=20
      use of the interface methods, thus allowing you to change the =
underlying=20
      data structure, without altering the rest of your code. The =
following=20
      diagrams shows the framework interface hierarchy.
      <P align=3Dcenter><IMG alt=3D"" height=3D217=20
      =
src=3D"http://java.sun.com/developer/onlineTraining/collections/images/Co=
llectionInterfaces.gif"=20
      width=3D289>=20
      <P>One might think that <CODE>Map</CODE> would extend=20
      <CODE>Collection</CODE>. In mathematics, a map is just a =
collection of=20
      pairs. In the Collections Framework, however, the interfaces=20
      <CODE>Map</CODE> and <CODE>Collection</CODE> are distinct with no =
lineage=20
      in the hierarchy. The reasons for this distinction have to do with =
the=20
      ways that <CODE>Set</CODE> and <CODE>Map</CODE> are used in the =
Java=20
      technology libraries. The typical application of a =
<CODE>Map</CODE> is to=20
      provide access to values stored by keys. The set of collection =
operations=20
      are all there, but you work with a key-value pair, instead of an =
isolated=20
      element. <CODE>Map</CODE> is therefore designed to support the =
basic=20
      operations of <CODE><A=20
      =
href=3D"http://java.sun.com/products/jdk/1.2/docs/api/java/util/Map.html#=
get(java.lang.Object)">get()</A></CODE>=20
      and <CODE><A=20
      =
href=3D"http://java.sun.com/products/jdk/1.2/docs/api/java/util/Map.html#=
put(java.lang.Object, java.lang.Object)">put()</A></CODE>=20
      which are not required by <CODE>Set</CODE>. Moreover, there are =
methods=20
      that return <CODE>Set</CODE> views of <CODE>Map</CODE> objects: =
<PRE>Set set =3D aMap.keySet();</PRE>
      <P>When designing software with the Collections Framework, it is =
useful to=20
      remember the following hierarchical relationships of the four =
basic=20
      interfaces of the framework:=20
      <UL>
        <LI>The <CODE>Collection</CODE> interface is a group of objects, =
with=20
        duplicates allowed=20
        <LI><CODE>Set</CODE> extends <CODE>Collection</CODE> but forbids =

        duplicates=20
        <LI><CODE>List</CODE> extends <CODE>Collection</CODE> also, =
allows=20
        duplicates and introduces positional indexing=20
        <LI><CODE>Map</CODE> extends neither <CODE>Set</CODE> nor=20
        <CODE>Collection</CODE> </LI></UL>
      <P>Moving on to the framework implementations, the concrete =
collection=20
      classes follow a naming convention, combining the underlying data=20
      structure with the framework interface. The following table shows =
the six=20
      collection implementations introduced with the Java 2 framework, =
in=20
      addition to the four historical collection classes. For =
information on how=20
      the historical collection classes changed, like how =
<CODE>Hashtable</CODE>=20
      was reworked into the framework, see the <A=20
      =
href=3D"http://java.sun.com/developer/onlineTraining/collections/Collecti=
on.html#HistoricalCollectionClasses">Historical=20
      Collection Classes</A> section, below.
      <CENTER>
      <TABLE border=3D1>
        <TBODY>
        <TR>
          <TH>Interface</TH>
          <TH colSpan=3D4>Implementation</TH>
          <TH>Historical</TH></TR>
        <TR>
          <TD><CODE>Set</CODE></TD>
          <TD><CODE>HashSet</CODE></TD>
          <TD>&nbsp;</TD>
          <TD><CODE>TreeSet</CODE></TD>
          <TD>&nbsp;</TD>
          <TD>&nbsp;</TD></TR>
        <TR>
          <TD><CODE>List</CODE></TD>
          <TD>&nbsp;</TD>
          <TD><CODE>ArrayList</CODE></TD>
          <TD>&nbsp;</TD>
          <TD><CODE>LinkedList</CODE></TD>
          <TD><CODE>Vector<BR>Stack</CODE></TD></TR>
        <TR>
          <TD><CODE>Map</CODE></TD>
          <TD><CODE>HashMap</CODE></TD>
          <TD>&nbsp;</TD>
          <TD><CODE>TreeMap</CODE></TD>
          <TD>&nbsp;</TD>
          =
<TD><CODE>Hashtable<BR>Properties</CODE></TD></TR></TBODY></TABLE></CENTE=
R>
      <P>There are no implementations of the <CODE>Collection</CODE> =
interface.=20
      The historical collection classes are called such because they =
have been=20
      around since the 1.0 release of the Java class libraries.=20
      <P>If you are moving from the historical collection classes to the =
new=20
      framework classes, one of the primary differences is that all =
operations=20
      are unsynchronized with the new classes. While you can add =
synchronization=20
      to the new classes, you cannot remove it from the old.
      <H5><A name=3DCollectionInterface>Collection Interface</A></H5>
      <P>
      <P>The <CODE>Collection</CODE> interface is used to represent any =
group of=20
      objects, or elements. You use the interface when you wish to work =
with a=20
      group of elements in as general a manner as possible. Here is a =
list of=20
      the public methods of <CODE>Collection</CODE> in Unified Modeling =
Language=20
      (UML) notation.
      <P align=3Dcenter><IMG alt=3D"UML Diagram for Collection =
Interface" height=3D261=20
      =
src=3D"http://java.sun.com/developer/onlineTraining/collections/images/UM=
LCollection.gif"=20
      width=3D252>=20
      <P>The interface supports basic operations like adding and =
removing. When=20
      you try to remove an element, only a single instance of the =
element in the=20
      collection is removed, if present.=20
      <UL>
        <LI><CODE>boolean add(Object element)</CODE>=20
        <LI><CODE>boolean remove(Object element)</CODE> </LI></UL>
      <P>The <CODE>Collection</CODE> interface also supports query =
operations:=20
      <UL>
        <LI><CODE>int size()</CODE>=20
        <LI><CODE>boolean isEmpty()</CODE>=20
        <LI><CODE>boolean contains(Object element)</CODE>=20
        <LI><CODE>Iterator iterator()</CODE> </LI></UL>
      <H6><A name=3DIteratorInterface>Iterator Interface</A></H6>
      <P>
      <P>The <CODE><A=20
      =
href=3D"http://java.sun.com/products/jdk/1.2/docs/api/java/util/Collectio=
n.html#iterator()">iterator()</A></CODE>=20
      method of the <CODE>Collection</CODE> interface returns an=20
      <CODE>Iterator</CODE>. An <CODE>Iterator</CODE> is similar to the=20
      <CODE>Enumeration</CODE> interface, which you may already be =
familiar=20
      with, and will be described <A=20
      =
href=3D"http://java.sun.com/developer/onlineTraining/collections/Collecti=
on.html#Enumeration">later</A>.=20
      With the <CODE>Iterator</CODE> interface methods, you can traverse =
a=20
      collection from start to finish and safely remove elements from =
the=20
      underlying <CODE>Collection</CODE>:
      <P align=3Dcenter><IMG alt=3D"UML Diagram for Iterator Interface" =
height=3D98=20
      =
src=3D"http://java.sun.com/developer/onlineTraining/collections/images/UM=
LIterator.gif"=20
      width=3D122>=20
      <P>The <CODE><A=20
      =
href=3D"http://java.sun.com/products/jdk/1.2/docs/api/java/util/Iterator.=
html#remove()">remove()</A></CODE>=20
      method is optionally supported by the underlying collection. When =
called,=20
      and supported, the element returned by the last <CODE><A=20
      =
href=3D"http://java.sun.com/products/jdk/1.2/docs/api/java/util/Iterator.=
html#next()">next()</A></CODE>=20
      call is removed. To demonstrate, the following shows the use of =
the=20
      <CODE>Iterator</CODE> interface for a general =
<CODE>Collection</CODE>: <!-- BEGIN VCD7 CODE SAMPLE COMPONENT  -->
      <TABLE border=3D0 cellPadding=3D10 cellSpacing=3D0 class=3Dgrey4 =
width=3D"100%">
        <TBODY>
        <TR>
          <TD><PRE>Collection collection =3D ...;
Iterator iterator =3D collection.iterator();
while (iterator.hasNext()) {
  Object element =3D iterator.next();
  if (removalCheck(element)) {
    iterator.remove();
  }
}</PRE></TD></TR></TBODY></TABLE><SPAN class=3Dsp20></SPAN><BR><!-- END =
VCD7 CODE SAMPLE COMPONENT  -->
      <H6><A name=3DGroupOperations>Group Operations</A></H6>
      <P>
      <P>Other operations the <CODE>Collection</CODE> interface supports =
are=20
      tasks done on groups of elements or the entire collection at once: =

      <UL>
        <LI><CODE>boolean containsAll(Collection collection)</CODE>=20
        <LI><CODE>boolean addAll(Collection collection)</CODE>=20
        <LI><CODE>void clear()</CODE>=20
        <LI><CODE>void removeAll(Collection collection)</CODE>=20
        <LI><CODE>void retainAll(Collection collection)</CODE> =
</LI></UL>
      <P>The <CODE><A=20
      =
href=3D"http://java.sun.com/products/jdk/1.2/docs/api/java/util/Collectio=
n.html#containsAll(java.util.Collection)">containsAll()</A></CODE>=20
      method allows you to discover if the current collection contains =
all the=20
      elements of another collection, a <I>subset</I>. The remaining =
methods are=20
      optional, in that a specific collection might not support the =
altering of=20
      the collection. The <CODE><A=20
      =
href=3D"http://java.sun.com/products/jdk/1.2/docs/api/java/util/Collectio=
n.html#addAll(java.util.Collection)">addAll()</A></CODE>=20
      method ensures all elements from another collection are added to =
the=20
      current collection, usually a <I>union</I>. The <CODE><A=20
      =
href=3D"http://java.sun.com/products/jdk/1.2/docs/api/java/util/Collectio=
n.html#clear()">clear()</A></CODE>=20
      method removes all elements from the current collection. The =
<CODE><A=20
      =
href=3D"http://java.sun.com/products/jdk/1.2/docs/api/java/util/Collectio=
n.html#removeAll(java.util.Collection)">removeAll()</A></CODE>=20
      method is like <CODE><A=20
      =
href=3D"http://java.sun.com/products/jdk/1.2/docs/api/java/util/Collectio=
n.html#clear()">clear()</A></CODE>=20
      but only removes a subset of elements. The <CODE><A=20
      =
href=3D"http://java.sun.com/products/jdk/1.2/docs/api/java/util/Collectio=
n.html#retainAll(java.util.Collection)">retainAll()</A></CODE>=20
      method is similar to the <CODE><A=20
      =
href=3D"http://java.sun.com/products/jdk/1.2/docs/api/java/util/Collectio=
n.html#removeAll(java.util.Collection)">removeAll()</A></CODE>=20
      method, but does what might be perceived as the opposite. It =
removes from=20
      the current collection those elements not in the other collection, =
an=20
      <I>intersection</I>.=20
      <P>The remaining two interface methods, which convert a=20
      <CODE>Collection</CODE> to an array, will be discussed <A=20
      =
href=3D"http://java.sun.com/developer/onlineTraining/collections/Collecti=
on.html#ConvertingFromNewCollectionsToHistoricalCollections">later</A>.
      <H6><A name=3DAbstractCollectionClass>AbstractCollection =
Class</A></H6>
      <P>
      <P>The <CODE>AbstractCollection</CODE> class provides the basis =
for the=20
      concrete collection framework classes. While you are free to =
implement all=20
      the methods of the <CODE>Collection </CODE>interface yourself, the =

      <CODE>AbstractCollection</CODE> class provides implementations for =
all the=20
      methods, except for the <CODE>iterator()</CODE> and =
<CODE>size()</CODE>=20
      methods, which are implemented in the appropriate subclass. =
Optional=20
      methods like <CODE><A=20
      =
href=3D"http://java.sun.com/products/jdk/1.2/docs/api/java/util/AbstractC=
ollection.html#add(java.lang.Object)">add()</A></CODE>=20
      will throw an exception if the subclass doesn't override the =
behavior.
      <H6><A name=3DCollectionFrameworkDesignConcerns>Collection =
Framework Design=20
      Concerns</A></H6>
      <P>
      <P>In the creation of the Collections Framework, the Sun =
development team=20
      needed to provide flexible interfaces that manipulated groups of =
elements.=20
      To keep the design simple, instead of providing separate =
interfaces for=20
      optional capabilities, the interfaces define all the methods an=20
      implementation class may provide. However, <I>some</I> of the =
interface=20
      methods are optional. Because an interface implementation must =
provide=20
      implementations for all the interface methods, there needed to be =
a way=20
      for a caller to know if an optional method is not supported. The =
manner=20
      the framework development team chose to signal callers when an =
optional=20
      method is called was to thrown an=20
      <CODE>UnsupportedOperationException</CODE>. If in the course of =
using a=20
      collection, an <CODE>UnsupportedOperationException</CODE> is =
thrown, like=20
      trying to add to a read-only collection, then the operation failed =
because=20
      it is not supported. To avoid having to place all collection =
operations=20
      within a <CODE>try-catch</CODE> block, the=20
      <CODE>UnsupportedOperationException</CODE> class is an extension =
of the=20
      <CODE>RuntimeException</CODE> class.=20
      <P>In addition to handling optional operations with a runtime =
exception,=20
      the iterators for the concrete collection implementations are=20
      <I>fail-fast</I>. That means that if you are using an=20
      <CODE>Iterator</CODE> to traverse a collection while underlying =
collection=20
      is being modified by another thread, then the =
<CODE>Iterator</CODE> fails=20
      immediately by throwing a =
<CODE>ConcurrentModificationException</CODE>=20
      (another <CODE>RuntimeException</CODE>). That means the next time =
an=20
      <CODE>Iterator</CODE> method is called, and the underlying =
collection has=20
      been modified, the <CODE>ConcurrentModificationException =
</CODE>exception=20
      gets thrown.
      <H5><A name=3DSetInterface>Set Interface</A></H5>
      <P>
      <P>The <CODE>Set</CODE> interface extends the =
<CODE>Collection</CODE>=20
      interface and, by definition, forbids duplicates within the =
collection.=20
      All the original methods are present and no new methods are =
introduced.=20
      The concrete <CODE>Set</CODE> implementation classes rely on the =
<CODE><A=20
      =
href=3D"http://java.sun.com/products/jdk/1.2/docs/api/java/util/Set.html#=
equals(java.lang.Object)">equals()</A></CODE>=20
      method of the object added to check for equality.
      <P align=3Dcenter><IMG alt=3D"UML Diagram for Set Interface" =
height=3D261=20
      =
src=3D"http://java.sun.com/developer/onlineTraining/collections/images/UM=
LSet.gif"=20
      width=3D253>=20
      <H6><A name=3DHashSetTreeSet>HashSet, TreeSet Classes</A></H6>
      <P>
      <P>The Collections Framework provides two general-purpose =
implementations=20
      of the <CODE>Set</CODE> interface: <CODE>HashSet</CODE> and=20
      <CODE>TreeSet</CODE>. More often than not, you will use a=20
      <CODE>HashSet</CODE> for storing your duplicate-free collection. =
For=20
      efficiency, objects added to a <CODE>HashSet</CODE> need to =
implement the=20
      <CODE>hashCode()</CODE> method in a manner that properly =
distributes the=20
      hash codes. While most system classes override the default =
<CODE><A=20
      =
href=3D"http://java.sun.com/products/jdk/1.2/docs/api/java/lang/Object.ht=
ml#hashCode()">hashCode()</A></CODE>=20
      implementation in <CODE>Object</CODE>, when creating your own =
classes to=20
      add to a <CODE>HashSet</CODE> remember to override=20
      <CODE>hashCode()</CODE>. The <CODE>TreeSet</CODE> implementation =
is useful=20
      when you need to extract elements from a collection in a sorted =
manner. In=20
      order to work property, elements added to a <CODE>TreeSet</CODE> =
must be=20
      sortable. The Collections Framework adds support for=20
      <CODE>Comparable</CODE> elements and will be covered in detail <A=20
      =
href=3D"http://java.sun.com/developer/onlineTraining/collections/Collecti=
on.html#Sorting">later</A>.=20
      For now, just assume a tree knows how to keep elements of the=20
      <CODE>java.lang</CODE> wrapper classes sorted. It is generally =
faster to=20
      add elements to a <CODE>HashSet</CODE>, then convert the =
collection to a=20
      <CODE>TreeSet</CODE> for sorted traversal.=20
      <P>To optimize <CODE>HashSet</CODE> space usage, you can tune the =
initial=20
      capacity and load factor. The <CODE>TreeSet</CODE> has no tuning =
options,=20
      as the tree is always balanced, ensuring <CODE>log(n)</CODE> =
performance=20
      for insertions, deletions, and queries.=20
      <P>Both <CODE>HashSet</CODE> and <CODE>TreeSet</CODE> implement =
the=20
      <CODE>Cloneable</CODE> interface.
      <H6><A name=3DSetUsageExample>Set Usage Example</A></H6>
      <P>
      <P>To demonstrate the use of the concrete <CODE>Set</CODE> =
classes, the=20
      following program creates a <CODE>HashSet</CODE> and adds a group =
of=20
      names, including one name twice. The program than prints out the =
list of=20
      names in the set, demonstrating the duplicate name isn't present. =
Next,=20
      the program treats the set as a <CODE>TreeSet</CODE> and displays =
the list=20
      sorted. <!-- BEGIN VCD7 CODE SAMPLE COMPONENT  -->
      <TABLE border=3D0 cellPadding=3D10 cellSpacing=3D0 class=3Dgrey4 =
width=3D"100%">
        <TBODY>
        <TR>
          <TD><PRE>import java.util.*;

public class SetExample {
  public static void main(String args[]) {
    Set set =3D new HashSet();
    set.add("Bernadine");
    set.add("Elizabeth");
    set.add("Gene");
    set.add("Elizabeth");
    set.add("Clara");
    System.out.println(set);
    Set sortedSet =3D new TreeSet(set);
    System.out.println(sortedSet);
  }
}</PRE></TD></TR></TBODY></TABLE><SPAN class=3Dsp20></SPAN><BR><!-- END =
VCD7 CODE SAMPLE COMPONENT  -->
      <P>Running the program produces the following output. Notice that =
the=20
      duplicate entry is only present once, and the second list output =
is=20
      sorted. <PRE>[Gene, Clara, Bernadine, Elizabeth]
[Bernadine, Clara, Elizabeth, Gene]
</PRE>
      <H6><A name=3DAbstractSetClass>AbstractSet Class</A></H6>
      <P>
      <P>The <CODE>AbstractSet</CODE> class overrides the <CODE><A=20
      =
href=3D"http://java.sun.com/products/jdk/1.2/docs/api/java/util/AbstractS=
et.html#equals(java.lang.Object)">equals()</A></CODE>=20
      and <CODE><A=20
      =
href=3D"http://java.sun.com/products/jdk/1.2/docs/api/java/util/AbstractS=
et.html#hashCode()">hashCode()</A></CODE>=20
      methods to ensure two equal sets return the same hash code. Two =
sets are=20
      equal if they are the same size and contain the same elements. By=20
      definition, the hash code for a set is the sum of the hash codes =
for the=20
      elements of the set. Thus, no matter what the internal ordering of =
the=20
      sets, two equal sets will report the same hash code.
      <H3>Magercises</H3>
      <P>
      <BLOCKQUOTE>
        <OL>
          <LI><A=20
          =
href=3D"http://java.sun.com/developer/onlineTraining/collections/magercis=
es/BitSet/index.html">Using=20
          a HashSet for a Sparse Bit Set</A>=20
          <LI><A=20
          =
href=3D"http://java.sun.com/developer/onlineTraining/collections/magercis=
es/JList/index.html">Using=20
          a TreeSet to provide a sorted JList</A> =
</LI></OL></BLOCKQUOTE>
      <H5><A name=3DListInterface>List Interface</A></H5>
      <P>
      <P>The <CODE>List</CODE> interface extends the =
<CODE>Collection</CODE>=20
      interface to define an ordered collection, permitting duplicates. =
The=20
      interface adds position-oriented operations, as well as the =
ability to=20
      work with just a part of the list.
      <P align=3Dcenter><IMG alt=3D"UML Diagram for List Interface" =
height=3D407=20
      =
src=3D"http://java.sun.com/developer/onlineTraining/collections/images/UM=
LList.gif"=20
      width=3D286>=20
      <P>The position-oriented operations include the ability to insert =
an=20
      element or <CODE>Collection</CODE>, get an element, as well as =
remove or=20
      change an element. Searching for an element in a <CODE>List</CODE> =
can be=20
      started from the beginning or end and will report the position of =
the=20
      element, if found.=20
      <UL>
        <LI><CODE>void add(int index, Object element)</CODE>=20
        <LI><CODE>boolean addAll(int index, Collection =
collection)</CODE>=20
        <LI><CODE>Object get(int index)</CODE>=20
        <LI><CODE>int indexOf(Object element)</CODE>=20
        <LI><CODE>int lastIndexOf(Object element)</CODE>=20
        <LI><CODE>Object remove(int index)</CODE>=20
        <LI><CODE>Object set(int index, Object element)</CODE> =
</LI></UL>
      <P>The <CODE>List</CODE> interface also provides for working with =
a subset=20
      of the collection, as well as iterating through the entire list in =
a=20
      position friendly manner:=20
      <UL>
        <LI><CODE>ListIterator listIterator()</CODE>=20
        <LI><CODE>ListIterator listIterator(int startIndex)</CODE>=20
        <LI><CODE>List subList(int fromIndex, int toIndex)</CODE> =
</LI></UL>
      <P>In working with <CODE><A=20
      =
href=3D"http://java.sun.com/products/jdk/1.2/docs/api/java/util/List.html=
#subList(int, int)">subList()</A></CODE>,=20
      it is important to mention that the element at =
<CODE>fromIndex</CODE> is=20
      in the sub list, but the element at <CODE>toIndex</CODE> is not. =
This=20
      loosely maps to the following <CODE>for-loop</CODE> test cases: =
<PRE>for (int i=3DfromIndex; i&lt;toIndex; i++) {
  // process element at position i
}</PRE>
      <P>In addition, it should be mentioned that changes to the sublist =
[like=20
      <CODE>add()</CODE>, <CODE>remove()</CODE>, and <CODE>set()</CODE> =
calls]=20
      have an effect on the underlying <CODE>List</CODE>.
      <H6><A name=3DListIteratorInterface>ListIterator =
Interface</A></H6>
      <P>
      <P>The <CODE>ListIterator</CODE> interface extends the=20
      <CODE>Iterator</CODE> interface to support bi-directional access, =
as well=20
      as adding or changing elements in the underlying collection.
      <P align=3Dcenter><IMG alt=3D"UML Diagram for ListIterator =
Interface"=20
      height=3D186=20
      =
src=3D"http://java.sun.com/developer/onlineTraining/collections/images/UM=
LListIterator.gif"=20
      width=3D166>=20
      <P>The following source code demonstrates the looping backwards =
through a=20
      list. Notice that the <CODE>ListIterator</CODE> is originally =
positioned=20
      beyond the end of the list [<CODE>list.size()</CODE>], as the =
index of the=20
      first element is 0. <PRE>List list =3D ...;
ListIterator iterator =3D list.listIterator(list.size());
while (iterator.hasPrevious()) {
  Object element =3D iterator.previous();
  // Process element
}</PRE>
      <P>Normally, one doesn't use a <CODE>ListIterator</CODE> to =
alternate=20
      between going forward and backward in one iteration through the =
elements=20
      of a collection. While technically possible, one needs to know =
that=20
      calling <CODE>next()</CODE> immediately after =
<CODE>previous()</CODE>=20
      results in the same element being returned. The same thing happens =
when=20
      you reverse the order of the calls to <CODE>next()</CODE> and=20
      <CODE>previous()</CODE>.=20
      <P>The <CODE>add()</CODE> operation requires a little bit of =
explanation,=20
      also. Adding an element results in the new element being added =
immediately=20
      prior to the implicit cursor. Thus, calling =
<CODE>previous()</CODE> after=20
      adding an element would return the new element and calling=20
      <CODE>next()</CODE> would have no effect, returning what would =
have been=20
      the next element prior to the add operation.
      <H6><A name=3DArrayListLinkedListClasses>ArrayList, LinkedList=20
      Classes</A></H6>
      <P>
      <P>There are two general-purpose <CODE>List</CODE> implementations =
in the=20
      Collections Framework: <CODE>ArrayList</CODE> and =
<CODE>LinkedList</CODE>.=20
      Which of the two <CODE>List</CODE> implementations you use depends =
on your=20
      specific needs. If you need to support random access, without =
inserting or=20
      removing elements from any place other than the end, than=20
      <CODE>ArrayList</CODE> offers the optimal collection. If, however, =
you=20
      need to frequently add and remove elements from the middle of the =
list and=20
      only access the list elements sequentially then =
<CODE>LinkedList</CODE>=20
      offers the better implementation.=20
      <P>Both <CODE>ArrayList</CODE> and <CODE>LinkedList</CODE> =
implement the=20
      <CODE>Cloneable</CODE> interface. In addition, =
<CODE>LinkedList</CODE>=20
      adds several methods for working with the elements at the ends of =
the list=20
      (only the new methods are shown in the following diagram):
      <P align=3Dcenter><IMG alt=3D"Partial UML Diagram for LinkedList =
Class"=20
      height=3D142=20
      =
src=3D"http://java.sun.com/developer/onlineTraining/collections/images/UM=
LLinkedList.gif"=20
      width=3D190>=20
      <P>
      <P>By using these new methods, you can easily treat the=20
      <CODE>LinkedList</CODE> as a stack, queue, or other end-oriented =
data=20
      structure. <PRE>LinkedList queue =3D ...;
queue.addFirst(element);
Object object =3D queue.removeLast();
LinkedList stack =3D ...;
stack.addFirst(element);
Object object =3D stack.removeFirst();</PRE>
      <P>The <CODE>Vector</CODE> and <CODE>Stack</CODE> classes are =
historical=20
      implementations of the <CODE>List</CODE> interface. They will be =
discussed=20
      <A=20
      =
href=3D"http://java.sun.com/developer/onlineTraining/collections/Collecti=
on.html#VectorAndStackClasses">later</A>.
      <H6><A name=3DListUsageExample>List Usage Example</A></H6>
      <P>
      <P>The following program demonstrates the use of the concrete=20
      <CODE>List</CODE> classes. The first part creates a =
<CODE>List</CODE>=20
      backed by an <CODE>ArrayList</CODE>. After filling the list, =
specific=20
      entries are retrieved. The <CODE>LinkedList</CODE> part of the =
example=20
      treats the <CODE>LinkedList</CODE> as a queue, adding things at =
the=20
      beginning of the queue and removing them from the end. <!-- BEGIN =
VCD7 CODE SAMPLE COMPONENT  -->
      <TABLE border=3D0 cellPadding=3D10 cellSpacing=3D0 class=3Dgrey4 =
width=3D"100%">
        <TBODY>
        <TR>
          <TD><PRE>import java.util.*;

public class ListExample {
  public static void main(String args[]) {
    List list =3D new ArrayList();
    list.add("Bernadine");
    list.add("Elizabeth");
    list.add("Gene");
    list.add("Elizabeth");
    list.add("Clara");
    System.out.println(list);
    System.out.println("2: " + list.get(2));
    System.out.println("0: " + list.get(0));
    LinkedList queue =3D new LinkedList();
    queue.addFirst("Bernadine");
    queue.addFirst("Elizabeth");
    queue.addFirst("Gene");
    queue.addFirst("Elizabeth");
    queue.addFirst("Clara");
    System.out.println(queue);
    queue.removeLast();
    queue.removeLast();
    System.out.println(queue);
  }
}</PRE></TD></TR></TBODY></TABLE><SPAN class=3Dsp20></SPAN><BR><!-- END =
VCD7 CODE SAMPLE COMPONENT  -->
      <P>Running the program produces the following output. Notice that, =
unlike=20
      <CODE>Set</CODE>, <CODE>List</CODE> permits duplicates. =
<PRE>[Bernadine, Elizabeth, Gene, Elizabeth, Clara]
2: Gene
0: Bernadine
[Clara, Elizabeth, Gene, Elizabeth, Bernadine]
[Clara, Elizabeth, Gene]</PRE>
      <H6><A =
name=3DAbstractListAndAbstractSequentialListClasses>AbstractList and=20
      AbstractSequentialList Classes</A></H6>
      <P>
      <P>There are two abstract <CODE>List</CODE> implementations =
classes:=20
      <CODE>AbstractList</CODE> and <CODE>AbstractSequentialList</CODE>. =
Like=20
      the <CODE>AbstractSet</CODE> class, they override the=20
      <CODE>equals()</CODE> and <CODE>hashCode()</CODE> methods to =
ensure two=20
      equal collections return the same hash code. Two sets are equal if =
they=20
      are the same size and contain the same elements in the same order. =
The=20
      <CODE>hashCode()</CODE> implementation is specified in the=20
      <CODE>List</CODE> interface definition and implemented here.=20
      <P>Besides the <CODE>equals()</CODE> and <CODE>hashCode()</CODE>=20
      implementations, <CODE>AbstractList</CODE> and=20
      <CODE>AbstractSequentialList</CODE> provide partial =
implementations of the=20
      remaining <CODE>List</CODE> methods. They make the creation of =
concrete=20
      list implementations easier, for random-access and =
sequential-access data=20
      sources, respectively. Which set of methods you need to define =
depends on=20
      the behavior you wish to support. The following table should help =
you=20
      remember which methods need to be implemented. One thing you'll=20
      <I>never</I> need to provide yourself is an implementation of the=20
      <CODE>Iterator iterator()</CODE> method.
      <CENTER>
      <TABLE border=3D1 cellPadding=3D0 cellSpacing=3D0>
        <TBODY>
        <TR>
          <TD>&nbsp;</TD>
          <TD><CODE>AbstractList</CODE></TD>
          <TD><CODE>AbstractSequentialList</CODE></TD></TR>
        <TR>
          <TD>unmodifiable</TD>
          <TD><CODE>Object get(int index)<BR>int size()</CODE></TD>
          <TD><CODE>ListIterator listIterator(int index)<BR>- boolean=20
            hasNext()<BR>- Object next()<BR>- int nextIndex()<BR>- =
boolean=20
            hasPrevious()<BR>- Object previous()<BR>- int =
previousIndex()<BR>int=20
            size()</CODE></TD></TR>
        <TR>
          <TD>modifiable</TD>
          <TD>unmodifiable + <BR><CODE>Object set(int index, Object=20
            element)</CODE></TD>
          <TD>unmodifiable + <BR><CODE>ListIterator<BR>- set(Object=20
            element)</CODE></TD></TR>
        <TR>
          <TD>variable-size<BR>and modifiable</TD>
          <TD>modifiable +<BR><CODE>add(int index, Object =
element)<BR>Object=20
            remove(int index)</CODE></TD>
          <TD>modifiable +<BR><CODE>ListIterator<BR>- add(Object =
element)<BR>-=20
            remove()</CODE></TD></TR></TBODY></TABLE></CENTER>
      <P>As the <CODE>Collection</CODE> interface documentation states, =
you=20
      should also provide two constructors, a no-argument one and one =
that=20
      accepts another <CODE>Collection</CODE>.
      <H3>Magercise</H3>
      <P>
      <BLOCKQUOTE>
        <OL start=3D3>
          <LI><A=20
          =
href=3D"http://java.sun.com/developer/onlineTraining/collections/magercis=
es/ComboBox/index.html">Using=20
          an ArrayList with a JComboBox</A> </LI></OL></BLOCKQUOTE>
      <H5><A name=3DMapInterface>Map Interface</A></H5>
      <P>
      <P>The <CODE>Map</CODE> interface is not an extension of the=20
      <CODE>Collection</CODE> interface. Instead, the interface starts =
off its=20
      own interface hierarchy, for maintaining key-value associations. =
The=20
      interface describes a mapping from keys to values, without =
duplicate keys,=20
      by definition.
      <P align=3Dcenter><IMG alt=3D"UML Diagram for Map Interface" =
height=3D230=20
      =
src=3D"http://java.sun.com/developer/onlineTraining/collections/images/UM=
LMap.gif"=20
      width=3D234>=20
      <P>The interface methods can be broken down into three sets of =
operations:=20
      altering, querying, and providing alternative views.=20
      <P>The alteration operations allow you to add and remove key-value =
pairs=20
      from the map. Both the key and value can be <CODE>null</CODE>. =
However,=20
      you should not add a <CODE>Map</CODE> to itself as a key or value. =

      <UL>
        <LI><CODE>Object put(Object key, Object value)</CODE>=20
        <LI><CODE>Object remove(Object key)</CODE>=20
        <LI><CODE>void putAll(Map mapping)</CODE>=20
        <LI><CODE>void clear()</CODE> </LI></UL>
      <P>The query operations allow you to check on the contents of the =
map:=20
      <UL>
        <LI><CODE>Object get(Object key)</CODE>=20
        <LI><CODE>boolean containsKey(Object key)</CODE>=20
        <LI><CODE>boolean containsValue(Object value)</CODE>=20
        <LI><CODE>int size()</CODE>=20
        <LI><CODE>boolean isEmpty()</CODE> </LI></UL>
      <P>The last set of methods allow you to work with the group of =
keys or=20
      values as a collection.=20
      <UL>
        <LI><CODE>public Set keySet()</CODE>=20
        <LI><CODE>public Collection values()</CODE>=20
        <LI><CODE>public Set entrySet()</CODE> </LI></UL>
      <P>Since the collection of keys in a map must be unique, you get a =

      <CODE>Set</CODE> back. Since the collection of values in a map may =
not be=20
      unique, you get a <CODE>Collection</CODE> back. The last method =
returns a=20
      <CODE>Set</CODE> of elements that implement the =
<CODE>Map.Entry</CODE>=20
      interface, described next.
      <H6><A name=3DMapEntryInterface>Map.Entry Interface</A></H6>
      <P>
      <P>The <CODE>entrySet()</CODE> method of <CODE>Map</CODE> returns =
a=20
      collection of objects that implement <CODE>Map.Entry</CODE> =
interface.=20
      Each object in the collection is a specific key-value pair in the=20
      underlying <CODE>Map</CODE>.
      <P align=3Dcenter><IMG alt=3D"UML Diagram for Map.Entry Interface" =
height=3D128=20
      =
src=3D"http://java.sun.com/developer/onlineTraining/collections/images/UM=
LMapEntry.gif"=20
      width=3D192>=20
      <P>Iterating through this collection, you can get the key or =
value, as=20
      well as change the value of each entry. However, the set of =
entries=20
      becomes invalid, causing the iterator behavior to be undefined, if =
the=20
      underlying <CODE>Map</CODE> is modified outside the=20
      <CODE>setValue()</CODE> method of the <CODE>Map.Entry</CODE> =
interface.
      <H6><A name=3DHashMapTreeMapClasses>HashMap, TreeMap =
Classes</A></H6>
      <P>
      <P>The Collections Framework provides two general-purpose =
<CODE>Map</CODE>=20
      implementations: <CODE>HashMap</CODE> and <CODE>TreeMap</CODE> . =
As with=20
      all the concrete implementations, which implementation you use =
depends on=20
      your specific needs. For inserting, deleting, and locating =
elements in a=20
      <CODE>Map</CODE>, the <CODE>HashMap</CODE> offers the best =
alternative.=20
      If, however, you need to traverse the keys in a sorted order, then =

      <CODE>TreeMap</CODE> is your better alternative. Depending upon =
the size=20
      of your collection, it may be faster to add elements to a=20
      <CODE>HashMap</CODE>, then convert the map to a =
<CODE>TreeMap</CODE> for=20
      sorted key traversal. Using a <CODE>HashMap</CODE> requires that =
the class=20
      of key added have a well-defined <CODE>hashCode()</CODE> =
implementation.=20
      With the <CODE>TreeMap</CODE> implementation, elements added to =
the map=20
      must be sortable. Again, more on sorting <A=20
      =
href=3D"http://java.sun.com/developer/onlineTraining/collections/Collecti=
on.html#Sorting">later</A>.=20

      <P>To optimize <CODE>HashMap</CODE> space usage, you can tune the =
initial=20
      capacity and load factor. The <CODE>TreeMap</CODE> has no tuning =
options,=20
      as the tree is always balanced.=20
      <P>Both <CODE>HashMap</CODE> and <CODE>TreeMap</CODE> implement =
the=20
      <CODE>Cloneable</CODE> interface.=20
      <P>The <CODE>Hashtable</CODE> and <CODE>Properties</CODE> classes =
are=20
      historical implementations of the <CODE>Map</CODE> interface. They =
will be=20
      discussed <A=20
      =
href=3D"http://java.sun.com/developer/onlineTraining/collections/Collecti=
on.html#DictionaryHashtablePropertiesClasses">later</A>.
      <H6><A name=3DMapUsageExample>Map Usage Example</A></H6>
      <P>
      <P>The following program demonstrates the use of the concrete=20
      <CODE>Map</CODE> classes. The program generates a frequency count =
of words=20
      passed from the command line. A <CODE>HashMap</CODE> is initially =
used for=20
      data storage. Afterwards, the map is converted to a =
<CODE>TreeMap</CODE>=20
      to display the key list sorted. <!-- BEGIN VCD7 CODE SAMPLE =
COMPONENT  -->
      <TABLE border=3D0 cellPadding=3D10 cellSpacing=3D0 class=3Dgrey4 =
width=3D"100%">
        <TBODY>
        <TR>
          <TD><PRE>import java.util.*;

public class MapExample {
  public static void main(String args[]) {
    Map map =3D new HashMap();
    Integer ONE =3D new Integer(1);
    for (int i=3D0, n=3Dargs.length; i&lt;n; i++) {
      String key =3D args[i];
      Integer frequency =3D (Integer)map.get(key);
      if (frequency =3D=3D null) {
        frequency =3D ONE;
      } else {
        int value =3D frequency.intValue();
        frequency =3D new Integer(value + 1);
      }
      map.put(key, frequency);
    }
    System.out.println(map);
    Map sortedMap =3D new TreeMap(map);
    System.out.println(sortedMap);
  }
}</PRE></TD></TR></TBODY></TABLE><SPAN class=3Dsp20></SPAN><BR><!-- END =
VCD7 CODE SAMPLE COMPONENT  -->
      <P>Running the program with the the text from <A=20
      =
href=3D"http://www.law.emory.edu/FEDERAL/usconst/amend.html#art-3">Articl=
e=20
      3</A> of the Bill of Rights produces the following output. Notice =
how much=20
      more useful the sorted output looks.=20
      <P>Unsorted=20
      <P><CODE>{prescribed=3D1, a=3D1, time=3D2, any=3D1, no=3D1, =
shall=3D1, nor=3D1, peace=3D1,=20
      owner=3D1, soldier=3D1, to=3D1, the=3D2, law=3D1, but=3D1, =
manner=3D1, without=3D1,=20
      house=3D1, in=3D4, by=3D1, consent=3D1, war=3D1, quartered=3D1, =
be=3D2, of=3D3}</CODE>=20
      <P>and sorted=20
      <P><CODE>{a=3D1, any=3D1, be=3D2, but=3D1, by=3D1, consent=3D1, =
house=3D1, in=3D4, law=3D1,=20
      manner=3D1, no=3D1, nor=3D1, of=3D3, owner=3D1, peace=3D1, =
prescribed=3D1, quartered=3D1,=20
      shall=3D1, soldier=3D1, the=3D2, time=3D2, to=3D1, war=3D1, =
without=3D1}</CODE>
      <H6><A name=3DAbstractMapClass>AbstractMap Class</A></H6>
      <P>
      <P>Similar to the other abstract collection implementations, the=20
      <CODE>AbstractMap</CODE> class overrides the <CODE>equals()</CODE> =
and=20
      <CODE>hashCode()</CODE> methods to ensure two equal maps return =
the same=20
      hash code. Two maps are equal if they are the same size, contain =
the same=20
      keys, and each key maps to the same value in both maps. By =
definition, the=20
      hash code for a map is the sum of the hash codes for the elements =
of the=20
      map, where each element is an implementation of the =
<CODE>Map.Entry</CODE>=20
      interface. Thus, no matter what the internal ordering of the maps, =
two=20
      equal maps will report the same hash code.
      <H6><A name=3DWeakHashMapClass>WeakHashMap Class</A></H6>
      <P>
      <P>A <CODE>WeakHashMap</CODE> is a special-purpose implementation =
of=20
      <CODE>Map</CODE> for storing only weak references to the keys. =
This allows=20
      for the key-value pairs of the map to be garbage collected when =
the key is=20
      no longer referenced outside of the <CODE>WeakHashMap</CODE>. =
Using=20
      <CODE>WeakHashMap</CODE> is beneficial for maintaining =
registry-like data=20
      structures, where the utility of an entry vanishes when its key is =
no=20
      longer reachable by any thread.=20
      <P>The Java 2 SDK, Standard Edition, version 1.3 adds a =
constructor to=20
      <CODE>WeakHashMap</CODE> that accepts a <CODE>Map</CODE>. With =
version 1.2=20
      of the Java 2 platform, the available constructors only permit =
overriding=20
      the default load factor and initial capacity setting, not =
initializing the=20
      map from another map (as recommended by the <CODE>Map</CODE> =
interface=20
      documentation).
      <H5><A name=3DSorting>Sorting</A></H5>
      <P>
      <P>There have been many changes to the core Java libraries to add =
support=20
      for sorting with the addition of the Collections Framework to the =
Java 2=20
      SDK, version 1.2. Classes like <CODE>String</CODE> and=20
      <CODE>Integer</CODE> now implement the <CODE>Comparable</CODE> =
interface=20
      to provide a natural sorting order. For those classes without a =
natural=20
      order, or when you desire a different order than the natural =
order, you=20
      can implement the <CODE>Comparator</CODE> interface to define your =
own.=20
      <P>To take advantage of the sorting capabilities, the Collections=20
      Framework provides two interfaces that use it: =
<CODE>SortedSet</CODE> and=20
      <CODE>SortedMap</CODE>.
      <H6><A name=3DComparableInterface>Comparable Interface</A></H6>
      <P>
      <P>The <CODE>Comparable</CODE> interface, in the =
<CODE>java.lang</CODE>=20
      package, is for when a class has a natural ordering. Given a =
collection of=20
      objects of the same type, the interface allows you to order the =
collection=20
      into that natural ordering.
      <P align=3Dcenter><IMG alt=3D"UML Diagram for Comparable =
Interface" height=3D69=20
      =
src=3D"http://java.sun.com/developer/onlineTraining/collections/images/UM=
LComparable.gif"=20
      width=3D199>=20
      <P>The <CODE>compareTo()</CODE> method compares the current =
instance with=20
      an element passed in as an argument. If the current instance comes =
before=20
      the argument in the ordering, a negative value is returned. If the =
current=20
      instance comes after, then a positive value is returned. =
Otherwise, zero=20
      is returned. It is not a requirement that a zero return value =
signifies=20
      equality of elements. A zero return value just signifies that two =
objects=20
      are ordered at the same position.=20
      <P>There are fourteen classes in the Java 2 SDK, version 1.2, that =

      implements the <CODE>Comparable</CODE> interface. The following =
table=20
      shows their natural ordering. While some classes share the same =
natural=20
      ordering, you can only sort classes that are <I>mutually =
comparable</I>.=20
      For the current release of the SDK, that means the same class.
      <CENTER>
      <TABLE border=3D1>
        <TBODY>
        <TR>
          <TH align=3Dleft>Class</TH>
          <TH align=3Dleft>Ordering</TH></TR>
        <TR>
          =
<TD><CODE>BigDecimal<BR>BigInteger<BR>Byte<BR>Double<BR>Float<BR>Integer<=
BR>Long<BR>Short</CODE></TD>
          <TD>Numerical</TD></TR>
        <TR>
          <TD><CODE>Character</CODE></TD>
          <TD>Numerical by Unicode value</TD></TR>
        <TR>
          <TD><CODE>CollationKey</CODE></TD>
          <TD>Locale-sensitive string ordering</TD></TR>
        <TR>
          <TD><CODE>Date</CODE></TD>
          <TD>Chronological</TD></TR>
        <TR>
          <TD><CODE>File</CODE></TD>
          <TD>Numerical by Unicode value of characters in =
fully-qualified,=20
            system-specific pathname</TD></TR>
        <TR>
          <TD><CODE>ObjectStreamField</CODE></TD>
          <TD>Numerical by Unicode value of characters in name</TD></TR>
        <TR>
          <TD><CODE>String</CODE></TD>
          <TD>Numerical by Unicode value of characters in=20
      string</TD></TR></TBODY></TABLE></CENTER>
      <P>The documentation for the <CODE>compareTo()</CODE> method of=20
      <CODE>String</CODE> defines the ordering lexicographically. What =
this=20
      means is the comparison is of the numerical values of the =
characters in=20
      the text, which is not necessarily alphabetically in all =
languages. For=20
      locale-specific ordering, use <CODE>Collator</CODE> with=20
      <CODE>CollationKey</CODE>.=20
      <P>The following demonstrates the use of <CODE>Collator</CODE> =
with=20
      <CODE>CollationKey</CODE> to do a locale-specific sorting: <!-- =
BEGIN VCD7 CODE SAMPLE COMPONENT  -->
      <TABLE border=3D0 cellPadding=3D10 cellSpacing=3D0 class=3Dgrey4 =
width=3D"100%">
        <TBODY>
        <TR>
          <TD><PRE>import java.text.*;
import java.util.*;

public class CollatorTest {
  public static void main(String args[]) {
    Collator collator =3D=20
      Collator.getInstance();
    CollationKey key1 =3D=20
      collator.getCollationKey("Tom");
    CollationKey key2 =3D=20
      collator.getCollationKey("tom");
    CollationKey key3 =3D=20
      collator.getCollationKey("thom");
    CollationKey key4 =3D=20
      collator.getCollationKey("Thom");
    CollationKey key5 =3D=20
      collator.getCollationKey("Thomas");

    Set set =3D new TreeSet();
    set.add(key1);
    set.add(key2);
    set.add(key3);
    set.add(key4);
    set.add(key5);
    printCollection(set);
  }
  static private void printCollection(
      Collection collection) {
    boolean first =3D true;
    Iterator iterator =3D collection.iterator();
    System.out.print("[");
    while (iterator.hasNext()) {
      if (first) {
        first =3D false;
      } else {
        System.out.print(", ");
      }     =20
      CollationKey key =3D=20
        (CollationKey)iterator.next();
      System.out.print(key.getSourceString());
    }
    System.out.println("]");
  }
}</PRE></TD></TR></TBODY></TABLE><SPAN class=3Dsp20></SPAN><BR><!-- END =
VCD7 CODE SAMPLE COMPONENT  -->
      <P>Running the program produces the following output: <PRE>[thom, =
Thom, Thomas, tom, Tom]</PRE>
      <P>If the names were stored directly, without using =
<CODE>Collator</CODE>,=20
      then the lowercase names would appear apart from the uppercase =
names: <PRE>[Thom, Thomas, Tom, thom, tom]</PRE>
      <P>Making your own class <CODE>Comparable</CODE> is just a matter =
of=20
      implementing the <CODE>compareTo()</CODE> method. It usually =
involves=20
      relying on the natural ordering of several data members. Your own =
classes=20
      should also override <CODE>equals()</CODE> and =
<CODE>hashCode()</CODE> to=20
      ensure two equal objects return the same hash code.
      <H6><A name=3DComparatorInterface>Comparator Interface</A></H6>
      <P>
      <P>When a class wasn't designed to implement=20
      <CODE>java.lang.Comparable</CODE>, you can provide your own=20
      <CODE>java.util.Comparator</CODE>. Providing your own=20
      <CODE>Comparator</CODE> also works if you don't like the default=20
      <CODE>Comparable</CODE> behavior.=20
      <P align=3Dcenter><IMG alt=3D"UML Diagram for Comparator =
Interface" height=3D84=20
      =
src=3D"http://java.sun.com/developer/onlineTraining/collections/images/UM=
LComparator.gif"=20
      width=3D295>=20
      <P>The return values of the <CODE>compare()</CODE> method of=20
      <CODE>Comparator</CODE> are similar to the =
<CODE>compareTo()</CODE> method=20
      of <CODE>Comparable</CODE>. In this case, if the first element =
comes=20
      before the second element in the ordering, a negative value is =
returned.=20
      If the first element comes after, then a positive value is =
returned.=20
      Otherwise, zero is returned. Similar to <CODE>Comparable</CODE>, a =
zero=20
      return value does not signify equality of elements. A zero return =
value=20
      just signifies that two objects are ordered at the same position. =
Its up=20
      to the user of the <CODE>Comparator</CODE> to determine how to =
deal with=20
      it. If two unequal elements compare to zero, you should first be =
sure that=20
      is what you want and second document the behavior. Using a=20
      <CODE>Comparator</CODE> that is not compatible to equals can be =
deadly=20
      when used with a <CODE>TreeSet</CODE> or <CODE>TreeMap</CODE>. =
With a set,=20
      only the first will be added. With a map, the value for the second =
will=20
      replace the value for the second (keeping the key of the first).=20
      <P>To demonstrate, you may find it easier to write a new=20
      <CODE>Comparator</CODE> that ignores case, instead of using=20
      <CODE>Collator</CODE> to do a locale-specific, case-insensitive=20
      comparison. The following is one such implementation: <!-- BEGIN =
VCD7 CODE SAMPLE COMPONENT  -->
      <TABLE border=3D0 cellPadding=3D10 cellSpacing=3D0 class=3Dgrey4 =
width=3D"100%">
        <TBODY>
        <TR>
          <TD><PRE>class CaseInsensitiveComparator implements=20
  Comparator {
    public int compare(Object element1,=20
      Object element2) {
        String lowerE1 =3D (
          (String)element1).toLowerCase();
        String lowerE2 =3D (
          (String)element2).toLowerCase();
        return lowerE1.compareTo(lowerE2);
  }
}</PRE></TD></TR></TBODY></TABLE><SPAN class=3Dsp20></SPAN><BR><!-- END =
VCD7 CODE SAMPLE COMPONENT  -->
      <P>Since every class subclasses <CODE>Object</CODE> at some point, =
it is=20
      not a requirement that you implement the <CODE>equals()</CODE> =
method. In=20
      fact, in most cases you won't. Do keep in mind the =
<CODE>equals()</CODE>=20
      method checks for equality of <CODE>Comparator</CODE> =
implementations, not=20
      the objects being compared.=20
      <P>The <CODE>Collections</CODE> class has one predefined=20
      <CODE>Comparator</CODE> available for reuse. Calling=20
      <CODE>Collections.reverseOrder()</CODE> returns a =
<CODE>Comparator</CODE>=20
      that sorts objects that implement the <CODE>Comparable</CODE> =
interface in=20
      reverse order.=20
      <H3>Magercise</H3>
      <P>
      <BLOCKQUOTE>
        <OL start=3D4>
          <LI><A=20
          =
href=3D"http://java.sun.com/developer/onlineTraining/collections/magercis=
es/WordCount/index.html">Using=20
          a Map to Count Words</A> </LI></OL></BLOCKQUOTE>
      <H6><A name=3DSortedSetInterface>SortedSet Interface</A></H6>
      <P>
      <P>The Collections Framework provides a special <CODE>Set</CODE> =
interface=20
      for maintaining elements in a sorted order: =
<CODE>SortedSet</CODE>.
      <P align=3Dcenter><IMG alt=3D"UML Diagram for SortedSet Interface" =
height=3D142=20
      =
src=3D"http://java.sun.com/developer/onlineTraining/collections/images/UM=
LSortedSet.gif"=20
      width=3D351>=20
      <P>The interface provides access methods to the ends of the set as =
well as=20
      to subsets of the set. When working with subsets of the list, =
changes to=20
      the subset are reflected in the source set. In addition, changes =
to the=20
      source set are reflected in the subset. This works because subsets =
are=20
      identified by elements at the end points, not indices. In =
addition, if the=20
      <CODE>fromElement</CODE> is part of the source set, it is part of =
the=20
      subset. However, if the <CODE>toElement</CODE> is part of the =
source set,=20
      it is not part of the subset. If you would like a particular =
to-element to=20
      be in the subset, you must find the next element. In the case of a =

      <CODE>String</CODE>, the next element is the same string with a =
null=20
      character appended (<CODE>string+"\0"</CODE>).;=20
      <P>The elements added to a <CODE>SortedSet</CODE> must either =
implement=20
      <CODE>Comparable</CODE> or you must provide a =
<CODE>Comparator</CODE> to=20
      the constructor of its implementation class: <CODE>TreeSet</CODE>. =
(You=20
      can implement the interface yourself. But the Collections =
Framework only=20
      provides one such concrete implementation class.)=20
      <P>To demonstrate, the following example uses the reverse order=20
      <CODE>Comparator</CODE> available from the =
<CODE>Collections</CODE> class:=20
<!-- BEGIN VCD7 CODE SAMPLE COMPONENT  -->
      <TABLE border=3D0 cellPadding=3D10 cellSpacing=3D0 class=3Dgrey4 =
width=3D"100%">
        <TBODY>
        <TR>
          <TD><PRE>Comparator comparator =3D Collections.reverseOrder();
Set reverseSet =3D new TreeSet(comparator);
reverseSet.add("Bernadine");
reverseSet.add("Elizabeth");
reverseSet.add("Gene");
reverseSet.add("Elizabeth");
reverseSet.add("Clara");
System.out.println(reverseSet);
</PRE></TD></TR></TBODY></TABLE><SPAN class=3Dsp20></SPAN><BR><!-- END =
VCD7 CODE SAMPLE COMPONENT  -->
      <P>Running the program produces the following output: <PRE>[Gene, =
Elizabeth, Clara, Bernadine]</PRE>
      <P>Because sets must hold unique items, if comparing two elements =
when=20
      adding an element results in a zero return value (from either the=20
      <CODE>compareTo()</CODE> method of <CODE>Comparable</CODE> or the=20
      <CODE>compare()</CODE> method of <CODE>Comparator</CODE>), then =
the new=20
      element is not added. If the elements are equal, then that is =
okay.=20
      However, if they are not, then you should modify the comparison =
method=20
      such that the comparison is compatible with <CODE>equals()</CODE>. =

      <P>Using the prior <CODE>CaseInsensitiveComparator</CODE> to =
demonstrate=20
      this problem, the following creates a set with three elements: =
thom,=20
      Thomas, and Tom, not five elements as might be expected. <!-- =
BEGIN VCD7 CODE SAMPLE COMPONENT  -->
      <TABLE border=3D0 cellPadding=3D10 cellSpacing=3D0 class=3Dgrey4 =
width=3D"100%">
        <TBODY>
        <TR>
          <TD><PRE>Comparator comparator =3D=20
  new CaseInsensitiveComparator();
Set set =3D new TreeSet(comparator);
set.add("Tom");
set.add("tom");
set.add("thom");
set.add("Thom");
set.add("Thomas");
</PRE></TD></TR></TBODY></TABLE><SPAN class=3Dsp20></SPAN><BR><!-- END =
VCD7 CODE SAMPLE COMPONENT  -->
      <H6><A name=3DSortedMapInterface>SortedMap Interface</A></H6>
      <P>
      <P>The Collections Framework provides a special <CODE>Map</CODE> =
interface=20
      for maintaining keys in a sorted order: <CODE>SortedMap</CODE>.
      <P align=3Dcenter><IMG alt=3D"UML Diagram for SortedMap Interface" =
height=3D142=20
      =
src=3D"http://java.sun.com/developer/onlineTraining/collections/images/UM=
LSortedMap.gif"=20
      width=3D313>=20
      <P>The interface provides access methods to the ends of the map as =
well as=20
      to subsets of the map. Working with a <CODE>SortedMap</CODE> is =
just like=20
      a <CODE>SortedSet</CODE>, except the sort is done on the map keys. =
The=20
      implementation class provided by the Collections Framework is a=20
      <CODE>TreeMap</CODE>.=20
      <P>Because maps can only have one value for every key, if =
comparing two=20
      keys when adding a key-value pair results in a zero return value =
(from=20
      either the <CODE>compareTo()</CODE> method of =
<CODE>Comparable</CODE> or=20
      the <CODE>compare()</CODE> method of <CODE>Comparator</CODE>), =
then the=20
      value for the original key is replaced with the new value. If the =
elements=20
      are equal, then that is okay. However, if they are not, then you =
should=20
      modify the comparison method such that the comparison is =
compatible with=20
      <CODE>equals()</CODE>.
      <H4><A name=3DSpecialCollectionImplementations>Special Collection=20
      Implementations</A></H4>
      <P>
      <P>To keep the Collections Framework simple, added functionality =
is=20
      provided by wrapper implementations (also known as the Decorator =
design=20
      pattern--see the <I><A=20
      href=3D"http://hillside.net/patterns/DPBook/DPBook.html">Design=20
      Patterns</A></I> book for more information on patterns). These =
wrappers=20
      delegate the collections part to the underlying implementation =
class, but=20
      they add functionality on top of the collection. These wrappers =
are all=20
      provided through the <CODE>Collections</CODE> class. The=20
      <CODE>Collections</CODE> class also provides support for creating=20
      special-case collections.
      <H5><A name=3DReadOnlyCollections>Read-Only Collections</A></H5>
      <P>
      <P>After you've added all the necessary elements to a collection, =
it may=20
      be convenient to treat that collection as read-only, to prevent =
the=20
      accidental modification of the collection. To provide this =
capability, the=20
      <CODE>Collections</CODE> class provides six factory methods, one =
for each=20
      of <CODE>Collection</CODE>, <CODE>List</CODE>, <CODE>Map</CODE>,=20
      <CODE>Set</CODE>, <CODE>SortedMap</CODE>, and =
<CODE>SortedSet</CODE>.=20
      <UL>
        <LI><CODE>Collection unmodifiableCollection(Collection=20
        collection)</CODE>=20
        <LI><CODE>List unmodifiableList(List list)</CODE>=20
        <LI><CODE>Map unmodifiableMap(Map map)</CODE>=20
        <LI><CODE>Set unmodifiableSet(Set set)</CODE>=20
        <LI><CODE>SortedMap unmodifiableSortedMap(SortedMap map)</CODE>=20
        <LI><CODE>SortedSet unmodifiableSortedSet(SortedSet set)</CODE> =
</LI></UL>
      <P>Once you've filled the collection, the best way to make the =
collection=20
      read-only is to replace the original reference with the read-only=20
      reference. If you don't replace the original reference, then the=20
      collection is not read-only, as you can still use the original =
reference=20
      to modify the collection. The following program demonstrates the =
proper=20
      way to make a collection read-only. In addition, it shows what =
happens=20
      when you try to modify a read-only collection. <!-- BEGIN VCD7 =
CODE SAMPLE COMPONENT  -->
      <TABLE border=3D0 cellPadding=3D10 cellSpacing=3D0 class=3Dgrey4 =
width=3D"100%">
        <TBODY>
        <TR>
          <TD><PRE>import java.util.*;

public class ReadOnlyExample {
  public static void main(String args[]) {
    Set set =3D new HashSet();
    set.add("Bernadine");
    set.add("Elizabeth");
    set.add("Gene");
    set.add("Elizabeth");
    set =3D Collections.unmodifiableSet(set);
    set.add("Clara");
  }
}</PRE></TD></TR></TBODY></TABLE><SPAN class=3Dsp20></SPAN><BR><!-- END =
VCD7 CODE SAMPLE COMPONENT  -->
      <P>When run and the last <CODE>add()</CODE> operation is attempted =
on the=20
      read-only set, an <CODE>UnsupportedOperationException</CODE> is =
thrown.
      <H5><A name=3DThreadSafeCollections>Thread-Safe =
Collections</A></H5>
      <P>
      <P>The key difference between the historical collection classes =
and the=20
      new implementations within the Collections Framework is the new =
classes=20
      are <I>not</I> thread-safe. This was done such that if you don't =
need the=20
      synchronization, you don't use it, and everything works much =
faster. If,=20
      however, you are using a collection in a multi-threaded =
environment, where=20
      multiple threads can modify the collection simultaneously, the=20
      modifications need to be synchronized. The =
<CODE>Collections</CODE> class=20
      provides for the the ability to wrap existing collections into=20
      synchronized ones with another set of six methods:=20
      <UL>
        <LI><CODE>Collection synchronizedCollection(Collection=20
        collection)</CODE>=20
        <LI><CODE>List synchronizedList(List list)</CODE>=20
        <LI><CODE>Map synchronizedMap(Map map)</CODE>=20
        <LI><CODE>Set synchronizedSet(Set set)</CODE>=20
        <LI><CODE>SortedMap synchronizedSortedMap(SortedMap map)</CODE>=20
        <LI><CODE>SortedSet synchronizedSortedSet(SortedSet set)</CODE> =
</LI></UL>
      <P>Unlike when making a collection read-only, you synchronize the=20
      collection immediately after creating it. You also must make sure =
you do=20
      not retain a reference to the original collection, or else you can =
access=20
      the collection unsynchronized. The simplest way to make sure you =
don't=20
      retain a reference is to never create one:<PRE>Set set =3D =
Collection.synchronizedSet(new HashSet());</PRE>
      <P>Making a collection unmodifiable also makes a collection =
thread-safe,=20
      as the collection can't be modified. This avoids the =
synchronization=20
      overhead.
      <H5><A name=3DSingletonCollections>Singleton Collections</A></H5>
      <P>
      <P>The <CODE>Collections</CODE> class provides for the ability to =
create=20
      single element sets fairly easily. Instead of having to create the =

      <CODE>Set</CODE> and fill it in separate steps, you can do it all =
at once.=20
      The resulting <CODE>Set</CODE> is immutable. <PRE>Set set =3D =
Collection.singleton("Hello");
</PRE>
      <P>The Java 2 SDK, Standard Edition, version 1.3 adds the ability =
to=20
      create singleton lists and maps, too:=20
      <UL>
        <LI><CODE>List singletonList(Object element)</CODE>=20
        <LI><CODE>Map singletonMap(Object key, Object value)</CODE> =
</LI></UL>
      <H5><A name=3DMultipleCopyCollections>Multiple Copy =
Collections</A></H5>
      <P>
      <P>If you need an immutable list with multiple copies of the same =
element,=20
      the <CODE>nCopies(int n, Object element)</CODE> method of the=20
      <CODE>Collections</CODE> class returns just such the =
<CODE>List</CODE>: <PRE>List fullOfNullList =3D Collection.nCopies(10, =
null);
</PRE>
      <P>By itself, that doesn't seem too useful. However, you can then =
make the=20
      list modifiable by passing it along to another list: <PRE>List =
anotherList =3D new ArrayList(fullOfNullList);
</PRE>
      <P>This now creates 10 element <CODE>ArrayList</CODE>, where each =
element=20
      is <CODE>null</CODE>. You can now modify each element at will, as =
it=20
      becomes appropriate.
      <H5><A name=3DEmptyCollections>Empty Collections</A></H5>
      <P>
      <P>The <CODE>Collections</CODE> class also provides constants for =
empty=20
      collections:=20
      <UL>
        <LI><CODE>List EMPTY_LIST</CODE>=20
        <LI><CODE>Set EMPTY_SET</CODE> </LI></UL>
      <P>The Java 2 SDK, Standard Edition, version 1.3 has a predefined =
empty=20
      map constant:=20
      <UL>
        <LI><CODE>Map EMPTY_MAP</CODE> </LI></UL>
      <H4><A name=3DHistoricalCollectionClasses>Historical Collection=20
      Classes</A></H4>
      <P>
      <P>While this course is about the new Collections Framework of the =
Java 2=20
      SDK, there are times when you still need to use some of the =
original=20
      collections capabilities. The following reviews some of the =
capabilities=20
      of working with arrays, vectors, hashtables, enumerations, and =
other=20
      historical capabilities.
      <H5><A name=3DArrays>Arrays</A></H5>
      <P>
      <P>One learns about arrays fairly early on when learning the Java=20
      programming language. Arrays are defined to be fixed-size =
collections of=20
      the same datatype. They are the only collection that supports =
storing=20
      primitive datatypes. Everything else, including arrays, can store =
objects.=20
      When creating an array, you specify both the number and type of =
object you=20
      wish to store. And, over the life of the array, it can neither =
grow nor=20
      store a different type (unless it extends the first type).=20
      <P>To find out the size of an array, you ask its single public =
instance=20
      variable, <CODE>length</CODE>, as in <CODE>array.length</CODE>.=20
      <P>To access a specific element, either for setting or getting, =
you place=20
      the integer argument within square brackets (<CODE>[int]</CODE>), =
either=20
      before <I>or</I> after the array reference variable. The integer =
index is=20
      zero-based, and accessing beyond either end of the array will =
thrown an=20
      <CODE>ArrayIndexOutOfBoundsException</CODE> at runtime. If, =
however, you=20
      use a <CODE>long</CODE> variable to access an array index, you'll =
get a=20
      compiler-time error.=20
      <P>Arrays are full-fledged subclasses of =
<CODE>java.lang.Object</CODE>.=20
      They can be used with the various Java programming language =
constructs=20
      excepting an object: <!-- BEGIN VCD7 CODE SAMPLE COMPONENT  -->
      <TABLE border=3D0 cellPadding=3D10 cellSpacing=3D0 class=3Dgrey4 =
width=3D"100%">
        <TBODY>
        <TR>
          <TD><PRE>Object obj =3D new int[5];
if (obj instanceof int[]) {
  // true
}
if (obj.getClass().isArray()) {
  // true
}</PRE></TD></TR></TBODY></TABLE><SPAN class=3Dsp20></SPAN><BR><!-- END =
VCD7 CODE SAMPLE COMPONENT  -->
      <P>When created, arrays are automatically initialized, either to=20
      <CODE>false</CODE> for a <CODE>boolean</CODE> array , =
<CODE>null</CODE>=20
      for an <CODE>Object</CODE> array, or the numerical equivalent of 0 =
for=20
      everything else.=20
      <P>To make a copy of an array, perhaps to make it larger, you use =
the=20
      <CODE>arraycopy()</CODE> method of <CODE>System</CODE>. You need =
to=20
      preallocate the space in the destination array.=20
      <UL>
        <LI><CODE>System.arraycopy(Object sourceArray, int =
sourceStartPosition,=20
        Object destinationArray, int destinationStartPosition, int=20
        length)</CODE> </LI></UL>
      <H5><A name=3DVectorAndStackClasses>Vector and Stack =
Classes</A></H5>
      <P>
      <P>A <CODE>Vector</CODE> is an historical collection class that =
acts like=20
      a growable array, but can store heterogeneous data elements. With =
the Java=20
      2 SDK, version 2, the <CODE>Vector</CODE> class has been =
retrofitted into=20
      the Collections Framework hierarchy to implement the =
<CODE>List</CODE>=20
      interface. However, if you are using the new framework, you should =
use=20
      <CODE>ArrayList</CODE>, instead.=20
      <P>When transitioning from <CODE>Vector</CODE> to =
<CODE>ArrayList</CODE>,=20
      one key difference is the arguments have been reversed to =
positionally=20
      change an element's value:=20
      <UL>
        <LI>From original <CODE>Vector</CODE> class<CODE><BR>void=20
        setElementAt(Object element, int index)</CODE>=20
        <LI>From <CODE>List</CODE> interface<CODE><BR>void set(int =
index, Object=20
        element)</CODE> </LI></UL>
      <P>The <CODE>Stack</CODE> class extends <CODE>Vector</CODE> to =
implement a=20
      standard list-in-first-out (LIFO) stack, with <CODE>push()</CODE> =
and=20
      <CODE>pop()</CODE> methods. Be careful though. Since the=20
      <CODE>Stack</CODE> class extends the <CODE>Vector</CODE> class, =
you can=20
      still access or modify a <CODE>Stack</CODE> with the inherited=20
      <CODE>Vector</CODE> methods.
      <H5><A name=3DEnumeration>Enumeration Interface</A></H5>
      <P>
      <P>The <CODE>Enumeration</CODE> interface allows you to iterator =
through=20
      all the elements of a collection. In the Collections Framework, =
this=20
      interface has been superceded by the <CODE>Iterator</CODE> =
interface.=20
      However, not all libraries supports the newer interface, so you =
may find=20
      yourself using <CODE>Enumeration</CODE> from time to time.
      <P align=3Dcenter><IMG alt=3D"UML Diagram for Map.Entry Interface" =
height=3D84=20
      =
src=3D"http://java.sun.com/developer/onlineTraining/collections/images/UM=
LEnumeration.gif"=20
      width=3D176>=20
      <P>Iterating through an <CODE>Enumeration</CODE> is similar to =
iterating=20
      through an <CODE>Iterator</CODE>, though some people like the =
method names=20
      better with <CODE>Iterator</CODE>. However, there is no removal =
support=20
      with <CODE>Enumeration</CODE>. <PRE>Enumeration enum =3D ...;
while (enum.hasNextElement()) {
  Object element =3D iterator.nextElement();
  // process element
}</PRE>
      <H5><A name=3DDictionaryHashtablePropertiesClasses>Dictionary, =
Hashtable,=20
      Properties Classes</A></H5>
      <P>
      <P>The <CODE>Dictionary</CODE> class is completely full of =
abstract=20
      methods. In other words, it should have been an interface. It =
forms the=20
      basis for key-value pair collections in the historical collection =
classes,=20
      with its replacement being <CODE>Map</CODE>, in the new framework. =

      <CODE>Hashtable</CODE> and <CODE>Properties</CODE> are the two =
specific=20
      implementations of <CODE>Dictionary</CODE> available.=20
      <P>The <CODE>Hashtable</CODE> implementation is a generic =
dictionary that=20
      permits storing any object as its key or value (besides=20
      <CODE>null</CODE>). With the Java 2 SDK, version 1.2, The class =
has been=20
      reworked into the Collections Framework to implement the =
<CODE>Map</CODE>=20
      interface. So, when using, you can use the original =
<CODE>Hashtable</CODE>=20
      methods or the newer <CODE>Map</CODE> methods. If you need a =
synchronized=20
      <CODE>Map</CODE>, using <CODE>Hashtable</CODE> is slightly faster =
than=20
      using a synchronized <CODE>HashMap</CODE>.=20
      <P>The <CODE>Properties</CODE> implementation is a specialized=20
      <CODE>Hashtable</CODE> for working with text strings. While you =
have to=20
      cast valued retrieved from a <CODE>Hashtable</CODE> to your =
desired class,=20
      the <CODE>Properties</CODE> class allows you to get text values =
without=20
      casting. The class also supports loading and saving property =
settings from=20
      and input stream or to a output stream. The most commonly used set =
of=20
      properties is the system properties list, retrieved by=20
      <CODE>System.getProperties()</CODE>.
      <H5><A name=3DBitSetClass>BitSet Class</A></H5>
      <P>
      <P>A <CODE>BitSet</CODE> represents an alternate representation of =
a set.=20
      Given a finite number of <CODE>n</CODE> objects, you can associate =
a=20
      unique integer with each object. Then each possible subset of the =
objects=20
      corresponds to an <CODE>n</CODE>-bit vector, with each bit "on" or =
"off"=20
      depending on whether the object is in the subset. For small values =
of=20
      <CODE>n</CODE> a bit vector might be an extremely compact =
representation.=20
      However, for large values of <CODE>n</CODE> an actual bit vector =
might be=20
      inefficient, when most of the bits are off.=20
      <P>There is no replacement to <CODE>BitSet</CODE> in the new =
framework.=20
      <H3>Magercise</H3>
      <P>
      <BLOCKQUOTE>
        <OL start=3D5>
          <LI><A=20
          =
href=3D"http://java.sun.com/developer/onlineTraining/collections/magercis=
es/BitSet/index.html">Using=20
          a HashSet for a Sparse Bit Set</A> </LI></OL></BLOCKQUOTE>
      <H4><A name=3DAlgorithmSupport>Algorithm Support</A></H4>
      <P>
      <P>The <CODE>Collections</CODE> and <CODE>Arrays</CODE> classes, =
available=20
      as part of the Collections Framework, provide support for various=20
      algorithms with the collection classes, both new and old. The =
different=20
      operations, starting with sorting and searching, are described =
next.
      <H5><A name=3DSortingArrays>Sorting Arrays</A></H5>
      <P>
      <P>While the <CODE>TreeSet</CODE> and <CODE>TreeMap</CODE> classes =
offer=20
      sorted version of sets and maps, there is no sorted =
<CODE>List</CODE>=20
      collection implementation. Also, prior to the collections =
framework, there=20
      was no built in support for sorting arrays. As part of the =
framework, you=20
      get both support for sorting a <CODE>List</CODE>, as well as =
support for=20
      sorting arrays of anything, including primitives. With any kind of =

      sorting, all items must be comparable to each other (<I>mutually=20
      comparable</I>). If they are not, a =
<CODE>ClassCastException</CODE> will=20
      be thrown.=20
      <P>Sorting of a <CODE>List</CODE> is done with one of two=20
      <CODE>sort()</CODE> methods in the <CODE>Collections</CODE> class. =
If the=20
      element type implements <CODE>Comparable</CODE> then you would use =
the=20
      <CODE>sort(List list)</CODE> version. Otherwise, you would need to =
provide=20
      a <CODE>Comparator</CODE> and use <CODE>sort(List list, Comparator =

      comparator)</CODE>. Both versions are destructive to the =
<CODE>List</CODE>=20
      and guarantee <CODE>O(n =
log</CODE><SUB><CODE>2</CODE></SUB><CODE>n)</CODE>=20
      performance (or better), including when sorting a =
<CODE>LinkedList</CODE>,=20
      using a merge sort variation.=20
      <P>Sorting of arrays is done with one of eighteen different =
methods. There=20
      are two methods for sorting each of the seven primitive types =
(besides=20
      <CODE>boolean</CODE>), one for sorting the whole array and one for =
sorting=20
      part of the array. The remaining four are for sorting object =
arrays=20
      (<CODE>Object[ ]</CODE>).=20
      <P>The sorting of primitive arrays involving just calling=20
      <CODE>Arrays.sort()</CODE> with your array as the argument, and =
letting=20
      the compiler determine which of the following methods to pick:=20
      <UL>
        <LI><CODE>void sort(byte array[ ])</CODE>=20
        <LI><CODE>void sort(byte array[ ], int fromIndex, int =
toIndex)</CODE>=20
        <LI><CODE>void sort(short array[ ])</CODE>=20
        <LI><CODE>void sort(short array[ ], int fromIndex, int =
toIndex)</CODE>=20
        <LI><CODE>void sort(int array[ ])</CODE>=20
        <LI><CODE>void sort(int array[ ], int fromIndex, int =
toIndex)</CODE>=20
        <LI><CODE>void sort(long array[ ])</CODE>=20
        <LI><CODE>void sort(long array[ ], int fromIndex, int =
toIndex)</CODE>=20
        <LI><CODE>void sort(float array[ ])</CODE>=20
        <LI><CODE>void sort(float array[ ], int fromIndex, int =
toIndex)</CODE>=20
        <LI><CODE>void sort(double array[ ])</CODE>=20
        <LI><CODE>void sort(double array[ ], int fromIndex, int =
toIndex)</CODE>=20
        <LI><CODE>void sort(char array[ ])</CODE>=20
        <LI><CODE>void sort(char array[ ], int fromIndex, int =
toIndex)</CODE>=20
        </LI></UL>
      <P>The sorting of object arrays is a little more involved, as the =
compiler=20
      doesn't check everything for you. If the object in the array =
implements=20
      <CODE>Comparable</CODE>, then you can just sort the array =
directly, in=20
      whole or in part. Otherwise, you must provide a =
<CODE>Comparator</CODE> to=20
      do the sorting for you. You can also provide a =
<CODE>Comparator</CODE>=20
      implementation if you don't like the default ordering.=20
      <UL>
        <LI><CODE>void sort(Object array[ ])</CODE>=20
        <LI><CODE>void sort(Object array[ ], int fromIndex, int =
toIndex)</CODE>=20
        <LI><CODE>void sort(Object array[ ], Comparator =
comparator)</CODE>=20
        <LI><CODE>void sort(Object array[ ], int fromIndex, int toIndex, =

        Comparator comparator)</CODE> </LI></UL>
      <H5><A name=3DSearching>Searching</A></H5>
      <P>
      <P>Besides sorting, the <CODE>Collections</CODE> and =
<CODE>Arrays</CODE>=20
      classes provide mechanisms to search a <CODE>List</CODE> or array, =
as well=20
      as to find the minimum and maximum values within a=20
      <CODE>Collection</CODE>.=20
      <P>While you can use the <CODE>contains()</CODE> method of=20
      <CODE>List</CODE> to find if an element is part of the list, it =
assumes an=20
      unsorted list. If you've previously sorted the <CODE>List</CODE>, =
using=20
      <CODE>Collections.sort()</CODE>, then you can do a much quicker =
binary=20
      search using one of the two overridden <CODE>binarySearch()</CODE> =

      methods. If the objects in the <CODE>List</CODE> implement=20
      <CODE>Comparable</CODE>, then you don't need to provide a=20
      <CODE>Comparator</CODE>. Otherwise, you must provide a=20
      <CODE>Comparator</CODE>. In addition, if you sorted with a=20
      <CODE>Comparator</CODE>, you must use the same =
<CODE>Comparator</CODE>=20
      when binary searching.=20
      <UL>
        <LI><CODE>public static int binarySearch(List list, Object =
key)</CODE>=20
        <LI><CODE>public static int binarySearch(List list, Object key,=20
        Comparator comparator)</CODE> </LI></UL>
      <P>If the <CODE>List</CODE> to search subclasses the=20
      <CODE>AbstractSequentialList</CODE> class (like =
<CODE>LinkedList</CODE>),=20
      then a sequential search is actually done.=20
      <P>Array searching works the same way. After using one of the=20
      <CODE>Arrays.sort()</CODE> methods, you can take the resulting =
array and=20
      search for an element. There are seven overridden varieties of=20
      <CODE>binarySearch()</CODE> to search for a primitive (all but=20
      <CODE>boolean</CODE>), and two to search an <CODE>Object</CODE> =
array,=20
      both with and without a <CODE>Comparator</CODE>.=20
      <P>If the original <CODE>List</CODE> or array is unsorted, the =
result is=20
      non-deterministic.=20
      <P>Besides searching for specific elements within a =
<CODE>List</CODE>, you=20
      can search for extreme elements within any =
<CODE>Collection</CODE>: the=20
      minimum and maximum. If you know your collection is already =
sorted, just=20
      get the first or last element. However, for unsorted collections, =
you can=20
      use one of the <CODE>min()</CODE> or <CODE>max()</CODE> methods of =

      <CODE>Collections</CODE>. If the object in the collection doesn't=20
      implement <CODE>Comparable</CODE>, then you must provide a=20
      <CODE>Comparator</CODE>.=20
      <UL>
        <LI><CODE>Object max(Collection collection)</CODE>=20
        <LI><CODE>Object max(Collection collection, Comparator=20
        comparator)</CODE>=20
        <LI><CODE>Object min(Collection collection)</CODE>=20
        <LI><CODE>Object min(Collection collection, Comparator=20
        comparator)</CODE> </LI></UL>
      <H5><A name=3DCheckingEquality>Checking Equality</A></H5>
      <P>
      <P>While the <CODE>MessageDigest</CODE> class always provided an=20
      <CODE>isEqual()</CODE> method to compare two <CODE>byte</CODE> =
arrays, it=20
      never felt right to use it to compare <CODE>byte</CODE> arrays =
unless they=20
      were from message digests. Now, with the help of the =
<CODE>Arrays</CODE>=20
      class, you can check for equality of any array of primitive or =
object=20
      type. Two arrays are equal if they contain the same elements in =
the same=20
      order. Checking for equality with arrays of objects relies on the=20
      <CODE>equals()</CODE> method of each object to check for equality. =
<PRE>byte array1[] =3D ...;
byte array2[] =3D ...;
if (Arrays.equals(array1, array2) {
  // They're equal
}</PRE>
      <H5><A name=3DManipulating>Manipulating</A></H5>
      <P>
      <P>The <CODE>Collections</CODE> and <CODE>Arrays</CODE> classes =
offer=20
      several ways of manipulating the elements within a =
<CODE>List</CODE> or=20
      array. There are no additional ways to manipulate the other key =
framework=20
      interfaces (<CODE>Set</CODE> and <CODE>Map</CODE>).=20
      <P>With a <CODE>List</CODE>, the <CODE>Collections</CODE> class =
lets you=20
      replace every element with a single element, copy an entire list =
to=20
      another, reverse all the elements, or shuffle them around. When =
copying=20
      from one list to another, if the destination list is larger, the =
remaining=20
      elements are untouched.=20
      <UL>
        <LI><CODE>void fill(List list, Object element)</CODE>=20
        <LI><CODE>void copy(List source, List destination)</CODE>=20
        <LI><CODE>void reverse(List list)</CODE>=20
        <LI><CODE>void shuffle(List list)</CODE>=20
        <LI><CODE>void shuffle(List list, Random random)</CODE> =
</LI></UL>
      <P>The <CODE>Arrays</CODE> class allows you to replace an entire =
array or=20
      part of an array with one element via eighteen overridden versions =
of the=20
      <CODE>fill()</CODE> method. All the methods are of the form=20
      <CODE>fill(array, element)</CODE> or <CODE>fill(array, fromIndex, =
toIndex,=20
      element)</CODE>.
      <H5><A name=3DBigONotation>Big-O Notation</A></H5>
      <P>
      <P>Performance of sorting and searching operations with =
collections of=20
      size <I>n</I> is measured using Big-O notation. The notation =
describes the=20
      complexity of the algorithm in relation to the maximum time in =
which an=20
      algorithm operates, for large values of <I>n</I>. For instance, if =
you=20
      iterate through an entire collection to find an element, the Big-O =

      notation is referred to as <CODE>O(n)</CODE>, meaning that as =
<I>n</I>=20
      increases, time to find an element in a collection of size =
<I>n</I>=20
      increases linearly. This demonstrates that Big-O notation assumes =
worst=20
      case performance. It is always possible that performance is =
quicker.=20
      <P>The following table shows the Big-O values for different =
operations,=20
      with 65,536 as the value for <I>n</I>. In addition, the operation =
count=20
      shows that if you are going to perform multiple search operations =
on a=20
      collection, it is faster to do a quick sort on the collection, =
prior to=20
      searching, versus doing a linear search each time. (And, one =
should avoid=20
      bubble sorting, unless <I>n</I> is really small!)
      <CENTER>
      <TABLE border=3D1 cellPadding=3D5 cellSpacing=3D6>
        <TBODY>
        <TR>
          <TH>Description</TH>
          <TH>Big-O</TH>
          <TH># Operations</TH>
          <TH>Example</TH></TR>
        <TR>
          <TD>Constant</TD>
          <TD>O(1)</TD>
          <TD>1</TD>
          <TD>Hash table lookup (ideal)</TD></TR>
        <TR>
          <TD>Logarithmic</TD>
          <TD>O(log<FONT size=3D1><SUB>2</SUB></FONT>n)</TD>
          <TD>16</TD>
          <TD>Binary search on sorted collection</TD></TR>
        <TR>
          <TD>Linear</TD>
          <TD>O(n)</TD>
          <TD>65,536</TD>
          <TD>Linear search</TD></TR>
        <TR>
          <TD>Linear-logarithmic</TD>
          <TD>O(n log<FONT size=3D1><SUB>2</SUB></FONT>n)</TD>
          <TD>1,048,576</TD>
          <TD>Quick sort</TD></TR>
        <TR>
          <TD>Quadratic</TD>
          <TD>O(n<FONT size=3D1><SUP>2</SUP></FONT>)</TD>
          <TD>4,294,967,296</TD>
          <TD>Bubble sort</TD></TR>
        <TR>
          <TD colSpan=3D4>Legend: n =3D 65536 =
</TD></TR></TBODY></TABLE></CENTER>
      <H4><A name=3DUsageIssues>Usage Issues</A></H4>
      <P>
      <P>The Collections Framework was designed such that the new =
framework=20
      classes and the historical data structure classes can =
interoperate. While=20
      it is good if you can have all your new code use the new =
framework,=20
      sometimes you can't. The framework provides much support for =
intermixing=20
      the two sets of collections. In addition, you can develop with a =
subset of=20
      the capabilities with JDK 1.1.
      <H5><A =
name=3DConvertingFromHistoricalCollectionsToNewCollections>Converting=20
      from Historical Collections to New Collections</A></H5>
      <P>
      <P>There are convenience methods for converting from many of the =
original=20
      collection classes and interfaces to the newer framework classes =
and=20
      interfaces. They serve as bridges when you need a new collection =
but have=20
      an historical collection. You can go from an array or =
<CODE>Vector</CODE>=20
      to a <CODE>List</CODE>, a <CODE>Hashtable</CODE> to a =
<CODE>Map</CODE>, or=20
      an <CODE>Enumeration</CODE> to any <CODE>Collection</CODE>.=20
      <P>For going from any array to a <CODE>List</CODE>, you use the=20
      <CODE>asList(Object array[])</CODE> method of the =
<CODE>Arrays</CODE>=20
      class. Changes to the <CODE>List</CODE> pass through to the array, =
but you=20
      cannot adjust the size of the array. <PRE>String names[] =3D =
{"Bernadine",
  "Elizabeth", "Gene", "Clara"};
List list =3D Arrays.asList(names);
</PRE>
      <P>Because the original <CODE>Vector</CODE> and =
<CODE>Hashtable</CODE>=20
      classes have been retrofitted into the new framework, as a=20
      <CODE>List</CODE> and <CODE>Map</CODE> respectively, there is no =
work to=20
      treat either of these historical collections as part of the new =
framework.=20
      Treating a <CODE>Vector</CODE> as a <CODE>List</CODE> =
automatically=20
      carries to its subclass <CODE>Stack</CODE>. Treating a=20
      <CODE>Hashtable</CODE> as a <CODE>Map</CODE> automatically caries =
to its=20
      subclass <CODE>Properties</CODE>.=20
      <P>Moving an <CODE>Enumeration</CODE> to something in the new =
framework=20
      requires a little more work, as nothing takes an =
<CODE>Enumeration</CODE>=20
      in its constructor. So, to convert an <CODE>Enumeration</CODE>, =
you create=20
      some implementation class in the new framework and add each =
element of the=20
      enumeration. <!-- BEGIN VCD7 CODE SAMPLE COMPONENT  -->
      <TABLE border=3D0 cellPadding=3D10 cellSpacing=3D0 class=3Dgrey4 =
width=3D"100%">
        <TBODY>
        <TR>
          <TD><PRE>Enumeration enumeration =3D ...;
Collection collection =3D new LinkedList();
while (e.hasMoreElements()) {
  collection.add(e.nextElement());
}
// Operate on collection
</PRE></TD></TR></TBODY></TABLE><SPAN class=3Dsp20></SPAN><BR><!-- END =
VCD7 CODE SAMPLE COMPONENT  -->
      <H5><A =
name=3DConvertingFromNewCollectionsToHistoricalCollections>Converting=20
      from New Collections to Historical Collections</A></H5>
      <P>
      <P>In addition to supporting the use of the old collection classes =
within=20
      the new collection framework, there is also support for using the =
new=20
      framework and still using libraries that only support the original =

      collections. You can easily convert from <CODE>Collection</CODE> =
to array,=20
      <CODE>Vector</CODE>, or <CODE>Enumeration</CODE>, as well as from=20
      <CODE>Map</CODE> to <CODE>Hashtable</CODE>.=20
      <P>There are two ways to go from <CODE>Collection</CODE> to array, =

      depending upon the type of array you need. The simplest way =
involves going=20
      to an <CODE>Object</CODE> array. In addition, you can also convert =
the=20
      collection into any other array of objects. However, you cannot =
directly=20
      convert the collection into an array of primitives, as collections =
must=20
      hold objects.=20
      <P>To go from a collection to an <CODE>Object[]</CODE>, you use =
the=20
      <CODE>toArray()</CODE> method of <CODE>Collection</CODE>: =
<PRE>Collection collection =3D ...;
Object array[] =3D collection.toArray();
</PRE>
      <P>The <CODE>toArray()</CODE> method is overridden to accept an =
array for=20
      placing the elements of the collection: <CODE>toArray(Object=20
      array[])</CODE>. The datatype of the argument determines the type =
of array=20
      used to stored the collection and returned by the method. If the =
array=20
      isn't large enough, a new array of the appropriate type will be =
created. <PRE>Collection collection =3D ...;
int size =3D collection.size();
Integer array[] =3D=20
  collection.toArray(new Integer[size]);
</PRE>
      <P>To go from <CODE>Collection</CODE> to <CODE>Vector</CODE>, the=20
      <CODE>Vector</CODE> class now includes a constructor that accepts =
a=20
      <CODE>Collection</CODE>. As with all these conversions, if the =
element in=20
      the original conversion is mutable, then no matter from where it =
is=20
      retrieved and modified, its changed everywhere. <!-- BEGIN VCD7 =
CODE SAMPLE COMPONENT  -->
      <TABLE border=3D0 cellPadding=3D10 cellSpacing=3D0 class=3Dgrey4 =
width=3D"100%">
        <TBODY>
        <TR>
          <TD><PRE>Dimension dims[] =3D {new Dimension (0,0),=20
  new Dimension (0,0)};
List list =3D Arrays.asList(dims);
Vector v =3D new Vector(list);
Dimension d =3D (Dimension)v.get(1);
d.width =3D 12;
</PRE></TD></TR></TBODY></TABLE><SPAN class=3Dsp20></SPAN><BR><!-- END =
VCD7 CODE SAMPLE COMPONENT  -->
      <P>Going from <CODE>Collection</CODE> to <CODE>Enumeration</CODE> =
is much=20
      easier than going from <CODE>Enumeration</CODE> to=20
      <CODE>Collection</CODE>. The <CODE>Collections</CODE> class =
includes a=20
      static method to do the conversion for you: <PRE>Collection =
collection =3D ...;
Enumeration enum =3D=20
  Collections.enumeration(collection);
</PRE>
      <P>The conversion from <CODE>Map</CODE> to <CODE>Hashtable</CODE> =
is=20
      similar to <CODE>Collection</CODE> to <CODE>Vector</CODE>, just =
pass the=20
      new framework class to the constructor. After the conversion, =
changing the=20
      value for the key in one does not alter the value for the key in =
the=20
      other. <PRE>Map map =3D ...;
Hashtable hashtable =3D new Hashtable(map);
</PRE>
      <H5><A name=3DJDK11Support>Working with the Collections Framework =
Support in=20
      JDK 1.1</A></H5>
      <P>
      <P>If you are still using JDK 1.1, you can start taking advantage =
of the=20
      Collections Framework today. Sun Microsystems <A=20
      =
href=3D"http://java.sun.com/products/javabeans/infobus/index.jsp#COLLECTI=
ONS">provides</A>=20
      a subset of the collections API for use with JDK 1.1. The =
interfaces and=20
      classes of the framework have been moved from the =
<CODE>java.lang</CODE>=20
      and <CODE>java.util</CODE> package to the non-core=20
      <CODE>com.sun.java.util.collections</CODE> package. This is not a =
complete=20
      set of classes changed to support the framework, but only copies =
of those=20
      introduced. Basically, what that means is none of the system =
classes are=20
      sortable by default, you must provide your own =
<CODE>Comparator</CODE>.=20
      <P>The following table lists the classes available in the =
Collections=20
      Framework release for JDK 1.1. In some cases, there will be two =
different=20
      implementations of the same class, like with <CODE>Vector</CODE>, =
as the=20
      1.2 framework version implements <CODE>List</CODE> and the core =
1.1=20
      version doesn't.
      <CENTER>
      <TABLE border=3D1 cellPadding=3D2>
        <TBODY>
        <TR>
          <TD><CODE>AbstractCollection</CODE></TD>
          <TD><CODE>AbstractList</CODE></TD></TR>
        <TR>
          <TD><CODE>AbstractMap</CODE></TD>
          <TD><CODE>AbstractSequentialList</CODE></TD></TR>
        <TR>
          <TD><CODE>AbstractSet</CODE></TD>
          <TD><CODE>ArrayList</CODE></TD></TR>
        <TR>
          <TD><CODE>Arrays</CODE></TD>
          <TD><CODE>Collection</CODE></TD></TR>
        <TR>
          <TD><CODE>Collections</CODE></TD>
          <TD><CODE>Comparable</CODE></TD></TR>
        <TR>
          <TD><CODE>Comparator</CODE></TD>
          <TD><CODE>ConcurrentModificationException</CODE></TD></TR>
        <TR>
          <TD><CODE>HashMap</CODE></TD>
          <TD><CODE>HashSet</CODE></TD></TR>
        <TR>
          <TD><CODE>Hashtable</CODE></TD>
          <TD><CODE>Iterator</CODE></TD></TR>
        <TR>
          <TD><CODE>LinkedList</CODE></TD>
          <TD><CODE>List</CODE></TD></TR>
        <TR>
          <TD><CODE>ListIterator</CODE></TD>
          <TD><CODE>Map</CODE></TD></TR>
        <TR>
          <TD><CODE>NoSuchElementException</CODE></TD>
          <TD><CODE>Random</CODE></TD></TR>
        <TR>
          <TD><CODE>Set</CODE></TD>
          <TD><CODE>SortedMap</CODE></TD></TR>
        <TR>
          <TD><CODE>SortedSet</CODE></TD>
          <TD><CODE>TreeMap</CODE></TD></TR>
        <TR>
          <TD><CODE>TreeSet</CODE></TD>
          <TD><CODE>UnsupportedOperationException</CODE></TD></TR>
        <TR>
          <TD><CODE>Vector</CODE></TD>
          <TD>&nbsp;</TD></TR></TBODY></TABLE></CENTER>
      <H4><A name=3DAlternativeCollections>Alternative =
Collections</A></H4>
      <P>
      <P>Because the Collection Framework was not available prior to the =

      introduction of the Java 2 platform, several alternative =
collection=20
      libraries became available. Two such libraries are Doug Lea's =
Collections=20
      Package and ObjectSpace's JGL.
      <H5><A name=3DDougLeaCollectionsPackage>Doug Lea's Collections=20
      Package.</A></H5>
      <P>
      <P>The <A=20
      =
href=3D"http://gee.cs.oswego.edu/dl/classes/collections/index.html">colle=
ctions=20
      package</A> from Doug Lea (author of <I>Concurrent Programming in=20
      Java</I>), was first available in October 1995 and last updated in =
April=20
      1997. It probably offered the first publicly available collections =

      library. While no longer supported, the library shows the =
complexity added=20
      to the class hierarchy when you try to provide updateable and =
immutable=20
      collections, without optional methods in interfaces or wrapper=20
      implementations. While a good alternative at the time, its use is =
no=20
      longer recommended. (Doug also helped author some of the =
Collections=20
      Framework.)
      <H5><A name=3DObjectSpaceJGL>ObjectSpace's JGL</A></H5>
      <P>
      <P>In addition to Doug Lea's collections library, the <A=20
      href=3D"http://www.objectspace.com/">Generic Collection Library =
for Java</A>=20
      (JGL) from ObjectSpace was an early collection libraries available =
for the=20
      Java platform. Following the design patterns of the Standard =
Template=20
      Library (STL) for C++, the library provides algorithmic support, =
in=20
      addition to a data structure library. While the JGL is a good =
alternative=20
      collection framework, it didn't meet the <A=20
      =
href=3D"http://java.sun.com/products/jdk/1.2/docs/guide/collections/overv=
iew.html">design=20
      goals</A> of the Collections Framework team: "The main design goal =
was to=20
      produce an API that was reasonably small, both in size, and, more=20
      importantly, in <I>conceptual weight</I>." With that in mind, the =
team=20
      came up with the Collections Framework.=20
      <P>While not adopted by Sun Microsystems, the JGL has been =
included with=20
      many IDE tool. Due to its early availability, the JGL is available =
to well=20
      over 100,000 developers.=20
      <P>For a comparison of JGL versus the Collections Framework, see =
<A=20
      =
href=3D"http://www.javaworld.com/javaworld/jw-01-1999/jw-01-jglvscoll.htm=
l">The=20
      battle of the container frameworks: which should you use?</A> =
article in=20
      JavaWorld. [If you are curious of how the library name maps to the =

      acronym, it doesn't. The name of the first version of the library=20
      infringed on Sun's Java trademark. ObjectSpace changed the name, =
but the=20
      original acronym stuck.]
      <H4><A name=3DConclusion>Conclusion</A></H4>
      <P>
      <P>The Collections Framework provides a well-designed set of =
interfaces,=20
      implementations, and algorithms for representing and manipulating =
groups=20
      of elements. Understanding all the capabilities of this framework =
reduces=20
      the effort required to design and implement a comparable set of =
APIs, as=20
      was necessary prior to their introduction. Now that you have =
completed=20
      this module, you can effectively manage groups of data elements.
      <H4><A name=3DResources>Resources</A></H4>
      <P>
      <P>The following resources, some pulled from the course notes, =
should help=20
      in your usage and understanding of the Collections Framework:
      <UL>
        <LI><A=20
        =
href=3D"http://developer.java.sun.com/developer/technicalArticles//DataTy=
pes/DataStructures/">How=20
        to Build Data Structures in Java</A> - a Java Developer =
Connection<FONT=20
        SIZE?-2?></FONT>JDC article from prior to the existence of the=20
        Collection Framework=20
        <LI><A =
href=3D"http://hillside.net/patterns/DPBook/DPBook.html"><I>Design=20
        Patterns</I></A> book - Erich Gamma, Richard Helm, Ralph =
Johnson, and=20
        John Vlissides (<A=20
        href=3D"http://hillside.net/patterns/DPBook/GOF.html">The Gang =
of=20
        Four</A>)=20
        <LI><A=20
        =
href=3D"http://java.sun.com/products/javabeans/infobus/index.jsp#COLLECTI=
ONS">Collections=20
        Framework Support for JDK 1.1</A>=20
        <LI><A=20
        =
href=3D"http://gee.cs.oswego.edu/dl/classes/collections/index.html">Doug =

        Lea's Collections Package</A>=20
        <LI><A href=3D"http://www.objectspace.com/">Generic Collection =
Library for=20
        Java</A> - JGL from ObjectSpace=20
        <LI><A=20
        =
href=3D"http://www.javaworld.com/javaworld/jw-01-1999/jw-01-jglvscoll.htm=
l">The=20
        battle of the container frameworks: which should you use?</A> -=20
        JavaWorld article from January 1999=20
        <LI><A=20
        =
href=3D"http://java.sun.com/products/jdk/1.2/docs/guide/collections/index=
.html">Sun's=20
        Collections Framework Home</A> </LI></UL><!-- begin footer -->
      <P>Copyright =A9 1999 <A=20
      href=3D"http://www.jguru.com/portal/index.html">MageLang =
Institute</A>. All=20
      Rights Reserved. </P><!-- =
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D --><!-- End Main =
Content --><!-- =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D --><!-- =
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D --><!-- END OF =
MAIN CONTENT --><!-- =
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D =
--><!--stopindex--><!-- END CENTRAL COLUMN COMPONENTS --></TD>
    <TD vAlign=3Dtop><!-- BEGIN RIGHT COLUMN COMPONENTS --><!-- END =
RIGHT COLUMN COMPONENTS --></TD></TR><!-- BEGIN SPACER ROW -->
  <TR>
    <TD><IMG alt=3D" " border=3D0 height=3D1 =
src=3D"http://java.sun.com/im/a.gif"=20
      width=3D560></TD>
    <TD><IMG alt=3D" " border=3D0 height=3D1 =
src=3D"http://java.sun.com/im/a.gif"=20
      width=3D170></TD></TR><!-- END SPACER ROW --></TBODY></TABLE><!-- =
END WRAPPER TABLE, 2 COLUMN, MAIN/RIGHT --><!-- BEGIN VNV5 FOOTER  -->
<TABLE border=3D0 cellPadding=3D0 cellSpacing=3D10 width=3D"100%">
  <TBODY>
  <TR>
    <TD>
      <TABLE border=3D0 cellPadding=3D0 cellSpacing=3D0 class=3Dvatop =
width=3D"100%">
        <TBODY>
        <TR>
          <TD class=3Dgrey3 colSpan=3D4 vAlign=3Dtop><IMG alt=3D" " =
border=3D0 height=3D2=20
            src=3D"http://java.sun.com/im/a.gif" width=3D1></TD></TR>
        <TR>
          <TD><IMG alt=3D" " border=3D0 height=3D1=20
            src=3D"http://java.sun.com/im/a.gif" width=3D190><BR><A=20
            href=3D"http://www.sun.com/"><IMG alt=3D" " border=3D0 =
height=3D29=20
            src=3D"http://java.sun.com/im/logo_sun_small_sdn.gif" =
vspace=3D5=20
            width=3D61></A></TD>
          <TD vAlign=3Dtop width=3D"100%"><IMG alt=3D" " border=3D0 =
height=3D1=20
            src=3D"http://java.sun.com/im/a.gif" width=3D350><BR>
            <DIV class=3Dfooter><A=20
            =
href=3D"http://java.sun.com/dispatcher.jsp?uid=3D6910015">Company=20
            Info</A> &nbsp;|&nbsp; <A=20
            =
href=3D"http://java.sun.com/dispatcher.jsp?uid=3D6910010">About This=20
            Site</A> &nbsp;|&nbsp; <A=20
            =
href=3D"http://java.sun.com/dispatcher.jsp?uid=3D6910011">Press</A>=20
            &nbsp;|&nbsp; <A=20
            href=3D"http://developers.sun.com/contact/index.jsp">Contact =
Us</A>=20
            &nbsp;|&nbsp; <A=20
            =
href=3D"http://java.sun.com/dispatcher.jsp?uid=3D6910014">Employment</A><=
BR><A=20
            =
href=3D"http://java.sun.com/dispatcher.jsp?uid=3D6910012">How to Buy</A> =

            &nbsp;|&nbsp; <A=20
            =
href=3D"http://java.sun.com/dispatcher.jsp?uid=3D6910009">Licensing</A>=20
            &nbsp;|&nbsp; <A=20
            =
href=3D"http://java.sun.com/dispatcher.jsp?uid=3D6910013">Terms of=20
            Use</A> &nbsp;|&nbsp; <A=20
            =
href=3D"http://java.sun.com/dispatcher.jsp?uid=3D6910016">Privacy</A>=20
            &nbsp;|&nbsp; <A=20
            =
href=3D"http://java.sun.com/dispatcher.jsp?uid=3D6910017">Trademarks</A> =

            <BR><SPAN class=3Dsp10>&nbsp;</SPAN><BR><BR><SPAN=20
            class=3Dsp10>&nbsp;</SPAN><BR>Copyright 1994-2004 Sun =
Microsystems,=20
            Inc. </DIV></TD>
          <TD><IMG alt=3D" " border=3D0 height=3D1=20
            src=3D"http://java.sun.com/im/a.gif" width=3D40></TD>
          <TD vAlign=3Dtop>
            <DIV class=3Dfooter><B><A=20
            href=3D"http://java.sun.com/dispatcher.jsp?uid=3D6910010">A =
Sun=20
            Developer Network Site</A></B></DIV>
            <DIV class=3Dfooter><IMG alt=3D" " border=3D0 height=3D1=20
            src=3D"http://java.sun.com/im/a.gif" width=3D170><BR>Unless =
otherwise=20
            licensed, code in all technical manuals herein (including =
articles,=20
            FAQs, samples) is provided under this <A=20
            =
href=3D"http://java.sun.com/dispatcher.jsp?uid=3D6910008">License</A>.=20
            <BR><SPAN class=3Dsp5>&nbsp;</SPAN><BR><A=20
            =
href=3D"http://java.sun.com/dispatcher.jsp?uid=3D6910006"><IMG =
align=3Dtop=20
            alt=3DXML border=3D0 height=3D14=20
            src=3D"http://java.sun.com/im/button_xml.gif" =
width=3D36></A>&nbsp;<A=20
            =
href=3D"http://java.sun.com/dispatcher.jsp?uid=3D6910007">Content=20
            Feeds</A> </DIV></TD></TR>
        <TR>
          <TD class=3Dgrey3 colSpan=3D4 vAlign=3Dtop><IMG alt=3D" " =
border=3D0 height=3D2=20
            src=3D"http://java.sun.com/im/a.gif"=20
  width=3D1></TD></TR></TBODY></TABLE></TD></TR></TBODY></TABLE><!-- END =
VNV5 FOOTER -->
<SCRIPT language=3DJavaScript=20
src=3D"http://java.sun.com/js/omi/jsc/s_code_remote.js"></SCRIPT>
</BODY></HTML>

------=_NextPart_000_0000_01C513A0.3B9F7C10
Content-Type: image/gif
Content-Transfer-Encoding: base64
Content-Location: http://java.sun.com/im/a.gif

R0lGODlhAQABAIAAAP///wAAACH5BAEAAAAALAAAAAABAAEAAAICRAEAOw==

------=_NextPart_000_0000_01C513A0.3B9F7C10
Content-Type: image/gif
Content-Transfer-Encoding: base64
Content-Location: http://java.sun.com/im/logo_java_grey.gif

R0lGODlhtAA1AMQAAJKq0PCwqElztnGSxrXE2+/a2PFnVfGWivGFd6O31uzs7e/Nye+kmsnT4vBT
P/F1ZO/k49Pa5vDCu8zK1/BaR+Ll693i6WCFwPDIwu/QzMPO4Ofp7ISgy+/e3O/V0u/v7yH5BAAA
AAAALAAAAAC0ADUAAAX/4CeOZGmeaKqubOu+cCzPdG3feK7vfC9DEp9wSCz+HsakcjksUJjQqBR2
MEyvWGzHEch6v0mHFUwu5yAUx6iTUZjf8JXE4YB8CohDIc7viwJ0dgdcfoVwDGIiBg57ho5gGXQi
g3aPllkIhB8OCJeeV5l7BYmfpUwLDkGbqaatSYMiiIyutEMPDIoOuLW8PAgZH4CqvcQyChYWIxjB
YyIWCQARxdMnDRwABBslwx8KFREAAgTU5B8cAuIWFRsVFhETE9DXySIXAuXU4AMD9ugCFxcGcEjQ
wM0Ie/gSutAgTuG0DQIAGBxRQQO2EQQEJHA4TcEAfyD9DahQIQEHaRzJ/0UgkKAlAZQivKUsF83E
xJnlKoAECHIcTmIbCLz8sCFBP3QXAGjQRuLmz0vhfMJIIPWppQboBiTQQO9EhQYsOXAYB9PqowYJ
+IVcGxBbBAsatJo1FaFBXQ0aGtiNEEGDUAD8ODSYa0oB2JbQAAAQe41qWcKQI5fpsExyOUQeLJND
1EhzMUAQICAwQOFBkAOdPkAwLZo0a898QHu4JetDpgUf5jAoQJtOB9hxAP0eMcfDlgMfOJOYww04
GdCqUS8C5uDJAzXRRzuo7LwMoA+oDDDIBCwTBE4fMIgZz6q7dwcKrotAtWxOpmWL5rd3Dwb09Qwe
LKIKHdgtskCA+/HnBSQiH0RCx30iZLKLeg9upyAYaazRwnAXgiFhhyCGKOKIJJZoRAgAOw==

------=_NextPart_000_0000_01C513A0.3B9F7C10
Content-Type: image/gif
Content-Transfer-Encoding: base64
Content-Location: http://java.sun.com/im/masthead_the_source.gif

R0lGODlhBwEZAPceALvM/f///9PQ7nNw0IeJ3Kah3bTE+aGr7IV+0GZgx6ez8fTz+2BXw2Rbw4CB
2JSa5G1oy+no9np51HpyzG9myN7c8o2S4JuV2a679bKt4Zqi6JCK1L255cjE6v///wAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACH5BAEAAB4ALAAAAAAHARkA
AAj/AD0IHEiwoMGDCBMqXMiwocOHECNKnEixosWLGDNq3Mixo8ePIEOKHAmRwQAIJFOq/DgBgcuX
Lyd4EBBAgMcJFwogaLCSowMDAAAYSKDR5ICjKHt6AHBA6UWaAaJKjWqTps2NEyJMDcCBp1OLBgxI
GEBg44CgaA08IKqS6deKGQTIXUBVboaZNTdSoLuAQ4EMFSK8rQgBgAWPZxUcdaBAaFKSbgdbhFrQ
6kYOUWUO9Co54tmyHc82HfgAgIK2oztPpEzQsgcKCBQioLCQ5oKGDWZj1EyQAu+CsBl+PpjgqEIG
jwuKLogBgAODEAawjRh9+sDIBYsPOC4dodHjyaMn/68dtXLNDVoDLLhQcALUABE2JITK+eCF9PAL
tM470DXeCxNUEIB+AhVAl3rsDWSgVF0ddBZaQQ0EwQFpgSYQAQB44ECEDmIn0IYaEDRAc0EdwIAH
DAhVUGnPCTQiWiYS5KEHE1ZIEIYJlBZUiAQxYEFaLV6Y4YYZ0kiiig2x1p9UC7xHm0B71VQAVLEd
lEFUFdRH0JUBVCBAegTidZVA/tGUwYEEcuklXU9euUAGZ/JXkEkYPmAcimERMABjAFiI4YYK8GjQ
cgQVdppACRigAFEYjkahBARRyFaii3rQqIyp4WmAnnz6WaIEEjR22EA/lpVAY9sJCSiPGBiwHQOQ
Jv9Z3n4DCoRAVGGWGUAHCDVw4AIFaHlrrR40IOACXvkn5pK47uTBBFHdVWyVw1KbGULDkQZAqpqe
aGlQFnaYqUAcelCatx5oAACjhslogLboqjudh6Vxy0BY3mJo4b0AeJtAuwIV9sBAGPYpocERKUmm
nB5odRUFUckn0AazHkSBgFEBSxBmgg1EcQASK6trAAkKhNltBmFWAUEChqkcwgIpWtCPqWI4akKE
ylikBwYI+u1z/2JwsKA93+jcdZnKTBDNQnLrAdPfJgeA0ELe7MFZAydc8cJjLuvBxxe8VMC1Cd0n
lQBeCchBQbhyvd+YynogYNcDzQ2TgLx2aOG/4Wr/iDCGTotrEId8EyQBwo0l9SeiMHtwuIXYFU7Q
hqABbjjCpRXUGMHbFgSUBdYxpLDXbnsw9lZSVanQglwJ1DZBr4ssZ9yvs406VdjCnO1A2VquUM6M
H/oghOBWLZC8LhKPFuSp7Z585Z3zjjCFyu/s+0A/BfXAePNtTbrXpxcg/vgFPLkQtLPW7jqxssPN
sAfqD0QV+eKX/LKFzl/9d/Q4z3h41lg7igC744F/Hco00rPTAAm4lOY1Tn/Qc1q2KLTAO30rcAV8
AFDEIqsAmKdrrjmdliBCH/jtynYEat+S6EYXuq1PWg3ZHdZe1qLr5W5cLHqeQhqTgMMFKX8Fwc4M
/0V0tAtOLnoUUogNe1SaQ5HHg2+LogeGJbGJpGdhHZsY2ToAHyl+Dy8oM8/KHOI8BC4NAIrj3w0L
hSRyOfEg+jqXjN44uEyZkVRobBpB5PitWMFRjXMql0JGp0KB0CVLBFFdQS5QRdNFZW2OJNkKFRSV
Ki3IfXQLn0AakAGenM5+FDDf/QiCqoEwAANOXOKghAgUP3qglAgxoFo0B0hMkZJ/p0wl/wQ2kMON
y2gYNOXUOvhBL56uSXJRD0LSM5eMeaUBzOyAVhbAG4hRhS+zex80sSQAuuhnm12Si1ZcRsRwHW5T
e4KlEX8nlAMcoDkGCNKHhKInsmjAaY0B5IbQadxPbg2zl/RMJ//0JRAJoBJdHmjOAcYiAQtkbZ0C
YcADGNqYviGEkAxT1gUOFJUOXGCExSoAfvpSnwa8pya/8cBGoxIBRmbThe6RSks3c9IIZCCl0utb
9oKCAVeq8mVoUQDo4AiUoKjFOhii44WKKpS1DERdMNvp1HxKvAcglEbUC4oCgmRDCDB1UyppiSIV
AhucbsYlIJ2WWRkCG1GeVTcUqU5KjhI6MjJQRBiUa0H0ZUHi9HUh2lGNYAdL2I78tLCITaxiV3LY
xTr2sZC1SGMjS9nKWjY7A7iqSgICADs=

------=_NextPart_000_0000_01C513A0.3B9F7C10
Content-Type: image/gif
Content-Transfer-Encoding: base64
Content-Location: http://java.sun.com/im/masthead_sdn_site.gif

R0lGODlhqQAPALMPAKah3dPQ7v///2Rbw4V+0G9myOno9vTz+3pyzJuV2bKt4d7c8r255ZCK1MjE
6llPvyH5BAEAAA8ALAAAAACpAA8AAAT/8MlJq7046827/2AojmT5FIiprhLKckFgDUqciEnsNCUg
v5Mc74FQYAgs34VmeygMEmQIIRAMJ4pDIgEQAQQABpikBEq+0AfhVykIkmxKdttNGN1eh8FIWfBb
KUQFJwUDBIMUX2cCAxKGKYaNao2PZ3EEBJIFhZkTlYQDgWcHAjdrjgSQX4eRJ1IuUZ2gKUoFUhJ+
FCgDq4ifGQFhaRMBBpIPZcHIC6QHiIsSVDwFB8wKbjwEAgjU1sg/BQYG1Y0AC+MHjd0HRgAOC3E+
xWoy6woIBgIBCdgPYikB7ogjh+ydDB8DDDCgUOyYD3z6btjLMGBbAwHP1AjQYkmCMgAG/wqNmaBI
whgGMi4OWLAwwRuUD1SWgTngQBeQAyp2gSkTzLFv2hKc4smo5AMDXZh1QepPRs2bPr/hpKCN4zdk
byQQ/Un1wIOKNyggCCDAwdUHH38oI5n1wRiFmAQQeOJEBlxtBMowRXtQ7cK7cs1ZUFLsFOC8bWEK
YGBW7tEufJeRzHdrwtiyV40exmAOk8ILCkolu6kWMrQTjgUYiBEAwcUCC7qoZo2gzMgYZ3HPjlE7
TkdtilfzNuqSQOwD2kxCxl0GWb6wFkJzOdh2d2sMZKuoXgJmdG7TWCW4bGSzAphtD8qT/KE+4Nlc
6jtW0KsvPXijbgJSYSyhfTs2PgCQDsN3AChhVHwZWCEeI0GkEFpt2xBQnndsEZAAOxK808gQxaSh
YUySPaBHKI4pQQUSH/LQ3HoLypAiVjlJMM4NB6g34olnffMUBQk4uI2BjDTy4gXaINLPKBvdkJAA
8JDm0X1V7HVCPvqUM1I4VQQwgEv1UMnHF0m2QKWWK8p3VJdZDkCNAHz8IyJGYlbxJYDUiSJgmLWQ
IlCaJHDF1QgZXRCoLolc10YJgf6JwaAeKPoVoWZEqkKZklZq6aWYRgFdppyOEAEAOw==

------=_NextPart_000_0000_01C513A0.3B9F7C10
Content-Type: image/gif
Content-Transfer-Encoding: base64
Content-Location: http://java.sun.com/im/masthead_prod_and_tech.gif

R0lGODlhngAPALMAAP///4V+0Kah3dPQ7mRbw+no9m9myPTz+3pyzN7c8pCK1MjE6rKt4ZuV2b25
5f///yH5BAEAAA8ALAAAAACeAA8AAAT/8MlJq7046827/2AojmRpnmiqIobqUgExxu863E77DYJH
IBxBYqCwIG5I4AYQGDE9BkDPJZNVAlJF4mDt8DyCwaZRICgAFkJAIKUtm6InWJn6fmHPc2C/fhAE
gFZ/AgU9BlMBDRKHAgYBA4Uta40UhA+WF1hwg4oSkzIACoA6jYBKgwJWcpNwD5NTlK6jnrMeWAi3
eE2ahAcMD0NCCX4JC4Q9WBJhDwYHxgwBBZFntRIEzgd0V3LFDQeKZwwMigAHQgUS5ecSwQnDD3m+
DKEP3gIOaPBNCt8L6NSxPAwBJmYCFgEB3F3i4gqAjDMIMH1JdkkMJgk3lAHQQYFAgScU/3U1lMFA
zAAHFPLkUznyAUR9Dwb8ArbgwbeG6ZrI9MOEDUcf5q5N8QQAwEkZyy7lI8BkQcGJ+ZZlnDDVQAIA
DrrEXOAgGxkLmpTeKCBGSspdT0D2XJq2idkHJRGozQmP7AAmVrFq3VDygYOCBuUoK8hmUdOnyKKK
cUphqidnE5g26VoI7JPCFMydban2T74obpto9jsgShGKaYcahOyhQQvX21pVlCC3iSWfHnvIVUCA
sYADkkhX+Juyh0cAnUTuXvRgwbAfMFGjfVD7EjqYjD0qKrAgAD66TmX8JI4i7ISkcIsWAELgKvcp
C8oRJ3AXwK8zobxJk63f/m+UIqWnDkl1H900V3T5zAPAehJIgwACH9lH2w3z0AVhUQkYoF8BstWQ
RgV7+eFhByGOUKI1F5xxwYkjtujiixeEMYAvMNZo440Y7KFNChEAADs=

------=_NextPart_000_0000_01C513A0.3B9F7C10
Content-Type: image/gif
Content-Transfer-Encoding: base64
Content-Location: http://java.sun.com/im/masthead_tech_topics.gif

R0lGODlhaQAPALMPAKah3f///4V+0NPQ7mRbw/Tz+29myHpyzJuV2bKt4eno9t7c8r255cjE6pCK
1P///yH5BAEAAA8ALAAAAABpAA8AAAT/8MlJq7046827/2AojmSJEYJpHYbqYsggy5wQcEYAdMM+
JbNBopPziQgSJMUgYAQEqY2tAzjwjI+DYLEQWKnfEKEgGEcpgJvEAACcEQDEw8YGKAH1L14ClxPg
bhI9FjQSAm1RCHkSe3NtSIeNFwAKBJRKE2lrBW0BLQmcDUwBCwAFDBIBnAsKqSmgAKICCbGeD4MV
hQ4FCQkBDre8DQVITw8OAb0IyG0tJzoEOhWaDwALEqUPAXKGakCux2rG2xfGuBSFQtgNtzvRO+ao
jLYaNloBYfOCBTKcNmdTqolL8U8bFGNJAMgwh0XQgFQ+vuFSAC+FtDULAjDAZCEbRQvUmgpJOIBw
jhpr4GwU81KSwYCV7Qg9fMBJgsuY2irSbCigALsLlh4EBXmyQAsCSHhlQXFyprGAxpQeIDAAFckU
5yYUavCQgAI5gxDYMtbgGoEwN0dQoxoggAJgCAq4vcfIKcGBD+LOFatgQJcHDApw0zrzgIK2Q26R
EgzOsCoEcRUoOOOC4wsKljtw7JH5sufPH7KCHk06A4sXEQAAOw==

------=_NextPart_000_0000_01C513A0.3B9F7C10
Content-Type: image/gif
Content-Transfer-Encoding: base64
Content-Location: http://java.sun.com/im/logo_sun.gif

R0lGODlhSAAhAMQfAP///5iS13lxy/X0+8vI67ay42Naw42G09rY8dXT74N7z6yn3+Ti9G5lx7Gt
4erp98G95+De86Kc23Nryfj4/Kah3fz8/lxSwO/u+NDN7f7+/+jm9q6p4P7+/pGK1f///yH5BAEA
AB8ALAAAAABIACEAAAX/4CeOZGmeaKqurAm8RyvPdFq8r0IbS4QngZrQZFAALIkBQNcSKBcKBeG1
GFoZlIPSUaEsWU6AhPQQW4UPCGMQ2Ha/qumgdGucaQjApoD1DCgOC38rLxElCw93MwgHeRkca20a
DpQJMSg4diMLECIGAUErCguaIgIKAikvCBcJAAkLG2wUAxMOHRqqLwkkDXZaL2MjEDkixK+erjAn
OBwIHq4ZiHMBCRYUGRsoPi+dJAE4AFWeOAYfEEoAhk5pVC4vFcuuGBQUH1OAZRMn4DihHw3YKEsl
oh+BDwUGGHkVsNPCcSNwxAMQQIEDAXkoSLBGgYO+DADMleBW7EMCCA1e/8wZMYViSgH9CkTwdgPA
JRE4JKyqEKFDhCImAQxwgEGDgXAmwqg04MSATgAFRqR8waPKsQSGRKQTiRMABAyvelDoAMeCV7AX
dinhOuJAuAUG7JQBQBDhi4Mj0g3QZLDEiwcUEvABNPaCCJAUjO5KCABFTaGm/o4wkO6f22AjlP0b
QbaCAyyfAYFkMIHYVME+mBBJ1/gcZmPlhkmOLJQtCTUAHGygIOCCWXUiNLziY0E1BIgiHmulKuIy
gIMCUlUeUdPhiQ0WKmAnlZaCdgYNMiDgsAGOiAfIPyxsfBlvQM0mA1xOlPfFqZUmKgD2kMGCBCWW
YACeBGWo9sFR6V3WSf9NQRgQQQEtNdCGAQy2JVkE6ZHgFQEOUBBBAA9okIEHGGQgAAEGqvdcCcTs
9QE3Bjh4UBkPOBFDGQNwVRMnWaWQQQcDcDAAAwGARUAAFGhjwlOlLBQKDgU8kIA5Kg0QlQDdkKDM
AAMcEAF+zAjFAQVEDmABAQvU1YsSbChwQ5cjzAVVRFl+sMAymakUHQH06TJABQNsoAA9tpVwQAEJ
JHAkWwegWQpCBNzUQBQlKCCYJtGxoJIg2qSoyKctqJSYEKAIERWodH4IBgEnJWDpKbBAeCIBDSAK
ygESsJpQABuBQsCvBBhAwKk0PKqCAhEcYMkCUCRgh6uRMutSBAQQGARYL+rAIgEE1UgQgaeoqgfF
uM0eIAAv1UIgAbLIJqLFiw080IAA41p6gFvhmjDpvlHMu0Cp9I7BLA8SNLCAwAoc8K8C+1a0wE35
noFIoRFXbPHFGGesMQohAAA7

------=_NextPart_000_0000_01C513A0.3B9F7C10
Content-Type: image/gif
Content-Transfer-Encoding: base64
Content-Location: http://java.sun.com/im/ic_print.gif

R0lGODlhDgAMAIAAAP///4mc5iH5BAAAAAAALAAAAAAOAAwAQAIdhIOpEObPopoItskuxRe+9nmH
A3pgKUrpuG1k6xQAOw==

------=_NextPart_000_0000_01C513A0.3B9F7C10
Content-Type: image/gif
Content-Transfer-Encoding: base64
Content-Location: http://java.sun.com/developer/onlineTraining/collections/images/venn.gif

R0lGODdhAAH0APcAAAAAAK+vr5mZmXd3d1VVVe7u7js7Ozc3NzMzMykpKSUlJczMzBMTExEREQ8P
Dw0NDQcHBwUFBQMDA6qqqoiIiHBwcGZmZlhYWP///0pKSkhISERERDIyMjAwMN3d3SIiIiAgIBwc
HLu7uwgICAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACwAAAAAAAH0AEAI/wAxCBxI
sKDBgwgTKlzIUOACESI8NJxIsaLFhg8jXtzIsaPHjwQFfAAAwMIEkCgRFhCwgeQGER5FkjSZsibB
lS0BvLTJ82OBlg1g9hyKsoACkheIKv1IoQGAAUtBCiApIKpVi1MBVKVoAUCDBVfDNuz6VazACQA+
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
fdQshCMK5U8ANS36xBpCY9T8EhAAOw==

------=_NextPart_000_0000_01C513A0.3B9F7C10
Content-Type: image/gif
Content-Transfer-Encoding: base64
Content-Location: http://java.sun.com/developer/onlineTraining/collections/images/CollectionInterfaces.gif

R0lGODlhIQHZAPf/AAAAAIAAAACAAICAAAAAgIAAgACAgMDAwMDcwKbK8EAgAGAgAIAgAKAgAMAg
AOAgAABAACBAAEBAAGBAAIBAAKBAAMBAAOBAAABgACBgAEBgAGBgAIBgAKBgAMBgAOBgAACAACCA
AECAAGCAAICAAKCAAMCAAOCAAACgACCgAECgAGCgAICgAKCgAMCgAOCgAADAACDAAEDAAGDAAIDA
AKDAAMDAAODAAADgACDgAEDgAGDgAIDgAKDgAMDgAODgAAAAQCAAQEAAQGAAQIAAQKAAQMAAQOAA
QAAgQCAgQEAgQGAgQIAgQKAgQMAgQOAgQABAQCBAQEBAQGBAQIBAQKBAQMBAQOBAQABgQCBgQEBg
QGBgQIBgQKBgQMBgQOBgQACAQCCAQECAQGCAQICAQKCAQMCAQOCAQACgQCCgQECgQGCgQICgQKCg
QMCgQOCgQADAQCDAQEDAQGDAQIDAQKDAQMDAQODAQADgQCDgQEDgQGDgQIDgQKDgQMDgQODgQAAA
gCAAgEAAgGAAgIAAgKAAgMAAgOAAgAAggCAggEAggGAggIAggKAggMAggOAggABAgCBAgEBAgGBA
gIBAgKBAgMBAgOBAgABggCBggEBggGBggIBggKBggMBggOBggACAgCCAgECAgGCAgICAgKCAgMCA
gOCAgACggCCggECggGCggICggKCggMCggOCggADAgCDAgEDAgGDAgIDAgKDAgMDAgODAgADggCDg
gEDggGDggIDggKDggMDggODggAAAwCAAwEAAwGAAwIAAwKAAwMAAwOAAwAAgwCAgwEAgwGAgwIAg
wKAgwMAgwOAgwABAwCBAwEBAwGBAwIBAwKBAwMBAwOBAwABgwCBgwEBgwGBgwIBgwKBgwMBgwOBg
wACAwCCAwECAwGCAwICAwKCAwMCAwOCAwACgwCCgwECgwGCgwICgwKCgwMCgwOCgwADAwCDAwEDA
wGDAwIDAwKDAwP/78KCgpICAgP8AAAD/AP//AAAA//8A/wD//////yH5BAEAAP8ALAAAAAAhAdkA
AAj+AP8JHEiwoMGDCBMqXMiwocOHECNKnEixosWLGDM2BMCxo8ePIEOKHEmyJEiNKFM6NMmypcuX
HVVSBCCzZkKaNnOqxKmzJ8+eC38ClSl0qNGHRY9qTKpUINOmFZ9CnfpPKtWIVo1mvbqRq1enXy9u
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

------=_NextPart_000_0000_01C513A0.3B9F7C10
Content-Type: image/gif
Content-Transfer-Encoding: base64
Content-Location: http://java.sun.com/developer/onlineTraining/collections/images/UMLCollection.gif

R0lGODlh/AAFAff/AAAAAIAAAACAAICAAAAAgIAAgACAgMDAwMDcwKbK8EAgAGAgAIAgAKAgAMAg
AOAgAABAACBAAEBAAGBAAIBAAKBAAMBAAOBAAABgACBgAEBgAGBgAIBgAKBgAMBgAOBgAACAACCA
AECAAGCAAICAAKCAAMCAAOCAAACgACCgAECgAGCgAICgAKCgAMCgAOCgAADAACDAAEDAAGDAAIDA
AKDAAMDAAODAAADgACDgAEDgAGDgAIDgAKDgAMDgAODgAAAAQCAAQEAAQGAAQIAAQKAAQMAAQOAA
QAAgQCAgQEAgQGAgQIAgQKAgQMAgQOAgQABAQCBAQEBAQGBAQIBAQKBAQMBAQOBAQABgQCBgQEBg
QGBgQIBgQKBgQMBgQOBgQACAQCCAQECAQGCAQICAQKCAQMCAQOCAQACgQCCgQECgQGCgQICgQKCg
QMCgQOCgQADAQCDAQEDAQGDAQIDAQKDAQMDAQODAQADgQCDgQEDgQGDgQIDgQKDgQMDgQODgQAAA
gCAAgEAAgGAAgIAAgKAAgMAAgOAAgAAggCAggEAggGAggIAggKAggMAggOAggABAgCBAgEBAgGBA
gIBAgKBAgMBAgOBAgABggCBggEBggGBggIBggKBggMBggOBggACAgCCAgECAgGCAgICAgKCAgMCA
gOCAgACggCCggECggGCggICggKCggMCggOCggADAgCDAgEDAgGDAgIDAgKDAgMDAgODAgADggCDg
gEDggGDggIDggKDggMDggODggAAAwCAAwEAAwGAAwIAAwKAAwMAAwOAAwAAgwCAgwEAgwGAgwIAg
wKAgwMAgwOAgwABAwCBAwEBAwGBAwIBAwKBAwMBAwOBAwABgwCBgwEBgwGBgwIBgwKBgwMBgwOBg
wACAwCCAwECAwGCAwICAwKCAwMCAwOCAwACgwCCgwECgwGCgwICgwKCgwMCgwOCgwADAwCDAwEDA
wGDAwIDAwKDAwP/78KCgpICAgP8AAAD/AP//AAAA//8A/wD//////yH5BAEAAP8ALAAAAAD8AAUB
QAj/AP8JHEiwoMGDCBMqXMiwocOHECNKnEixosV/AC5q3Mixo8ePIEMOzDhSpMmTKFOqXImRIEmW
MBuSAoDAIAIAB27e+zfTXs+bOQGQ+qfTnlCiRzcBsAdU5z8pNI2+jElV4dSpVbNq3co14tWuYMOK
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

------=_NextPart_000_0000_01C513A0.3B9F7C10
Content-Type: image/gif
Content-Transfer-Encoding: base64
Content-Location: http://java.sun.com/developer/onlineTraining/collections/images/UMLIterator.gif

R0lGODlhegBiAPf/AAAAAIAAAACAAICAAAAAgIAAgACAgMDAwMDcwKbK8EAgAGAgAIAgAKAgAMAg
AOAgAABAACBAAEBAAGBAAIBAAKBAAMBAAOBAAABgACBgAEBgAGBgAIBgAKBgAMBgAOBgAACAACCA
AECAAGCAAICAAKCAAMCAAOCAAACgACCgAECgAGCgAICgAKCgAMCgAOCgAADAACDAAEDAAGDAAIDA
AKDAAMDAAODAAADgACDgAEDgAGDgAIDgAKDgAMDgAODgAAAAQCAAQEAAQGAAQIAAQKAAQMAAQOAA
QAAgQCAgQEAgQGAgQIAgQKAgQMAgQOAgQABAQCBAQEBAQGBAQIBAQKBAQMBAQOBAQABgQCBgQEBg
QGBgQIBgQKBgQMBgQOBgQACAQCCAQECAQGCAQICAQKCAQMCAQOCAQACgQCCgQECgQGCgQICgQKCg
QMCgQOCgQADAQCDAQEDAQGDAQIDAQKDAQMDAQODAQADgQCDgQEDgQGDgQIDgQKDgQMDgQODgQAAA
gCAAgEAAgGAAgIAAgKAAgMAAgOAAgAAggCAggEAggGAggIAggKAggMAggOAggABAgCBAgEBAgGBA
gIBAgKBAgMBAgOBAgABggCBggEBggGBggIBggKBggMBggOBggACAgCCAgECAgGCAgICAgKCAgMCA
gOCAgACggCCggECggGCggICggKCggMCggOCggADAgCDAgEDAgGDAgIDAgKDAgMDAgODAgADggCDg
gEDggGDggIDggKDggMDggODggAAAwCAAwEAAwGAAwIAAwKAAwMAAwOAAwAAgwCAgwEAgwGAgwIAg
wKAgwMAgwOAgwABAwCBAwEBAwGBAwIBAwKBAwMBAwOBAwABgwCBgwEBgwGBgwIBgwKBgwMBgwOBg
wACAwCCAwECAwGCAwICAwKCAwMCAwOCAwACgwCCgwECgwGCgwICgwKCgwMCgwOCgwADAwCDAwEDA
wGDAwIDAwKDAwP/78KCgpICAgP8AAAD/AP//AAAA//8A/wD//////yH5BAEAAP8ALAAAAAB6AGIA
QAj/AP8JHEiwoMGDCBMqXMiwocOHBAFAnEixosWLBSUO1Iixo8ePFjn+EwnyIACJBwDc+0cKAIKR
AOwBkGKSZsqVLe3BlEmzJEORJH0KHeoRKNGjSENGTMq06UKjME9q5Bh0qkGrIwVS1Zq1K9SEW7t6
3chVbNWyY8k6XctWrNuvU6WGTYsWIUmsaeXirUv0a9u/R/3CvaqWrtW9dYNmNFx2LkigeiNLnky5
suXLmDNrlrwUsOehfj+L7hj6qExS/+zde1lRNevRb5tuivnv3kmBtlX+k8IRgRQpKWnnFthy00ve
f0vDXv5QOfPnCp27hXjXIeSGirGT7myy8G2qt/mC/8crMTzi6eUhq/ceXmt5tHuzK22sHT5G+Y+5
Cz1/H7rgpXFtZd56ZrkH1VneGcjedEXpt1x70NkV0WYUVmjhhRhG5mCEHBJWWIcg6odfiM9JR2KJ
GxJlGwJy/YPAbKTo1NI9m9yj2knGRYUSb6ixpFKNTpkI0k0+vgRhSgcQB8ABN77UkpESnYZkW0Ke
CFuVVoqGZZaebcllcil+eWWYYmopIoAEKsjVXFLB1yZdH2YF4ZtqmjVne+l9+B99fDF23ntwjhjW
oGr9Weihcfo34piJljnanu7xORZWQlYHE5+EwtkXmZlOKimDHtqJKaL8+eSlo02dmuqi9ZE5X2Mt
Fv8oaaeH2RdbdIzlWpJ0abK50ZwTHhiqnnj+CuFHqqKKFKvKPtrsg64+G2S00jKVbLW7UottYNpu
C1q33poKbrj5NUrusuNeRORsOlXELnPXUpQTi6ixeAC9u6mkk2328OQiAPUuyeJKvNm4VrwQ4Wtb
kpENPNA9pJBScG1LXgqTw2wh/NCKO1GMAL1PRmoPch2vuGLIGad7bn/mrvxtyy6LC3PM5fZJ834q
30xdzjpbx3PPP/0MNK4zD12RehkmrfTSGAptdHctM3vVlp2C9erVglGKqKezrvmpoFp3neugYSfG
3XjjJRhgsV8/tTV5sNIZa9XyZWre1hYTWjaoE4qebTepcN/KYanwOv30YkUf3pzhIkpNJ4OOW3sm
WXeS96ahDh7G5p11blro3G97Hajbnf39Kd/Z6nl2n4DGR3romqInedTswX035CYBy3ZUfUeKbuIh
Sd1q4cArHnTxxhNt82eEs5y62b/aOmDXAuKNX/WjWvy84HZenqCsrYM+c+ukIj983d/7Kuv6rr9u
OupY+7f84Iwbr3Hy8+OPUUAAOw==

------=_NextPart_000_0000_01C513A0.3B9F7C10
Content-Type: image/gif
Content-Transfer-Encoding: base64
Content-Location: http://java.sun.com/developer/onlineTraining/collections/images/UMLSet.gif

R0lGODlh/QAFAff/AAAAAIAAAACAAICAAAAAgIAAgACAgMDAwMDcwKbK8EAgAGAgAIAgAKAgAMAg
AOAgAABAACBAAEBAAGBAAIBAAKBAAMBAAOBAAABgACBgAEBgAGBgAIBgAKBgAMBgAOBgAACAACCA
AECAAGCAAICAAKCAAMCAAOCAAACgACCgAECgAGCgAICgAKCgAMCgAOCgAADAACDAAEDAAGDAAIDA
AKDAAMDAAODAAADgACDgAEDgAGDgAIDgAKDgAMDgAODgAAAAQCAAQEAAQGAAQIAAQKAAQMAAQOAA
QAAgQCAgQEAgQGAgQIAgQKAgQMAgQOAgQABAQCBAQEBAQGBAQIBAQKBAQMBAQOBAQABgQCBgQEBg
QGBgQIBgQKBgQMBgQOBgQACAQCCAQECAQGCAQICAQKCAQMCAQOCAQACgQCCgQECgQGCgQICgQKCg
QMCgQOCgQADAQCDAQEDAQGDAQIDAQKDAQMDAQODAQADgQCDgQEDgQGDgQIDgQKDgQMDgQODgQAAA
gCAAgEAAgGAAgIAAgKAAgMAAgOAAgAAggCAggEAggGAggIAggKAggMAggOAggABAgCBAgEBAgGBA
gIBAgKBAgMBAgOBAgABggCBggEBggGBggIBggKBggMBggOBggACAgCCAgECAgGCAgICAgKCAgMCA
gOCAgACggCCggECggGCggICggKCggMCggOCggADAgCDAgEDAgGDAgIDAgKDAgMDAgODAgADggCDg
gEDggGDggIDggKDggMDggODggAAAwCAAwEAAwGAAwIAAwKAAwMAAwOAAwAAgwCAgwEAgwGAgwIAg
wKAgwMAgwOAgwABAwCBAwEBAwGBAwIBAwKBAwMBAwOBAwABgwCBgwEBgwGBgwIBgwKBgwMBgwOBg
wACAwCCAwECAwGCAwICAwKCAwMCAwOCAwACgwCCgwECgwGCgwICgwKCgwMCgwOCgwADAwCDAwEDA
wGDAwIDAwKDAwP/78KCgpICAgP8AAAD/AP//AAAA//8A/wD//////yH5BAEAAP8ALAAAAAD9AAUB
QAj/AP8JHEiwoMGDCBMqXMiwocOHECNKnEixokWBAC5q3Mixo8ePIEMOzEiQpMiTKFOqXLnSJEaW
MFlKASDlwEAEAA7gJPVvZ8yfJ13+Ewq0qNGjSCsKJZq0qdOnSJdCnUq1qkqpI0tmHYqRpFevW7mK
Nfm160uxY8GiRYgVgFq1Y8+SXehW7ta5ce3KhWs1Ida+gAMLdtjWbd2CcBOfzatYq97GbRc39sv2
rt68ltFOZuoYM2TJBidr/Du4tOnBpF1GRpx5LeesnzWfnh2VNe3buJOSth2bsVnPoGU/bo23eGvK
kt8GV76YLXPg0MsKh7l7NHKIqpu/5v2Q70XDdJuH/187vnzE7Qyrl1R9WPjhus/Jvme9mb3xruxH
ZpSPlzxT8OvdN1R7A+qnWXsChvUSgQDiF1aDBSqmHkjbvYaeeZUFR5F3B12YYW4NTZheRx4qSJ1E
JYKIUmrrXQbZc7Yx1ht5of3GoYo4diZejjz2aFFhAMa3o28u6thhkTQSiZmPIIrI5JNQ1qhjdjv2
9xmH/R2nIZZaSkncZSZmeSSS9xElYIoiORnlmk+KaOWWcIImlZDRkTmceyaOOR1zZd4JXZIt1unn
W6KFueF1Hy5Z4o0ZokkXgWOmyKieCjmaZ5oxejmgfGYJOeeW9hHHIKf8PZipfkshmFx+naJqKo1z
hv/q6qotFjrilIipath7DFbJHa+WsinsqcESVuywyFqH65cLGligbHNRiWhag96pZrJHXYvttqUB
OR+eSP46pK1xobeakt6le6mRsSW4JKBUacvtvH3JS++9UNmL7761Gcnvv1PpC7BAM9ljDwD3CHQP
AAj45JY9A593asQUGyVwxRh7dHHGHH838V29bWbncsxeaCWfmZEbaMgjfwtvYBvDuqy040k65IaQ
Smnzyx9ril1TTsKHKn/70QdqgKKyGuGs040LaYOJjWpgqSQT+6yDTFPdatMeL+vsgbJyBaN2IJ/M
c8cw90zhsWivyWLKIFdLraDgFifdi2BSOjeddPr/xTfcZE6Kqb9tF04ib7uKd6avdL/ad9Uzoqth
op2hnPffk+vJ8p9fxmz459PSvOvmm0b9ZsuJ+4dhu6n/ZW7JKadeeuaAeQ767exeR2jVezoO+7q/
496S2oJX2p2HxU8r/ImE74W1a0U/C7VjZiL+fH53q7r84Apm91W00mFtt7TTXy992Pt9nzv1V2t9
fvS5j4o+05vCxjZHtlOooqX3u50pq3azkZxgY6o+yQ1zltsbhnwnqATeDXgCBJfk3HOj/G3PcN4S
mczo5sAYdVB1HFwg5Hh3wFfpjnePCxdh1HbBFq7vZjCqHgQb50LaWLCGHHPTALVyOu255lYHKqGS
/26GwxART4QT6d/xaEZEnZFqif7aGYKUeBXiqU91WRIa2baWRfjJMFfeO5nStNil//TKhxCaIggF
Q8Ui3m50cIyjHOdIxzra8Y54zKMe98jHPvrxj4AcHQvduLwbEjJihjwkwBKpSH4xclukAIDBALCJ
hGxCksJ75LYQcEkp4Ac8C7NJJgfZyM9pspTzOiUqt6XKVSarla4cVqoCScta2vKWuMylLncJobNR
jmvNwx8QxSSxsxWrjd36Hxg3RzRCBclxreuS1eoWzcqVh5mfJBrtkhnMH+WIf26EZSzZ9Db6kfGc
EuRU1mjlLPBoLX0+c5323AcssNkvT7FC2jqfV/+/BSGznOlEodwYyCX2BdR4BiXSF4UITA8K9F0H
3Yg4EVpIWZJyho+SqM/GWUXqVZNZCWVijdqFUY5qjIVolBpfCjqllObMpEG5KEwRKdPuHO6XJ71m
SZFjskNxs3svDNkz9+TSbwmyd6WLXDwh99FtWvOg35uiy5BpxG7q5psoWmRNZ/ovgF6tn2K7Yvng
ac6Iyi9pKzunrha6xrGaU33vbN9Sz7pPsIKVrAB13QgH+rtCGZCtmOPZuRJoqBA2EaqAe2q0tmoV
qrKydozlKr7yGruHku6BDTxsYYSosnZa1rLJe4oOH8O6kVGQs4clKmoburLPUtOpVZmoZLEazGP/
am6FPPXmbFfnNW2aL28MTMtQNUvC3erNsSwJrXF9utPl0ouyQdKV+OrZLIjG6opimy524bdcylqX
oCAVLHB7WNzuRjYkL3Vuts4bU719BHm9qil3lYfb22QwTuS1y2VNuzgJUo6kl5thfw24QWL+ZLS/
Jaro4nvXuooRmoRLo1z5qUbAfjWNLq0VbJPLXvUKS7Yr7G9Vd3bTlynXlxtNcVWF6TWwTRV2UY0x
X+uWTcXxF4l/beoET3dCxCZ1aNsEMYsviFz0dtjD/mtx9KK7XX/yEKR09YzU6hfXnO0mrvZsp1rB
h0/6hK3BFF5rVpXcZRq3LHN/XaphQ7dXC6/5/3U3/q4KV5zaohQZWXeOib7QlN4jIlnPiBsuUP0L
Z3f9OSVBWyuTE1rYAB56eFZ9NLYQfKT+hZbHSbTxbr07vhcDObs/pCjqBP2uPBdOyIP+55ib20hU
S7peytTuk5u1ZE9XGdTDZWJkMqzl+bJU02TNso3IWGegxTrOPAaLBpNdXTabeX16FXVmp+lq5ha7
xKx2r27P80RsH+9raQsQL8dN7nKb+9zofvWp1e3II7MbR9V+t2jdLe/cxLveV400vttE733P5t7+
tnO/A/7Ta2NsYQAgBcQQYo97IGCU+s7YwwrCyYRDTHagA7iKcOIWUUby4XU5AMIqGvGO8aogH/8n
ebYHhoBIjnwgCE/YPxCucoMTvEkDv3m4V65zG+a85439OdDjJfSh56voRneKxpPOPZszHTVIf/p6
Sy51qFM9is3LM3xFajPkWRvPxw5zEB/MzrD+xnzU1bRleD3s+WLxy+Wz6/T6zMZAW9m1z1528P67
11ILOHgp5NxpvGtYYrLU0IamdmILK15kM07wpkm0iz8tbCwrGMKXkjDb2+f2fL6V7FzkubGvblOc
F7OIS6+6t02teg6T/vFe3DB36jvkCl07WD3NdL4HzVTnNRuBgEtzdIrHGeErNHCyN2pfS3ZiIG7x
0wOupl+Dr+PAwtlLfKp+nBtf+Bp/UvY/q23/BIHzqWkf31rb77GZhb/fSlkfdeAvveiVReQPR731
gH49/gMmX6U4nc5Mx2nItlIUFXsyonqEtxdQk2tWtWSJxXpcNVoIJBq5l3cIeH+Mtn8apX8aqHQY
2IErInQWsmoYuHVYF2IAKH9112IXJmb95FZRVnnrdHIziF1rpF+g9z4bdE+f9yBRFmzMUzYug3cP
CHtFiFQDxlsW2FY65WOGF385xXtMuIS2UoVGOF7SBG2Lp3bXh0072FlNZ2Lz43taVB/kw3bJhkZn
lySal4MVNldwt3llOH9fB4H+Z3rh11UfCIJhaId8GIX/J23eJGK3QmK1h1CGqII4lYJ5+Hw7//ZB
mPUmBAZ864d83OdQO4Z+ZChg71d4yhZ20XYmQwV6R5VCOUZqnUhf66d9b9aESfhj3wctfuaFkdg5
RmN+kKiJkId94FWJreh+jvdassiBHthCfnh6gfiHU0eHyggUsnV9E5OIzsF1NuV1ukdOYSd3Dlh2
9FSDPghADAZsE6aNDmJhMRh3GMZlkWd3XlhgV4iLasd3VIiJPfaKT8hasQWKvOhjIbV80+RsBMZ4
XehaXwSG/NdNGDZ5oUdh3lh2nBdhZ+SG3RY/cSiRuxh0+qdqjNhRjVhzKNaMxQg8ttUhdDdIJUlE
x/hG+niOLthWKlVWO4iD/IRk9wVMhwdDgP/niJGShc5FeFboX92XjTrDk+Ylfskhg9rxNPLTjTE5
fJKWekqRkiYFlSAJgFJZldeYWiNZiFyZlewmgKdFhQSIiMsBYHOjXmBZiuKWfoXmffYRWGg5i6DF
ljUzlzRUlMy4gVf5alSJldK2l36piICpYh/plbeVjBBFmEhkdVJoa7X4e2Zlicq3iZeoQNNmYK3l
hMyHmBvYmEOjd/rllp+pgJ4mXLamhGXCitxHi7LzUYN5g/QImkj1J6nYjuo3mcZnLp1YWvjoennp
bbgBThjTl4F5XMUJWcSoP8exKLfHmfqUW7gljdq2kXWIK01Gg+JTNrNGm2NIT3DVkC/EjQ7/WU9V
do88GGYSqY5qppYPVSe0iGbBpyWpuIi5KY6RWYAEWWYG5pP76J5XaIrxqXgRJY/G12jtOZCaiYn7
6WcJ5ob6VH5ms0/eOTUO9jG95FZitzVgJmfnqY0WSS7ESZ3rto7JeZzt9ZsmqpyiZ1uEWJe015m2
95G453wdeaKOeJrCuFirdX7nhzeV2YvsV5bJt5t26Sg+6ZqjKIQfBKSsSDr0SX2ouH0Iao+tyYAd
OYJt5im3aJa5yKMGOZtd2qW9KT35SVpQyHhHZ4y0haIpCoiF2aaQxqaz93XKyJ+hliCFNjZ1mo3o
OJqhBp2JyYcIFkPL6aKBCoKq1HxwGqJt1MqoKUpp04kikhKOzfmQm3Zsi0ZAtCZcfYem5WKRVLaH
aFOT7fgf1SVSApqJGfia7UZm/EheYwmQWwhCjjppVpSd24k9qZZibfiNgbI0JaqmwVqjJ1mjIaJO
s1Wrx6msxQmpt7htHImZ0Tmn+ImY6sKYNwon6vRiOhqW3ApBm6WqYyOtwBamAYatfzp8VhqL28iu
3fNM0NhATUqPBBo7UQqbsGaU3QqZvoeEy0auJoSbARpt1UqmlxmPyCmntKdEGnmlzkl6zOqpcLp7
DzuxQ2axgBEQADs=

------=_NextPart_000_0000_01C513A0.3B9F7C10
Content-Type: image/gif
Content-Transfer-Encoding: base64
Content-Location: http://java.sun.com/developer/onlineTraining/collections/images/UMLList.gif

R0lGODlhHgGXAff/AAAAAIAAAACAAICAAAAAgIAAgACAgMDAwMDcwKbK8EAgAGAgAIAgAKAgAMAg
AOAgAABAACBAAEBAAGBAAIBAAKBAAMBAAOBAAABgACBgAEBgAGBgAIBgAKBgAMBgAOBgAACAACCA
AECAAGCAAICAAKCAAMCAAOCAAACgACCgAECgAGCgAICgAKCgAMCgAOCgAADAACDAAEDAAGDAAIDA
AKDAAMDAAODAAADgACDgAEDgAGDgAIDgAKDgAMDgAODgAAAAQCAAQEAAQGAAQIAAQKAAQMAAQOAA
QAAgQCAgQEAgQGAgQIAgQKAgQMAgQOAgQABAQCBAQEBAQGBAQIBAQKBAQMBAQOBAQABgQCBgQEBg
QGBgQIBgQKBgQMBgQOBgQACAQCCAQECAQGCAQICAQKCAQMCAQOCAQACgQCCgQECgQGCgQICgQKCg
QMCgQOCgQADAQCDAQEDAQGDAQIDAQKDAQMDAQODAQADgQCDgQEDgQGDgQIDgQKDgQMDgQODgQAAA
gCAAgEAAgGAAgIAAgKAAgMAAgOAAgAAggCAggEAggGAggIAggKAggMAggOAggABAgCBAgEBAgGBA
gIBAgKBAgMBAgOBAgABggCBggEBggGBggIBggKBggMBggOBggACAgCCAgECAgGCAgICAgKCAgMCA
gOCAgACggCCggECggGCggICggKCggMCggOCggADAgCDAgEDAgGDAgIDAgKDAgMDAgODAgADggCDg
gEDggGDggIDggKDggMDggODggAAAwCAAwEAAwGAAwIAAwKAAwMAAwOAAwAAgwCAgwEAgwGAgwIAg
wKAgwMAgwOAgwABAwCBAwEBAwGBAwIBAwKBAwMBAwOBAwABgwCBgwEBgwGBgwIBgwKBgwMBgwOBg
wACAwCCAwECAwGCAwICAwKCAwMCAwOCAwACgwCCgwECgwGCgwICgwKCgwMCgwOCgwADAwCDAwEDA
wGDAwIDAwKDAwP/78KCgpICAgP8AAAD/AP//AAAA//8A/wD//////yH5BAEAAP8ALAAAAAAeAZcB
QAj/AP8JHEiwoMGDCBMqXMiwocOHECNKnEixosWLDAFg3Mixo8ePIEOK9KhxYMmRKFOqXMmyJceT
/2C6nElToD0ApAje3BQTwD17Aw/4rEm0JkyZRZMqXcrU5dGmUKNKnUrxKdWrWLNKtSqQa8mvX7uG
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
ADs=

------=_NextPart_000_0000_01C513A0.3B9F7C10
Content-Type: image/gif
Content-Transfer-Encoding: base64
Content-Location: http://java.sun.com/developer/onlineTraining/collections/images/UMLListIterator.gif

R0lGODlhpgC6APf/AAAAAIAAAACAAICAAAAAgIAAgACAgMDAwMDcwKbK8EAgAGAgAIAgAKAgAMAg
AOAgAABAACBAAEBAAGBAAIBAAKBAAMBAAOBAAABgACBgAEBgAGBgAIBgAKBgAMBgAOBgAACAACCA
AECAAGCAAICAAKCAAMCAAOCAAACgACCgAECgAGCgAICgAKCgAMCgAOCgAADAACDAAEDAAGDAAIDA
AKDAAMDAAODAAADgACDgAEDgAGDgAIDgAKDgAMDgAODgAAAAQCAAQEAAQGAAQIAAQKAAQMAAQOAA
QAAgQCAgQEAgQGAgQIAgQKAgQMAgQOAgQABAQCBAQEBAQGBAQIBAQKBAQMBAQOBAQABgQCBgQEBg
QGBgQIBgQKBgQMBgQOBgQACAQCCAQECAQGCAQICAQKCAQMCAQOCAQACgQCCgQECgQGCgQICgQKCg
QMCgQOCgQADAQCDAQEDAQGDAQIDAQKDAQMDAQODAQADgQCDgQEDgQGDgQIDgQKDgQMDgQODgQAAA
gCAAgEAAgGAAgIAAgKAAgMAAgOAAgAAggCAggEAggGAggIAggKAggMAggOAggABAgCBAgEBAgGBA
gIBAgKBAgMBAgOBAgABggCBggEBggGBggIBggKBggMBggOBggACAgCCAgECAgGCAgICAgKCAgMCA
gOCAgACggCCggECggGCggICggKCggMCggOCggADAgCDAgEDAgGDAgIDAgKDAgMDAgODAgADggCDg
gEDggGDggIDggKDggMDggODggAAAwCAAwEAAwGAAwIAAwKAAwMAAwOAAwAAgwCAgwEAgwGAgwIAg
wKAgwMAgwOAgwABAwCBAwEBAwGBAwIBAwKBAwMBAwOBAwABgwCBgwEBgwGBgwIBgwKBgwMBgwOBg
wACAwCCAwECAwGCAwICAwKCAwMCAwOCAwACgwCCgwECgwGCgwICgwKCgwMCgwOCgwADAwCDAwEDA
wGDAwIDAwKDAwP/78KCgpICAgP8AAAD/AP//AAAA//8A/wD//////yH5BAEAAP8ALAAAAACmALoA
QAj/AP8JHEiwoMGDCBMqXMiwocOHECM+BCCxosWLGDNqbEhxYMeNIEOKHJnx4z+TJB3aA0CK4MpN
JwHcszfwgMyY/2ze+0cKAIKYK6UcBCBUJ08ANAEgJZrSokmUTaNKnXrxKdWrWLMqtKq1q1eqXJWK
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
+QzmaSecrjTNuta3zvWsX/0qAQEAOw==

------=_NextPart_000_0000_01C513A0.3B9F7C10
Content-Type: image/gif
Content-Transfer-Encoding: base64
Content-Location: http://java.sun.com/developer/onlineTraining/collections/images/UMLLinkedList.gif

R0lGODlhvgCOAPf/AAAAAIAAAACAAICAAAAAgIAAgACAgMDAwMDcwKbK8EAgAGAgAIAgAKAgAMAg
AOAgAABAACBAAEBAAGBAAIBAAKBAAMBAAOBAAABgACBgAEBgAGBgAIBgAKBgAMBgAOBgAACAACCA
AECAAGCAAICAAKCAAMCAAOCAAACgACCgAECgAGCgAICgAKCgAMCgAOCgAADAACDAAEDAAGDAAIDA
AKDAAMDAAODAAADgACDgAEDgAGDgAIDgAKDgAMDgAODgAAAAQCAAQEAAQGAAQIAAQKAAQMAAQOAA
QAAgQCAgQEAgQGAgQIAgQKAgQMAgQOAgQABAQCBAQEBAQGBAQIBAQKBAQMBAQOBAQABgQCBgQEBg
QGBgQIBgQKBgQMBgQOBgQACAQCCAQECAQGCAQICAQKCAQMCAQOCAQACgQCCgQECgQGCgQICgQKCg
QMCgQOCgQADAQCDAQEDAQGDAQIDAQKDAQMDAQODAQADgQCDgQEDgQGDgQIDgQKDgQMDgQODgQAAA
gCAAgEAAgGAAgIAAgKAAgMAAgOAAgAAggCAggEAggGAggIAggKAggMAggOAggABAgCBAgEBAgGBA
gIBAgKBAgMBAgOBAgABggCBggEBggGBggIBggKBggMBggOBggACAgCCAgECAgGCAgICAgKCAgMCA
gOCAgACggCCggECggGCggICggKCggMCggOCggADAgCDAgEDAgGDAgIDAgKDAgMDAgODAgADggCDg
gEDggGDggIDggKDggMDggODggAAAwCAAwEAAwGAAwIAAwKAAwMAAwOAAwAAgwCAgwEAgwGAgwIAg
wKAgwMAgwOAgwABAwCBAwEBAwGBAwIBAwKBAwMBAwOBAwABgwCBgwEBgwGBgwIBgwKBgwMBgwOBg
wACAwCCAwECAwGCAwICAwKCAwMCAwOCAwACgwCCgwECgwGCgwICgwKCgwMCgwOCgwADAwCDAwEDA
wGDAwIDAwKDAwP/78KCgpICAgP8AAAD/AP//AAAA//8A/wD//////yH5BAEAAP8ALAAAAAC+AI4A
QAj/AP8JHEiwoMGDCBMqXMiwocOHECNKnCgQAMWLGDNq3Mgxo8WBHzuKHEmypMmCIf+lPKkRwEqX
Kj/CdCkFAAKBNStu+pczpk+CMGuSullxJcuOKY0eXcq0qcmkTqNKnYoRKtWrWLOiBFrUpVGZICuG
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

------=_NextPart_000_0000_01C513A0.3B9F7C10
Content-Type: image/gif
Content-Transfer-Encoding: base64
Content-Location: http://java.sun.com/developer/onlineTraining/collections/images/UMLMap.gif

R0lGODlh6gDmAPf/AAAAAIAAAACAAICAAAAAgIAAgACAgMDAwMDcwKbK8EAgAGAgAIAgAKAgAMAg
AOAgAABAACBAAEBAAGBAAIBAAKBAAMBAAOBAAABgACBgAEBgAGBgAIBgAKBgAMBgAOBgAACAACCA
AECAAGCAAICAAKCAAMCAAOCAAACgACCgAECgAGCgAICgAKCgAMCgAOCgAADAACDAAEDAAGDAAIDA
AKDAAMDAAODAAADgACDgAEDgAGDgAIDgAKDgAMDgAODgAAAAQCAAQEAAQGAAQIAAQKAAQMAAQOAA
QAAgQCAgQEAgQGAgQIAgQKAgQMAgQOAgQABAQCBAQEBAQGBAQIBAQKBAQMBAQOBAQABgQCBgQEBg
QGBgQIBgQKBgQMBgQOBgQACAQCCAQECAQGCAQICAQKCAQMCAQOCAQACgQCCgQECgQGCgQICgQKCg
QMCgQOCgQADAQCDAQEDAQGDAQIDAQKDAQMDAQODAQADgQCDgQEDgQGDgQIDgQKDgQMDgQODgQAAA
gCAAgEAAgGAAgIAAgKAAgMAAgOAAgAAggCAggEAggGAggIAggKAggMAggOAggABAgCBAgEBAgGBA
gIBAgKBAgMBAgOBAgABggCBggEBggGBggIBggKBggMBggOBggACAgCCAgECAgGCAgICAgKCAgMCA
gOCAgACggCCggECggGCggICggKCggMCggOCggADAgCDAgEDAgGDAgIDAgKDAgMDAgODAgADggCDg
gEDggGDggIDggKDggMDggODggAAAwCAAwEAAwGAAwIAAwKAAwMAAwOAAwAAgwCAgwEAgwGAgwIAg
wKAgwMAgwOAgwABAwCBAwEBAwGBAwIBAwKBAwMBAwOBAwABgwCBgwEBgwGBgwIBgwKBgwMBgwOBg
wACAwCCAwECAwGCAwICAwKCAwMCAwOCAwACgwCCgwECgwGCgwICgwKCgwMCgwOCgwADAwCDAwEDA
wGDAwIDAwKDAwP/78KCgpICAgP8AAAD/AP//AAAA//8A/wD//////yH5BAEAAP8ALAAAAADqAOYA
QAj/AP8JHEiwoMGDCBMqXMiwocOHECNKnEixYkEAFjNq3Mixo8ePGjEOFAmypMmTKFOWJPmPpcqX
GwFIQYCRFAAEUlzK/HfvZkuXMINSZAlUqNGjSJMyJKq0qdOnR5lCnUq1akyCIgFo1SpQZ9eRBrOC
HZsQo9ivLdGmtcrWqdS2cOPKfbtWrdqza0luPat3JNeuZrHu/Yp3q1/DaYtivXgX7V68jRX2rVvY
8WDAfyd7pCu3s2e3ixHyHTuZ72jHZOvmPZ2XdOjVqGOrFk02s+zTmkWzrtw6tm27r2dLVCz4L22/
Di8f/8w8IueLxksHTq38p17WqTETjU68uXfG2Ye7/+aouftS4Mtzi/8eMnjZhubBk18/n31QulJL
H8xsGnXf59DdFhlv0qFnX1TuHajgghDld9l0lBF2WHmyCRcWYhFayOCGAG7o4Yd24Tdeb/oJB+Fy
AvbmnmLTlVgifOC5GJZ85nmVIWTA1ZggiDwy2OFPKZ6YWIo3AmYkbCSOZ9xxuGXFm2S1EXngj0gJ
mRGGJj5kZVlLAhVfeJ79uB2Fd3VZXGjSPVcUlmaV1+V1WV7IVHSHCYacdyKeSdiDZsbpGn9f9igo
lVcGKuihFuUZoYxBjqghmEWqiFuQOCK62Y6WZjoXppp2ahWhnobaFKiiDmSPVqQMZNOSpV7JaasD
bf8CgD0/IfCPrPbgJMUBWtnD6z2bzAQrjJAOa+xLpB6r7KXFzlgRq0M5u+ymzdKJmZ2QVeqlnpRh
OW1byWpZn4FMdkRmtI82C+VU4cbVrqHENuipokla5puSuw2o5Ij5MirpQjb+RqCU++Ub6YtOktvu
tww7h+aD/Ap4nbX1klscmfA2bO6rGnfsMHWvOYlYYdyNnO5sA1v3W5TrRryayRwfurDHNEv7aMo0
kmawajUa7G9/Gdb8XrEZq9wykPB5K5/QCBKtM35sclchetVhCC3TyAY3J4UwpxlZjjEi3e121+Zs
nctnL43ynrW9ee22K7JdJtlpo0hc0YEWfbS47tL/d9XGIN+JM4S7Jfwv0oYDDfR7gRH45H5gMXo1
njFjbTnP2j2pub6DBy2WjmjuO7V6Nh+Os8V9q3u55fSGjvnSoL+4Olwzz94wlQWa7jKo5056b8WP
X6637Vg/ZvzxyCev/PLMN+/889BHL/301FeffOXEe1x79stuz/2x3n8/bPiI9rRJqv/YJOs99vQE
wCa2ngqATbZ2TL6gvB5AE/2/2nRA+z7hyqnQp7H7LQtXTDOg+EKlwAV2qoEOzBQEI4ioCVJwUFoL
0Ny41SKqhaxs3TrZBROVwexoC20n6+DvRDhCdKFuM8NrYVIsKEMP0ctnviORz0IUuR6ukHB7S1yj
/w7HpSECb0CVao/TdPc7ge3OdZ4TXdBaBqcjWrGITLSiEF84ERrW0EfY45urMJWxvI2LdPIS4fBi
aLcSsgxhXWvbnC5GKZgNSTt1nJwJ9aUyHKHxg5HSodXsyKIw2pB2fuuMF7+ooNZZDXFcaZMPN5i2
E7pxZHpkpBtfB8jKZMuDnGyjnzR5NDaiaCimJKXfUqnKQwbOXgeTIhCHprMf2jKIR9qhikQlplzK
kkhfctMtd0bLKuoyiZpaZCubUztWFlKNLlzmDetkIIzt65NU5KMgSxa81SnzVflZZtZUJ04JbtJr
iwoZoKa2NjmCsJwAOyc7VThPHpYSlPA8Dzlp+f8sVubzY1yM5yRj0qcwrtFcBd3nHZOmJjGK8jHa
7NcbUxi2YaptoBZ9YcB+2U6KQlGX6urlm/hTxwStyUwUixpy4GYkkpWsdO+UJCWPBCSWcisxbqKb
2CCn0H+CiHz/QSHtqpiclYDxlYE0TRyjOLfOZVFHjZvQ16DKxz8yk1P+NKRJozlGrTLQqz49qj0l
VDeZjhSJ4bTM42z0p5za6Ww2badMx/ZWpSlSnvhEGFlZih2y8pOJcbUq2GKptqzeB6wnMSPg0jiu
ChoSXplcYlgX+7KVBU52sXPUZJWIukdCtG67HGzuNstZFpKWQ4g17bqCWa2AuvZ705wYDgeZG9D/
SatJdsyoahn2TYEa9rQ2+y1w2SLc4TKnuMZlV2qTe9eeMveqzn3uZ3orXaNQt7qHjS52U/fa7Ta3
u97l7m5DRZP5CaS85s3edb3jv1TR5Hw36Yk9TiWFf9DkHu/V3nIPtT+a7O9Um+AJKUiRk3ukz3AF
3K+gemIrVPHkJgLMiX21ggBe1S/B2tUYgxOo4PA+Zb0eNgmIQwySEZOYWeA9MVVMrOK/pbjFH+4w
jIXC4hk/62LWy7GOd8zjHvv4x9aTsY3H+doYIrOr1Z2mFmsZytsSNrKnVfLTuPk1iqZMsMDt5ZIR
h9T0cBS71D3ykPX54jE3rcxmprGQLQbZizIO/4YNLSpru7jiTe7UsyID4efGxLKy/czPXd5oSt0G
19LNFbSPjCmdoEznKfvxiRWVnV851xhr2naIksayXgkbJyw3eqwdvfKX0bYtUTPm0oA1dEghXbGJ
opmf3TkrElsKTIqptYToxOdN5zqxt9ZU1bLWMzVpPcXGIje72DMs3r6a4TQje7xkhulfn8nYvSUq
oUVm4UFR3ORgm3Wd/uHzVK3l1knmudaBDdug6WaYdAe7rMOGtx4dlNukgvJ0VdatJ53l1GlXVbOa
ZjUxCYZUzmza1H6a5ZY/iHAxF/bfD9eowOtJcFBfiINMjiS6C0tP5bCJOh2nrbQ/vm5fa/zh7/9O
NKI7LkpeEjeR34W2s9Xc7JmrBKgCZbNmearzyUp5iwkLqpN3iWpt+vSGELPlmjJXoTb38dUR1HKq
+zx1ibP66GuuucNJXGObR/vYXidhzTGnbGyrdku6iXO8XB5owoHbcWuNOK/jvc50h67kgmM0j+i9
soYzFe175PSjrQ7pTMPq5/eWIkZVzenAe7TwjC8V7txuTLRuVU6LwTtNT74jkpd782AHF1btesq/
IrmolKVZ18MOa9NPSO/Spqm1US/On9s6cgj+Nrl1jdNda17eobcU3/vax83FEpvFjCjBuyk8vEIR
kKlGvpftHVrqE0/qtCVkWwX3fLCl/Pcn97T/6rPueqoFv5yrZz3PZa7+xGIVoDfbeXDLv1kl73vS
ribU0tkZ5XNy83M89VnSp08C+FxaZnyv4y+Pl0XGhXM3xn4hln7tZ2cTqBQOWH0PWGzwV21ip4Fp
NGce6FDrBzWY9kuCFTA5lEMMx1EB9zAZxXxxw2VTd2mK0nD/h3+M5yJJBymUN1uRtVG+sYP5loP4
Um80iEV+R0QgWHkzmHwyuGnZ5EtNyEXCtGUOJ3W0t3allYWit4Gn14EQWIHcdn5imHNhGEoDyG0Z
mG1beIYxVnBi8x+2cXCQhHGLph9uw1agN2xzBztP0zZuCBqOpnxTyFQfBXFERBtRVVEh6EN//7Yg
iCd4t0R9dGh9inhHUEhVkgiJ7zdS5+aIpLZSctN7tdZRP9RBtzdKKlcd9oGFqceFu8WKp0eG7CGB
YmiLFYiLGOhC4jc0S6h1teh/s/aE5kaJldZaLmiFQyh3KbhC0AVqsmV8eMh0dEWNgCdaRWhZjYiN
QWiEwShZmThVrnZFvyiFpuZpVXhMUFcl5LeG0daG7/iFe9eOZVhttFiPIyhir3aPmhSJaUV0vkV8
MOZIKfV6Fsdv8tdi2Nd0jpJZ/KeQ9Lh1t0iP+Lh2/FiRXcaBqKQlP8iGFzkvl/SHG0d3vMdWidZr
eUd5uKdeD2MycONUNlV0EGd4T3V98pSEsTd2kHInOnbXb94ETtjSVHTXJ3H1TvBWjXuIkts4fmMX
Eh8JT7rYfmMCZFRZlVZ5lVhZlRhJFQEBADs=

------=_NextPart_000_0000_01C513A0.3B9F7C10
Content-Type: image/gif
Content-Transfer-Encoding: base64
Content-Location: http://java.sun.com/developer/onlineTraining/collections/images/UMLMapEntry.gif

R0lGODlhwACAAPf/AAAAAIAAAACAAICAAAAAgIAAgACAgMDAwMDcwKbK8EAgAGAgAIAgAKAgAMAg
AOAgAABAACBAAEBAAGBAAIBAAKBAAMBAAOBAAABgACBgAEBgAGBgAIBgAKBgAMBgAOBgAACAACCA
AECAAGCAAICAAKCAAMCAAOCAAACgACCgAECgAGCgAICgAKCgAMCgAOCgAADAACDAAEDAAGDAAIDA
AKDAAMDAAODAAADgACDgAEDgAGDgAIDgAKDgAMDgAODgAAAAQCAAQEAAQGAAQIAAQKAAQMAAQOAA
QAAgQCAgQEAgQGAgQIAgQKAgQMAgQOAgQABAQCBAQEBAQGBAQIBAQKBAQMBAQOBAQABgQCBgQEBg
QGBgQIBgQKBgQMBgQOBgQACAQCCAQECAQGCAQICAQKCAQMCAQOCAQACgQCCgQECgQGCgQICgQKCg
QMCgQOCgQADAQCDAQEDAQGDAQIDAQKDAQMDAQODAQADgQCDgQEDgQGDgQIDgQKDgQMDgQODgQAAA
gCAAgEAAgGAAgIAAgKAAgMAAgOAAgAAggCAggEAggGAggIAggKAggMAggOAggABAgCBAgEBAgGBA
gIBAgKBAgMBAgOBAgABggCBggEBggGBggIBggKBggMBggOBggACAgCCAgECAgGCAgICAgKCAgMCA
gOCAgACggCCggECggGCggICggKCggMCggOCggADAgCDAgEDAgGDAgIDAgKDAgMDAgODAgADggCDg
gEDggGDggIDggKDggMDggODggAAAwCAAwEAAwGAAwIAAwKAAwMAAwOAAwAAgwCAgwEAgwGAgwIAg
wKAgwMAgwOAgwABAwCBAwEBAwGBAwIBAwKBAwMBAwOBAwABgwCBgwEBgwGBgwIBgwKBgwMBgwOBg
wACAwCCAwECAwGCAwICAwKCAwMCAwOCAwACgwCCgwECgwGCgwICgwKCgwMCgwOCgwADAwCDAwEDA
wGDAwIDAwKDAwP/78KCgpICAgP8AAAD/AP//AAAA//8A/wD//////yH5BAEAAP8ALAAAAADAAIAA
QAj/AP8JHEiwoMGDCBMqXMiwocOHECNKnEgQAMWLGDNq3Mhxo8WBHzuKHEmypMmDIf+lPNkRgBQE
FkkBQCBlpct/92aqDGkPgM+f/3p+9PnvAIB7PaUMzIkgpz2WJFOuhEq1qlWoUq9q3cpVY9auYMOK
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

------=_NextPart_000_0000_01C513A0.3B9F7C10
Content-Type: image/gif
Content-Transfer-Encoding: base64
Content-Location: http://java.sun.com/developer/onlineTraining/collections/images/UMLComparable.gif

R0lGODlhxwBFAPf/AAAAAIAAAACAAICAAAAAgIAAgACAgMDAwMDcwKbK8EAgAGAgAIAgAKAgAMAg
AOAgAABAACBAAEBAAGBAAIBAAKBAAMBAAOBAAABgACBgAEBgAGBgAIBgAKBgAMBgAOBgAACAACCA
AECAAGCAAICAAKCAAMCAAOCAAACgACCgAECgAGCgAICgAKCgAMCgAOCgAADAACDAAEDAAGDAAIDA
AKDAAMDAAODAAADgACDgAEDgAGDgAIDgAKDgAMDgAODgAAAAQCAAQEAAQGAAQIAAQKAAQMAAQOAA
QAAgQCAgQEAgQGAgQIAgQKAgQMAgQOAgQABAQCBAQEBAQGBAQIBAQKBAQMBAQOBAQABgQCBgQEBg
QGBgQIBgQKBgQMBgQOBgQACAQCCAQECAQGCAQICAQKCAQMCAQOCAQACgQCCgQECgQGCgQICgQKCg
QMCgQOCgQADAQCDAQEDAQGDAQIDAQKDAQMDAQODAQADgQCDgQEDgQGDgQIDgQKDgQMDgQODgQAAA
gCAAgEAAgGAAgIAAgKAAgMAAgOAAgAAggCAggEAggGAggIAggKAggMAggOAggABAgCBAgEBAgGBA
gIBAgKBAgMBAgOBAgABggCBggEBggGBggIBggKBggMBggOBggACAgCCAgECAgGCAgICAgKCAgMCA
gOCAgACggCCggECggGCggICggKCggMCggOCggADAgCDAgEDAgGDAgIDAgKDAgMDAgODAgADggCDg
gEDggGDggIDggKDggMDggODggAAAwCAAwEAAwGAAwIAAwKAAwMAAwOAAwAAgwCAgwEAgwGAgwIAg
wKAgwMAgwOAgwABAwCBAwEBAwGBAwIBAwKBAwMBAwOBAwABgwCBgwEBgwGBgwIBgwKBgwMBgwOBg
wACAwCCAwECAwGCAwICAwKCAwMCAwOCAwACgwCCgwECgwGCgwICgwKCgwMCgwOCgwADAwCDAwEDA
wGDAwIDAwKDAwP/78KCgpICAgP8AAAD/AP//AAAA//8A/wD//////yH5BAEAAP8ALAAAAADHAEUA
QAj/AP8JHEiwoMGDCBMqXMiwocOHECNKnLgQAMWLGDNq3MixI0GLHz2KHEmypMmEIAemPKkRwMqB
pADY++fSnst/NkECkPLvHgAENF/utMnT4M6gM2/ejAn0JkuOQp9KnUq1qsCoVrNq3XoRK9evYMOG
HOuy7NWCKXWqXEuTLVm3K+OyTTv3rF26d+vmVYgVr9q9cCvabUu48GCxiBNT9aq4seORjB9Lnkwx
MuUDm1zem7nVJimCCAB8powSLemBmHduhglgE1ApIGHPlH0AwL1NUoAikCKltkzYA3f3rpn5AO8D
/zJz9mn7tNvDzqNLh/5yunXKlhOX3c4XYXWP3406/4VuWHB4096fl0cbdzxewhbHB4X/UX55s3Dd
q9Q/OC1/+HKJJ9d/+F3l33p9zfXXdQw2GNR2EEYo4YQUVmjhhRhmqOGGHHbo4YToOSiidiGOaOJX
2Z2o4lQpruiiSS0qFto9BxknmkBMxXTPbgAglxNTODHn2j86brKZkED5RApvSf70DwKZkcLZaTEm
ppxAu9F4k2e1AVUbcj4ht6VoMR1gj08IfIljj2f+5BtOttWm5XmTVenilS+2VGKefJJkZ5+ATvRn
oIQ6NGihiJY2VqKMRsSYUO3R5ZR+8hUYn4GRFViYpftJqlOka01a6Z5qEVjpp5eSepaoCx4WYGCb
6v9FH2Dhvbpgda32JyusdN6n66yL/qqoX+r1ipGx4ImI7J7HMtvos4pCK21X01Z70KHWEopttoBu
yy2f3n77YrjirkhuuSeei+6I6q7rYLtUhflka1zJSZC9DMIrFZAFhXbAjEGJaVtO8+5Ir0/2EPUP
bKshrHCZoX0Wkz3+Rhydvk/ZZ6CBAANsb0wb30PKkrYBLJDIJBv8qcURXuysY/baAySaaAJp80+h
ufnTlsDxy7NFzCFAs5NoWuwcxs6h6S7S7krHdNNHvwx1n09PjZ3UVo+Lddbmbs11ul5/zW7YYr/L
3odop6322my37TZ3wZatddyPGXvespUx9B7e15J4B9F7rr4V63yEf0rrxoMHfvhefhkOrOO5GoXe
pIv/BXjfhQurOHWyEtsffv5pauvnoGNK+a8Qoi6Y4LOm7qvfrN8qteWdK8i47JsPvnflvNa+nuSf
M64X7sP6rl6yLJrIN+wSVS03Ys4/Hxakb1dv/fXYZ0/hQAEBADs=

------=_NextPart_000_0000_01C513A0.3B9F7C10
Content-Type: image/gif
Content-Transfer-Encoding: base64
Content-Location: http://java.sun.com/developer/onlineTraining/collections/images/UMLComparator.gif

R0lGODlhJwFUAPf/AAAAAIAAAACAAICAAAAAgIAAgACAgMDAwMDcwKbK8EAgAGAgAIAgAKAgAMAg
AOAgAABAACBAAEBAAGBAAIBAAKBAAMBAAOBAAABgACBgAEBgAGBgAIBgAKBgAMBgAOBgAACAACCA
AECAAGCAAICAAKCAAMCAAOCAAACgACCgAECgAGCgAICgAKCgAMCgAOCgAADAACDAAEDAAGDAAIDA
AKDAAMDAAODAAADgACDgAEDgAGDgAIDgAKDgAMDgAODgAAAAQCAAQEAAQGAAQIAAQKAAQMAAQOAA
QAAgQCAgQEAgQGAgQIAgQKAgQMAgQOAgQABAQCBAQEBAQGBAQIBAQKBAQMBAQOBAQABgQCBgQEBg
QGBgQIBgQKBgQMBgQOBgQACAQCCAQECAQGCAQICAQKCAQMCAQOCAQACgQCCgQECgQGCgQICgQKCg
QMCgQOCgQADAQCDAQEDAQGDAQIDAQKDAQMDAQODAQADgQCDgQEDgQGDgQIDgQKDgQMDgQODgQAAA
gCAAgEAAgGAAgIAAgKAAgMAAgOAAgAAggCAggEAggGAggIAggKAggMAggOAggABAgCBAgEBAgGBA
gIBAgKBAgMBAgOBAgABggCBggEBggGBggIBggKBggMBggOBggACAgCCAgECAgGCAgICAgKCAgMCA
gOCAgACggCCggECggGCggICggKCggMCggOCggADAgCDAgEDAgGDAgIDAgKDAgMDAgODAgADggCDg
gEDggGDggIDggKDggMDggODggAAAwCAAwEAAwGAAwIAAwKAAwMAAwOAAwAAgwCAgwEAgwGAgwIAg
wKAgwMAgwOAgwABAwCBAwEBAwGBAwIBAwKBAwMBAwOBAwABgwCBgwEBgwGBgwIBgwKBgwMBgwOBg
wACAwCCAwECAwGCAwICAwKCAwMCAwOCAwACgwCCgwECgwGCgwICgwKCgwMCgwOCgwADAwCDAwEDA
wGDAwIDAwKDAwP/78KCgpICAgP8AAAD/AP//AAAA//8A/wD//////yH5BAEAAP8ALAAAAAAnAVQA
QAj/AP8JHEiwoMGDCBMqXMiwocOHECNKnEixosWLFQFg3Mixo8ePIEOKHElQ40CTJFOqXMmypUuP
KP/FfEnzIoCZAkkBsCdz581/9n7KlPLvHgAEPQsCkBKUqMGl/w4AuPdPJ8+bTWtq5RgT59avYMOK
Ddt1rNmzaNN+LKu2rdu3cE+WnCtXpkCUJoXqvZv3bt29fu0GFtw3sN7CePkaprtwZl7EgyELfvo3
suKkhP9KZozQ8eXNkhMrfLyYs9e4qFOrVsl2cM+bhTNHhj1b9OTYiGHHdn3Q823Dunnb7ly5tGzd
eGn/Xu2yNfPn0KNTdC69uvXrdXlj3849NfXuIQ9s/7p5j+dWe/eQgtf6fX1H8UvLD9S5CakUk/d5
5pd6b5MUpAhIIYVUO903UIADYlWUUPTZd5p7HbUH4YQUtiRhhRhmuBZnGnboIUYXgmYZcKUBtpxt
Ii4n24q7PahUdoDhViJxMxon2o3FTcYQiqEVJ+NoI/qmXUguPujijkiOON2QL0505IdccfjQk1NC
RCVIV0oJ5WpdIefll2CGKeaYZJZp5plopqnmmmy26eabcGq55Zx0UpZdnXjmqWOWevbp3oV+Bjoh
oIEiMNVBB9xHSk5H6ZTefQcAdZNOSKF3U31VTbVJeUYBgGlwiQKwaKb9USUojUyeOp55AVL1U1Ck
SP+FlFSRGhXpq6LqdIClCNDK6K5GIUVpUrD6eiqQdx770arKfkVos9BC92y01HonZ7XYWptsttyi
Nm234Ir17VZGkpScQyhalCWfEv2IrIpOptqQkHtyiGOQMCqXnL4nBUeYv+m+ZmKL8zZ5L3LCdQYw
X/wGubBx8iZ8IsMmKknjvXeya+VGGnvbLoUad5zQuOGWXJNzreWGb40sasZyj++SeJyPFveW4sE5
kqajoCH6+KPOP8P4mY0sj5zvy0iPdjPNJbp7KskmR81Sl3BWbfXVWGet9dZcd+2v1GC/JXLYZEe5
bdlos3Zt2mxveHbbcEe4dtx0L/l23Xh/fHfefBf/vHffgKO6c+CEG/13oLb+Y+gmXzEbNtR0DluQ
oQcY6ioAt04VlEaWL76gPVndJ59RoENl6KKUW/6P6OZVC/mcQin1mOqq85epYveQQoroqguU++6H
Jn5Y79m+vqXt9gwbbLDDNn+UoUfJ+qqBkk//GE/LN3pUt8aXHGzhjc0NPuHdj992+eanjX76Za/P
/uPiv4+3+/JHTX/9Jd+PP7hUe+3//wAMoAAHmLX47e98BnSW4LCUQOVoZ11VGsm+0BW7wUGQSuUy
jb2oJpfDdJCDfnlMymI3wRDqjGEfRKFGvEKvzJCwX11Coc14lBgPwjCFr2lSsnyzQhqWRIQWNBhm
/xxYL4HtZmIrC6KK3LW0JAbtcDt7IsaYhDOiWXGKg7NTzq6owyM9MWMaZAwTnVgzeEFMSUdEYsQk
VkV7LXBFQjujGrOoRS4qMY6GwyKgKujAgPXwh3AkYglv80I0FvJfZ2MhHzFDyBgqBid9vCEaJXmi
HhIxi4Jk5CA1ucI6toyRRSSS2bjTsbHFJWRuW+MBEQhFEIWvN56M2cgWqUMkYdBuaEOZ7GLIxENm
UoZ28SUfgbhDIQrTkbSB5IuGCcJG/rCGpsQQWxCmRqcVbZJI1OMrt/hJIXmRm21UphkDpcttYeyL
3OzmA2sJS7q0sZgRO+fKxPnJY+1xmI08F25omTFDE+bLkaBUZFmOCchHevKPlOynM/tVz6clkJ02
QdfJ9LZKwUWzovx7KEbBdtGNSi0gADs=

------=_NextPart_000_0000_01C513A0.3B9F7C10
Content-Type: image/gif
Content-Transfer-Encoding: base64
Content-Location: http://java.sun.com/developer/onlineTraining/collections/images/UMLSortedSet.gif

R0lGODlhXwGOAPf/AAAAAIAAAACAAICAAAAAgIAAgACAgMDAwMDcwKbK8EAgAGAgAIAgAKAgAMAg
AOAgAABAACBAAEBAAGBAAIBAAKBAAMBAAOBAAABgACBgAEBgAGBgAIBgAKBgAMBgAOBgAACAACCA
AECAAGCAAICAAKCAAMCAAOCAAACgACCgAECgAGCgAICgAKCgAMCgAOCgAADAACDAAEDAAGDAAIDA
AKDAAMDAAODAAADgACDgAEDgAGDgAIDgAKDgAMDgAODgAAAAQCAAQEAAQGAAQIAAQKAAQMAAQOAA
QAAgQCAgQEAgQGAgQIAgQKAgQMAgQOAgQABAQCBAQEBAQGBAQIBAQKBAQMBAQOBAQABgQCBgQEBg
QGBgQIBgQKBgQMBgQOBgQACAQCCAQECAQGCAQICAQKCAQMCAQOCAQACgQCCgQECgQGCgQICgQKCg
QMCgQOCgQADAQCDAQEDAQGDAQIDAQKDAQMDAQODAQADgQCDgQEDgQGDgQIDgQKDgQMDgQODgQAAA
gCAAgEAAgGAAgIAAgKAAgMAAgOAAgAAggCAggEAggGAggIAggKAggMAggOAggABAgCBAgEBAgGBA
gIBAgKBAgMBAgOBAgABggCBggEBggGBggIBggKBggMBggOBggACAgCCAgECAgGCAgICAgKCAgMCA
gOCAgACggCCggECggGCggICggKCggMCggOCggADAgCDAgEDAgGDAgIDAgKDAgMDAgODAgADggCDg
gEDggGDggIDggKDggMDggODggAAAwCAAwEAAwGAAwIAAwKAAwMAAwOAAwAAgwCAgwEAgwGAgwIAg
wKAgwMAgwOAgwABAwCBAwEBAwGBAwIBAwKBAwMBAwOBAwABgwCBgwEBgwGBgwIBgwKBgwMBgwOBg
wACAwCCAwECAwGCAwICAwKCAwMCAwOCAwACgwCCgwECgwGCgwICgwKCgwMCgwOCgwADAwCDAwEDA
wGDAwIDAwKDAwP/78KCgpICAgP8AAAD/AP//AAAA//8A/wD//////yH5BAEAAP8ALAAAAABfAY4A
QAj/AP8JHEiwoMGDCBMqXMiwocOHECNKnEixosWLGDNqFAhgo8ePIEOKHEmypEmQHQemPMmypcuX
MGPKnLjyX82ZOHMORACg5wGBpADYsykUgJSBBwDc+xcUAdF/9wAg4JmSKoCfTKU+TbpUp9ecNW9+
HUu2rNmzGcOiXcu2rduzat/KnUu37se4PfNyLLgyZV+VewMT9HuQsE3AhwUnTihWsOHFj8U+Hhz4
72K7mNfGzcy5s+e6my8bDtsTcejCfB1Xzjv58ufXsGOejk27tm2SsxEntuw3smLfu00LNwjccvDK
wxUaL32cN3LFqJMXl/5btevbJ3NDX0j6oV7d4Llj/x9P/qJ2yB37Mn96nDLx9YfXq+/OsXH5+/iJ
u68oeb/+5xY1Zp9GA+pmHE0IDSggbgwtF+B2/0EYoXLVJRidhC8VmB+GjOWn4YWZhYbXcK1ZV9yJ
9QHoHm+9AdhiexauOJqJLooX4YvTsbegihtudF6PQAbJ2Y9CFmlkW0QeqeSSXiXJ5ElRAUDKUA3Z
c49TCtkjpUBRTpmQlVg+KZOTYoqEQFBKERTUJk5JUVOUXPbUFU+kuDnUmXISFGVXcJY5pn9+Bipo
SWQOauihEBUqm3cfqgTfoogq+SN830EmHKXp/ZapjvKtOKGjN1XqYHzdTVYajp1Get95jRrIoauv
2v+o6qwzKepQiQ/SqitbIg42Y4274eqcpcTuyGKK7eH4aqjI/tqcdR3e2CyNOl6I666iYavttnix
tl2JpsoKbI7hbWuuR7aeq66Qvfo66oGmeZsstMDBGO9378o7bLTUBYtvatHtK+O/JuqbXIz99kYw
rLdS6y9z8K62sH+trmtxkKyu9tyIG/c7L4/jwrrvtfup1/HJEQMc8sowkqstaazFLPPMNNds8804
56zzzjz37PPPQAct9NBEF220u0YnrfTSTDft9NNQRy11pdddbPWR6V6ttW1Zb+31a11/LXaIgI6t
nFAFHeAmKUAptUmUpSGwiZRUIiDFJkH91BOVO83/7aW8ZotbceCc/qMlKUlhlZVTj5bGFV8vDtQU
4Q2WTfnlnYWN+eZjac755zh5DvroGVpO+ulliY766iK166i7gEH8F6az16ew7bGDzGzJncoeO8y5
E3W78MGzDmmF0I2csMfO1ls1oOQqX6zIDht//PNpufQoodZjp3r34PNHsafVnrwswBCvTHL4h2b8
8bPlSjvtx86yT+v39udfefyx7u++vZYbnEQ+NCqKrA95FPKf6bCnK9cVC3AGg5DC0jc9kD2sXhN0
GYjoZzsKMqwh0eug8+7lwXPh7y7lESAD9WfABbLwheYZn4FohzsA7u5Sy8FUDWFoKAeOEH7nIx8Q
/8OjQh4C6YSv85ERrYbEJerPhwmrH/UeWLD5GSteVsQiAFWmMSD+yj4aHJeyqLhF6GWxgj/kosia
18UdbfF/KGoZtaT3PmE5THoCQ5jJvGg+9B1seXesnh6TyEY+JpBlIcxWBblYRCc6UpEbDNgC84ig
T6FQVinzTqyc1KhwIexlMnQMwYwVQTpiUIIipFcqF/lJDgqvhMRq2CIzCK2BwXJXTZTlklTYSCfm
8pHg6yUwh8k/YhoTgcdMJjKVecxfMnN0znzm56Ipzc1Rs5qXuyY2CafNbZqtm4gKij20tAmHzI1v
CHmcOMmZkHOiDpyHcpMUFMeTA/BkKW66x522VP9POhlOSklBmzzpeRV/+vOdLsSc3IzSLKmkKU56
i9lTDvqPhR7llaWJiuJIB89B2UlLfJJKVPAUpr1BRSr+nBtJ//HRh47UnyZFaDG9CcOO0lRrNr0p
ExOqU/vltKfr+ilQTcjToXZPqEYF5UyTetSiMnV1MJuaVKdK1apa9apYBZpTn3o6pO5PgV8VJkbE
elMo0m+MFDwWGrVIJDCydTSF9GBcyWpMs05xlqAy1Sg9tkK3AquOEyvlH5/qvkQGa2NxNOwKY2nK
M8r1jGU0qjPpKkvKgpCrLfEqZiOl2c22z4VU4xd7QEgpS4rWs5kLpV4IM7y9qnF36ckhfUKLWsz/
dMu1EfPkaXOUR8vWtlahHCKJEgrb4b72t54prKb2CK7ClDZVxEviaJFrl1xuL1fUXdVWsxu4/4mv
g4eMD2Mkuljsnm02FdtUg2jbSj2yd6mzgiINQeUrOdbwX/iCLu9mF7nokmqHrikudKkmO/UScb+/
K3B9dZtf3xbpto+NJfNEZdyzCvavidRQcc3Xmkwi7a6GheBglYpASuJRiIB847fuyuIN8vZTHq7Q
iVXmyf4EdZIzLFVed0xfKw4Po5EZcI7XGMDnyra+KbLxh3uMHgBDkMDycTC7tls67w0wqZ3lLpOy
rGVJ4ViTFpRfeU/bZbeYdcZtRd8XjSvlMjMI/zybebLANOxHxE5szG5u0pfHOEQCzpDDfcwzr6h8
WTwXWtCx4TKie6ToRXuI0GoEr2j7O0Dythm+/r1Oetub11uii7To1WSrACcufpHatA70r3P0O5/7
Em9TFPYdKncYW2TRmlOnEfCRCbm9Bsev1XuR9a0VfGBPDViHr4YxgoPt69cxmNgytLT8ZPuuQGJY
hHEFsSCVvVYe+ZVFF66jteksxGyXbL1CxitjKWzBVKe4xv9pLGNnrWQTj9iM3cZ3vEfc3G1T8rj5
LnZfy+3vg/Wbkeddcq15TOs1MzlfEVQ1w9h92F8becjSPRXkGh5xiu+ajBK8uCjp8xQlM1ziDb+N
6slFZfJLX9nLL09hzIcEaUcTtZgKGnmBuhUgaY+kk6WNdIdG/V7T3qjohg6U65rd5x7jV+M/Xrh+
Mf7f6cb6xwH247Fnq3GAjzzBWO96nKGNLQj3O8jpDrEqgYzIdwcRkL2Fr4jbvu6037zEc5Txvq89
76od3N5hLvawTC5hEGV42ijuXw8n2aLmQZm5KvI4CeWabvTkq8hq2TqSS25JUns87Cyf73RxWfPs
wTxRQG20zWWO6dVfzOWuV1VAAAA7

------=_NextPart_000_0000_01C513A0.3B9F7C10
Content-Type: image/gif
Content-Transfer-Encoding: base64
Content-Location: http://java.sun.com/developer/onlineTraining/collections/images/UMLSortedMap.gif

R0lGODlhOQGOAPf/AAAAAIAAAACAAICAAAAAgIAAgACAgMDAwMDcwKbK8EAgAGAgAIAgAKAgAMAg
AOAgAABAACBAAEBAAGBAAIBAAKBAAMBAAOBAAABgACBgAEBgAGBgAIBgAKBgAMBgAOBgAACAACCA
AECAAGCAAICAAKCAAMCAAOCAAACgACCgAECgAGCgAICgAKCgAMCgAOCgAADAACDAAEDAAGDAAIDA
AKDAAMDAAODAAADgACDgAEDgAGDgAIDgAKDgAMDgAODgAAAAQCAAQEAAQGAAQIAAQKAAQMAAQOAA
QAAgQCAgQEAgQGAgQIAgQKAgQMAgQOAgQABAQCBAQEBAQGBAQIBAQKBAQMBAQOBAQABgQCBgQEBg
QGBgQIBgQKBgQMBgQOBgQACAQCCAQECAQGCAQICAQKCAQMCAQOCAQACgQCCgQECgQGCgQICgQKCg
QMCgQOCgQADAQCDAQEDAQGDAQIDAQKDAQMDAQODAQADgQCDgQEDgQGDgQIDgQKDgQMDgQODgQAAA
gCAAgEAAgGAAgIAAgKAAgMAAgOAAgAAggCAggEAggGAggIAggKAggMAggOAggABAgCBAgEBAgGBA
gIBAgKBAgMBAgOBAgABggCBggEBggGBggIBggKBggMBggOBggACAgCCAgECAgGCAgICAgKCAgMCA
gOCAgACggCCggECggGCggICggKCggMCggOCggADAgCDAgEDAgGDAgIDAgKDAgMDAgODAgADggCDg
gEDggGDggIDggKDggMDggODggAAAwCAAwEAAwGAAwIAAwKAAwMAAwOAAwAAgwCAgwEAgwGAgwIAg
wKAgwMAgwOAgwABAwCBAwEBAwGBAwIBAwKBAwMBAwOBAwABgwCBgwEBgwGBgwIBgwKBgwMBgwOBg
wACAwCCAwECAwGCAwICAwKCAwMCAwOCAwACgwCCgwECgwGCgwICgwKCgwMCgwOCgwADAwCDAwEDA
wGDAwIDAwKDAwP/78KCgpICAgP8AAAD/AP//AAAA//8A/wD//////yH5BAEAAP8ALAAAAAA5AY4A
QAj/AP8JHEiwoMGDCBMqXMiwocOHECNKnEixosWLGB8CyMixo8ePIEOKHEmS4caBJ0uqXMmypcuX
LVP+kwmzZkkEAHIeEEgKgL2ZPgFIGXgAwL1/PREA/XcPAAKcG4XiROpUCk2hTJ0utclVpEyaXcOK
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
VMl/76b+HPZoLr/6VYo+9rMUEAA7

------=_NextPart_000_0000_01C513A0.3B9F7C10
Content-Type: image/gif
Content-Transfer-Encoding: base64
Content-Location: http://java.sun.com/developer/onlineTraining/collections/images/UMLEnumeration.gif

R0lGODlhsABUAPf/AAAAAIAAAACAAICAAAAAgIAAgACAgMDAwMDcwKbK8EAgAGAgAIAgAKAgAMAg
AOAgAABAACBAAEBAAGBAAIBAAKBAAMBAAOBAAABgACBgAEBgAGBgAIBgAKBgAMBgAOBgAACAACCA
AECAAGCAAICAAKCAAMCAAOCAAACgACCgAECgAGCgAICgAKCgAMCgAOCgAADAACDAAEDAAGDAAIDA
AKDAAMDAAODAAADgACDgAEDgAGDgAIDgAKDgAMDgAODgAAAAQCAAQEAAQGAAQIAAQKAAQMAAQOAA
QAAgQCAgQEAgQGAgQIAgQKAgQMAgQOAgQABAQCBAQEBAQGBAQIBAQKBAQMBAQOBAQABgQCBgQEBg
QGBgQIBgQKBgQMBgQOBgQACAQCCAQECAQGCAQICAQKCAQMCAQOCAQACgQCCgQECgQGCgQICgQKCg
QMCgQOCgQADAQCDAQEDAQGDAQIDAQKDAQMDAQODAQADgQCDgQEDgQGDgQIDgQKDgQMDgQODgQAAA
gCAAgEAAgGAAgIAAgKAAgMAAgOAAgAAggCAggEAggGAggIAggKAggMAggOAggABAgCBAgEBAgGBA
gIBAgKBAgMBAgOBAgABggCBggEBggGBggIBggKBggMBggOBggACAgCCAgECAgGCAgICAgKCAgMCA
gOCAgACggCCggECggGCggICggKCggMCggOCggADAgCDAgEDAgGDAgIDAgKDAgMDAgODAgADggCDg
gEDggGDggIDggKDggMDggODggAAAwCAAwEAAwGAAwIAAwKAAwMAAwOAAwAAgwCAgwEAgwGAgwIAg
wKAgwMAgwOAgwABAwCBAwEBAwGBAwIBAwKBAwMBAwOBAwABgwCBgwEBgwGBgwIBgwKBgwMBgwOBg
wACAwCCAwECAwGCAwICAwKCAwMCAwOCAwACgwCCgwECgwGCgwICgwKCgwMCgwOCgwADAwCDAwEDA
wGDAwIDAwKDAwP/78KCgpICAgP8AAAD/AP//AAAA//8A/wD//////yH5BAEAAP8ALAAAAACwAFQA
QAj/AP8JHEiwoMGDCBMqXMiwocOHECNKPAhgosWLGDNq3Aix4kCPHEOKHElSJMh/J0sytAegpct/
LD22ZEkKJoBNMW3KlPKPFAAEKAGw5GkQAM8DAO6x3NRTaNCcQVVKPJlSqtWrWENSzcq1q9eOBKt+
HUuW69aPYWUKBKl2rduKcN3KbSkXZd2wdWXqnYs2qt2/bO+KTcu3MOC8iP3S7Vu2sWOpZwX3dbn4
7+GiayknBqzZctvICFO2vUx59N2uoB+rXo0xNevXsBm6jk27tuTHMTuXtXcPAU3bFPE6Lk1Xikfj
9pD2Ln7cKXKB91re+2d8IAIpUpA6jd6SqUCfm4BW/6fudPVs4OhVn0/Pnuz69vDNCg9eeHFg0onv
Xy44uv/k//UBeFpRnwlYYH39vTfVgJaVdN9g/DEGYUMTQjZffLIxeFGF6qVF3IcghijiiCSWaOKJ
KKaoookXYuhiVgq+KCNHMc5o44Yt3qijRjVeFd0BBfmEgE9ACtnUkD/51JtxQP6DwCYAkGJPU/ds
ohR34QUl3U//HGBcTUcSyVqPUv1YEFJAIXVAdED9iGaXAABpZmVwNkkkb1wKyWZUNL2p5pg57ijo
RGQOaihmjB2qqEOFLnpoo44OCmmkO67HYWhsXUpfhBYmZFpoFmm6aYORZVrZS2/Z5Z9nnYmlF6r6
vf9qn4GnBjrfqg9mhqqWCdpKaWsaPjbprzaCRtWBhyEr3IN77desshWKllmA1Ipqkq+58qWsgZvh
CmCMsR6Y7afyJUossceuqO667Lbr7rsonivvQtbOO+Ow9saHb77t7ctvev7+C1zAAtdGcMGxHYzw
awovbJ6vXSnHGpRTutiwRRQXZJxvzAlUXUtASpcTAnGSXJNxSv0TnT1DORnlPxSTfADJ020MVYfm
jkVzQTvT3HNSP08nMXE7Q0cKKSirXHJSiv3EdNE4B8uVTxUPZKSQG3uZZJ5ct/mTyUbyOd5MGbPJ
5tVcPpyzw8VCzDaGF79dVtxyj0V33V7djXe5Uu//DbDbfg8MeOAGD054wh7Cq/jijDfOuOGHM4xt
qJxOVVrfGUV7ab1rM3rhVnTuquVHmZIe2Ktrm4qWfemujvroApoLV+umSxh6rXSddblniFYVV1y8
B89Zq/lJWDy1n9PLbfCrLkt68sYL/9/vxzfIILmxDpit851Hv/22zD/ffbisjlu7YKfurnq35zP/
umGy+6Wrh7Yf66zejtIJG/6Rk9SwrLPq1LQYFTpEUcg90HsL7UwFvMrtanYDnJ8CJYi9ymkrXPaD
Xd6WRTzDqOUz6qve946nIGmF74Tds4qxbqU9/PTOgNvz3m08xSnzWdB6fMNh9GB3utl1UIPZk6D7
IOB3vQLWSojy0x+MIAc3zinEiV/hX/+ulcIp7s+KNgoIADs=

------=_NextPart_000_0000_01C513A0.3B9F7C10
Content-Type: image/gif
Content-Transfer-Encoding: base64
Content-Location: http://java.sun.com/im/logo_sun_small_sdn.gif

R0lGODlhPQAdAMQfAHh4z42NzTIypYiIuOrq/fn5/MbG29fX59ra+2pqvKmp5cTE5yYmoLW16LW1
15+f0svL+enp6Vtbuz09p5mZ41RUrEZGtXd3vaqqx2JiqrW1xbu793p6rUlJpxgYoP///yH5BAEA
AB8ALAAAAAA9AB0AAAX/4CeOZGmeaKqubOu+6yZJEGzfpsQIFvEWh0MBB9s4KoKExYJgEQIZ6IRz
ILIglUmgM1FaaqnDpOP7BBgBq0qc6Vi23YkAfMow6JFJQ41qXBJdS3AZCQlNJgcCFSQEGUN8JQsC
GQdIXgFJD0llJBsCAgsjBA8iBBSHoo8FCqgfChsmkhIDHQ8JkxMUBLccGROcIokMGcAfGAIMHKIW
AnsQHQwSIgpIEw4ksgETEhEEOgwNCxMXFwIBCMAFHZ8JJBgSFQwXIw47EQgVtxIFGAkQHAwAjJBU
QVutGQEGBAAggJwAABeW0DG2A02wDBEyeNgjAoC8AhkcYGAwQIPADzpI/3UcNqGghXUWREzYZq7c
BIskLuwQYODDAwQbGHR4hOBTN1IJhg0YkqgDKo/DMFhIMECABAQIvgWgkCSpSlFIrBYYksBDGhEP
oo1Qx2BCFTMe2olS4MCBhVkPtU0AcEABwwQMB5xI9ClUHgFvCUA7+cEAsrMEbl4rgWBChqrSqlpw
22CSzrMfCDwSMYABA1IU1IrQ6XaEzgqPUk+IYALBAA5dG/yV0HBAPMEjAEwW0RkcSgYKRCzwNbRA
z3g9RSSd52D0CAkWHOBemESClgrzSGSILmLDzG5yqiwIcKzdAAQLGCwSUVRAhAOgSRQ4w+HWAwAe
ZBBPcowIQKAIqQmkgP9aEFywHwMaKEDKGV+llcABCWhgHQnxAOCfBAFSsCEBHsz3QWdylVbBAFd9
cAshocmBCmsVPDAAcCYUgBtE1hSCwgMVcKABkIwpIEAXj+jk4AcbVMCYGTxAUIAGGKSgo1UNsXCA
AQYUgw4jb6UgZSkbllDANweyMNYPkPCT5gkFOPCALq8QYAACrCgAAQF1AtGAA+Mh0ACfD2BwAATD
QdLYAAAM4IABFACAQAAcKEABBQEkICcGQ24QwAIXKARAAAH8t6SijTWwAQQa9HWBAwFweUEAECRg
AAACXbAeBQMYoIACEfh6wHio6qfKAWUs0AQ6731QxX1AiCZKK8W6QG0FtdjiEAIAOw==

------=_NextPart_000_0000_01C513A0.3B9F7C10
Content-Type: image/gif
Content-Transfer-Encoding: base64
Content-Location: http://java.sun.com/im/button_xml.gif

R0lGODlhJAAOALMAAP/+/f+VTv9mAPSugPzHpcNQBD4aAfPVwNNuK+x/Nvrm2d1bBH0zAv1zF59B
A9RhFCH5BAAAAAAALAAAAAAkAA4AAASbUJFJq734piC6/2Aohgw3nihpdgMANEIAKE0LJB3hxsAx
lqADgNBQABAFG0HQcAEKssNCBPw0Z4BBQWA7dqG9qSok6xWmLZ3aBZZSV56y4sHK6o7sqBhU9VyN
A3UDCUMFeWFvQVkILjgtA1NnhwoDlXB9XGYLLTSPe4dOWR+YAgtnHaZbpnsCBVutrq57pCm1JA4G
ubq7vL2+vhEAOw==

------=_NextPart_000_0000_01C513A0.3B9F7C10
Content-Type: text/css;
	charset="iso-8859-1"
Content-Transfer-Encoding: quoted-printable
Content-Location: http://java.sun.com/developer/onlineTraining/collections/advanced.css

FONT {
	FONT-SIZE: 12px! important
}
.smaller {
	FONT-SIZE: 11px! important
}
.smaller A {
	FONT-SIZE: 11px! important
}
SMALL {
	FONT-SIZE: 11px! important
}
.small {
	FONT-SIZE: 11px! important
}
SMALL SPAN {
	FONT-SIZE: 11px! important
}
.small SPAN {
	FONT-SIZE: 11px! important
}
.small A {
	FONT-SIZE: 11px! important
}
SMALL A {
	FONT-SIZE: 11px! important
}
DIV.sitelinks {
	FONT-SIZE: 11px! important
}
DIV.sitelinks A {
	FONT-SIZE: 11px! important
}
.breadcrumb {
	FONT-SIZE: 11px! important
}
DIV.footlinks {
	FONT-SIZE: 11px! important
}
DIV.footlinks A {
	FONT-SIZE: 11px! important
}
BODY {
	FONT-SIZE: 12px! important
}
TH {
	FONT-SIZE: 12px! important
}
TD {
	FONT-SIZE: 12px! important
}
P {
	FONT-SIZE: 12px! important
}
DIV {
	FONT-SIZE: 12px! important
}
SPAN {
	FONT-SIZE: 12px! important
}
A {
	FONT-SIZE: 12px! important
}
UL {
	FONT-SIZE: 12px! important
}
OL {
	FONT-SIZE: 12px! important
}
DL {
	FONT-SIZE: 12px! important
}
LI {
	FONT-SIZE: 12px! important
}
SELECT {
	FONT-SIZE: 12px! important
}
INPUT {
	FONT-SIZE: 12px! important
}
TEXTAREA {
	FONT-SIZE: 12px! important
}
CODE {
	FONT-SIZE: 12px! important
}
KBD {
	FONT-SIZE: 12px! important
}
TT {
	FONT-SIZE: 12px! important
}
PRE {
	FONT-SIZE: 12px! important
}
CODE A {
	FONT-SIZE: 12px! important
}
KBD A {
	FONT-SIZE: 12px! important
}
TT A {
	FONT-SIZE: 12px! important
}
PRE A {
	FONT-SIZE: 12px! important
}
CODE SPAN {
	FONT-SIZE: 12px! important
}
KBD SPAN {
	FONT-SIZE: 12px! important
}
TT SPAN {
	FONT-SIZE: 12px! important
}
PRE SPAN {
	FONT-SIZE: 12px! important
}
H5 {
	FONT-SIZE: 14px! important
}
H5 A {
	FONT-SIZE: 14px! important
}
H6 {
	FONT-SIZE: 14px! important
}
H6 A {
	FONT-SIZE: 14px! important
}
H5 SPAN {
	FONT-SIZE: 14px! important
}
H6 SPAN {
	FONT-SIZE: 14px! important
}
BIG {
	FONT-SIZE: 14px! important
}
.big {
	FONT-SIZE: 14px! important
}
BIG SPAN {
	FONT-SIZE: 14px! important
}
.big SPAN {
	FONT-SIZE: 14px! important
}
.big A {
	FONT-SIZE: 14px! important
}
BIG A {
	FONT-SIZE: 14px! important
}
.sectiontitle2 {
	FONT-SIZE: 15px! important
}
.sectiontitle2 A {
	FONT-SIZE: 15px! important
}
.sectiontitle2 DIV {
	FONT-SIZE: 15px! important
}
H4 {
	FONT-SIZE: 16px! important
}
H4 SPAN {
	FONT-SIZE: 16px! important
}
H4 A {
	FONT-SIZE: 16px! important
}
.sectiontitle1 {
	FONT-SIZE: 16px! important
}
.sectiontitle1 A {
	FONT-SIZE: 16px! important
}
.sectiontitle1 DIV {
	FONT-SIZE: 16px! important
}
DIV.pagetitle2 {
	FONT-SIZE: 16px! important
}
.xxlarge {
	FONT-SIZE: 16px! important
}
H1 {
	FONT-SIZE: 17px! important
}
H2 {
	FONT-SIZE: 17px! important
}
H3 {
	FONT-SIZE: 17px! important
}
H1 SPAN {
	FONT-SIZE: 17px! important
}
H2 SPAN {
	FONT-SIZE: 17px! important
}
H3 SPAN {
	FONT-SIZE: 17px! important
}
H1 A {
	FONT-SIZE: 17px! important
}
H2 A {
	FONT-SIZE: 17px! important
}
H3 A {
	FONT-SIZE: 17px! important
}
DIV.pagetitle {
	FONT-SIZE: 21px! important
}
DIV.pagetitle CODE {
	FONT-SIZE: 21px! important
}
DIV.smallpagetitle {
	FONT-SIZE: 20px! important
}
INPUT.buttonblue {
	BORDER-BOTTOM: #000 0px; BORDER-LEFT: #000 0px; BORDER-RIGHT: #000 0px; =
BORDER-TOP: #000 0px; COLOR: #fff; CURSOR: hand; FONT-FAMILY: =
lucida,arial,sans-serif; FONT-SIZE: 11px; FONT-WEIGHT: bold; HEIGHT: =
1.4em; MARGIN: 0px; PADDING-BOTTOM: 0px; PADDING-LEFT: 0px; =
PADDING-RIGHT: 0px; PADDING-TOP: 0px
}
INPUT.buttonred {
	BORDER-BOTTOM: #000 0px; BORDER-LEFT: #000 0px; BORDER-RIGHT: #000 0px; =
BORDER-TOP: #000 0px; COLOR: #fff; CURSOR: hand; FONT-FAMILY: =
lucida,arial,sans-serif; FONT-SIZE: 11px; FONT-WEIGHT: bold; HEIGHT: =
1.4em; MARGIN: 0px; PADDING-BOTTOM: 0px; PADDING-LEFT: 0px; =
PADDING-RIGHT: 0px; PADDING-TOP: 0px
}
INPUT.buttonblue {
	BACKGROUND: #594fbf
}
INPUT.buttonred {
	BACKGROUND: #d12124
}
INPUT.error {
	BACKGROUND: #fee; BORDER-BOTTOM: #f00 2px solid; BORDER-LEFT: #c00 2px =
solid; BORDER-RIGHT: #f00 2px solid; BORDER-TOP: #c00 2px solid
}
SELECT.error {
	BACKGROUND: #fee; BORDER-BOTTOM: #f00 2px solid; BORDER-LEFT: #c00 2px =
solid; BORDER-RIGHT: #f00 2px solid; BORDER-TOP: #c00 2px solid
}
TEXTAREA.error {
	BACKGROUND: #fee; BORDER-BOTTOM: #f00 2px solid; BORDER-LEFT: #c00 2px =
solid; BORDER-RIGHT: #f00 2px solid; BORDER-TOP: #c00 2px solid
}
INPUT.medium {
	WIDTH: 120px
}
INPUT.mediumlarge {
	WIDTH: 130px
}
SELECT.rightmodule {
	WIDTH: 130px
}
INPUT.large {
	WIDTH: 200px
}
HR.light {
	BACKGROUND: #e3e3e3; BORDER-BOTTOM: 0px; BORDER-LEFT: 0px; =
BORDER-RIGHT: 0px; BORDER-TOP: 0px; COLOR: #e3e3e3; HEIGHT: 4px; =
PADDING-BOTTOM: 0px; PADDING-LEFT: 0px; PADDING-RIGHT: 0px; PADDING-TOP: =
0px
}
HR {
	BACKGROUND: #333; BORDER-BOTTOM: 0px; BORDER-LEFT: 0px; BORDER-RIGHT: =
0px; BORDER-TOP: 0px; COLOR: #333; HEIGHT: 2px; PADDING-BOTTOM: 0px; =
PADDING-LEFT: 0px; PADDING-RIGHT: 0px; PADDING-TOP: 0px
}
.breadcrumb A {
	FONT-SIZE: 11px! important
}
DIV.footer {
	FONT-SIZE: 11px! important
}
DIV.footer A {
	FONT-SIZE: 11px! important
}
SELECT {
	FONT-SIZE: 11px! important
}
TD.selectcell {
	FONT-SIZE: 11px! important
}
TABLE.topnavlight TD {
	FONT-SIZE: 11px! important
}
TABLE.topnavlight TD A {
	FONT-SIZE: 11px! important
}
TABLE.topnav TD {
	FONT-SIZE: 11px! important
}
TABLE.topnav TD A {
	FONT-SIZE: 11px! important
}
SPAN.dkcaption1 {
	FONT-SIZE: 11px! important
}
SPAN.ltcaption1 {
	FONT-SIZE: 11px! important
}
SPAN.dkcaption1 A {
	FONT-SIZE: 11px! important
}
SPAN.ltcaption1 A {
	FONT-SIZE: 11px! important
}
HR.ltgrey {
	BACKGROUND: #ccc; COLOR: #ccc
}
HR.grey3 {
	COLOR: #e3e3e3
}
aname:hover {
	TEXT-DECORATION: none
}

------=_NextPart_000_0000_01C513A0.3B9F7C10
Content-Type: text/css;
	charset="iso-8859-1"
Content-Transfer-Encoding: quoted-printable
Content-Location: http://java.sun.com/css/default_developer.css

@import url( advanced.css );
BODY {
	FONT-FAMILY: Arial,Helvetica,sans-serif
}
TH {
	FONT-FAMILY: Arial,Helvetica,sans-serif
}
TD {
	FONT-FAMILY: Arial,Helvetica,sans-serif
}
P {
	FONT-FAMILY: Arial,Helvetica,sans-serif
}
DIV {
	FONT-FAMILY: Arial,Helvetica,sans-serif
}
SPAN {
	FONT-FAMILY: Arial,Helvetica,sans-serif
}
A {
	FONT-FAMILY: Arial,Helvetica,sans-serif
}
INPUT {
	FONT-FAMILY: Arial,Helvetica,sans-serif
}
SELECT {
	FONT-FAMILY: Arial,Helvetica,sans-serif
}
TEXTAREA {
	FONT-FAMILY: Arial,Helvetica,sans-serif
}
UL {
	FONT-FAMILY: Arial,Helvetica,sans-serif
}
OL {
	FONT-FAMILY: Arial,Helvetica,sans-serif
}
DL {
	FONT-FAMILY: Arial,Helvetica,sans-serif
}
H1 {
	FONT-FAMILY: Arial,Helvetica,sans-serif
}
H2 {
	FONT-FAMILY: Arial,Helvetica,sans-serif
}
H3 {
	FONT-FAMILY: Arial,Helvetica,sans-serif
}
H4 {
	FONT-FAMILY: Arial,Helvetica,sans-serif
}
H5 {
	FONT-FAMILY: Arial,Helvetica,sans-serif
}
H6 {
	FONT-FAMILY: Arial,Helvetica,sans-serif
}
LI {
	FONT-FAMILY: Arial,Helvetica,sans-serif
}
BIG {
	FONT-FAMILY: Arial,Helvetica,sans-serif
}
SMALL {
	FONT-FAMILY: Arial,Helvetica,sans-serif
}
B {
	FONT-FAMILY: Arial,Helvetica,sans-serif
}
PRE.sunfont {
	FONT-FAMILY: Arial,Helvetica,sans-serif
}
BODY {
	FONT-SIZE: 13px
}
TH {
	FONT-SIZE: 13px
}
TD {
	FONT-SIZE: 13px
}
P {
	FONT-SIZE: 13px
}
DIV {
	FONT-SIZE: 13px
}
SPAN {
	FONT-SIZE: 13px
}
A {
	FONT-SIZE: 13px
}
UL {
	FONT-SIZE: 13px
}
OL {
	FONT-SIZE: 13px
}
DL {
	FONT-SIZE: 13px
}
LI {
	FONT-SIZE: 13px
}
SELECT {
	FONT-SIZE: 13px
}
INPUT {
	FONT-SIZE: 13px
}
TEXTAREA {
	FONT-SIZE: 13px
}
BODY {
	COLOR: #333
}
TH {
	COLOR: #333
}
TD {
	COLOR: #333
}
P {
	COLOR: #333
}
CODE {
	FONT-FAMILY: Monaco,Courier,"Courier New"; FONT-SIZE: 12px
}
KBD {
	FONT-FAMILY: Monaco,Courier,"Courier New"; FONT-SIZE: 12px
}
TT {
	FONT-FAMILY: Monaco,Courier,"Courier New"; FONT-SIZE: 12px
}
PRE {
	FONT-FAMILY: Monaco,Courier,"Courier New"; FONT-SIZE: 12px
}
CODE A {
	FONT-FAMILY: Monaco,Courier,"Courier New"; FONT-SIZE: 12px
}
KBD A {
	FONT-FAMILY: Monaco,Courier,"Courier New"; FONT-SIZE: 12px
}
TT A {
	FONT-FAMILY: Monaco,Courier,"Courier New"; FONT-SIZE: 12px
}
PRE A {
	FONT-FAMILY: Monaco,Courier,"Courier New"; FONT-SIZE: 12px
}
CODE SPAN {
	FONT-FAMILY: Monaco,Courier,"Courier New"; FONT-SIZE: 12px
}
KBD SPAN {
	FONT-FAMILY: Monaco,Courier,"Courier New"; FONT-SIZE: 12px
}
TT SPAN {
	FONT-FAMILY: Monaco,Courier,"Courier New"; FONT-SIZE: 12px
}
PRE SPAN {
	FONT-FAMILY: Monaco,Courier,"Courier New"; FONT-SIZE: 12px
}
CODE {
	COLOR: #666
}
KBD {
	COLOR: #666
}
TT {
	COLOR: #666
}
PRE {
	COLOR: #666
}
CODE SPAN {
	COLOR: #666
}
KBD SPAN {
	COLOR: #666
}
TT SPAN {
	COLOR: #666
}
PRE SPAN {
	COLOR: #666
}
.smaller {
	FONT-SIZE: 11px
}
.smaller A {
	FONT-SIZE: 11px
}
.smaller B {
	FONT-SIZE: 12px
}
SMALL {
	FONT-SIZE: 12px
}
.small {
	FONT-SIZE: 12px
}
SMALL SPAN {
	FONT-SIZE: 12px
}
.small SPAN {
	FONT-SIZE: 12px
}
.small A {
	FONT-SIZE: 12px
}
SMALL A {
	FONT-SIZE: 12px
}
DIV.sitelinks {
	FONT-SIZE: 12px
}
DIV.sitelinks A {
	FONT-SIZE: 12px
}
.breadcrumb {
	FONT-SIZE: 12px
}
BIG {
	FONT-SIZE: 14px
}
.big {
	FONT-SIZE: 14px
}
BIG SPAN {
	FONT-SIZE: 14px
}
.big SPAN {
	FONT-SIZE: 14px
}
.big A {
	FONT-SIZE: 14px
}
BIG A {
	FONT-SIZE: 14px
}
H5 {
	COLOR: #000; FONT-SIZE: 14px
}
H5 A {
	COLOR: #000; FONT-SIZE: 14px
}
H6 {
	COLOR: #000; FONT-SIZE: 14px
}
H6 A {
	COLOR: #000; FONT-SIZE: 14px
}
H5 SPAN {
	COLOR: #000; FONT-SIZE: 14px
}
H6 SPAN {
	COLOR: #000; FONT-SIZE: 14px
}
H1 {
	COLOR: #000; FONT-SIZE: 17px
}
H2 {
	COLOR: #000; FONT-SIZE: 17px
}
H3 {
	COLOR: #000; FONT-SIZE: 17px
}
H1 SPAN {
	COLOR: #000; FONT-SIZE: 17px
}
H2 SPAN {
	COLOR: #000; FONT-SIZE: 17px
}
H3 SPAN {
	COLOR: #000; FONT-SIZE: 17px
}
H1 A {
	COLOR: #000; FONT-SIZE: 17px
}
H2 A {
	COLOR: #000; FONT-SIZE: 17px
}
H3 A {
	COLOR: #000; FONT-SIZE: 17px
}
H4 {
	COLOR: #000; FONT-SIZE: 16px
}
H4 SPAN {
	COLOR: #000; FONT-SIZE: 16px
}
H4 A {
	COLOR: #000; FONT-SIZE: 16px
}
H1 {
	MARGIN: 3px 0px; PADDING-BOTTOM: 0px; PADDING-LEFT: 0px; PADDING-RIGHT: =
0px; PADDING-TOP: 0px
}
H2 {
	MARGIN: 3px 0px; PADDING-BOTTOM: 0px; PADDING-LEFT: 0px; PADDING-RIGHT: =
0px; PADDING-TOP: 0px
}
H3 {
	MARGIN: 3px 0px; PADDING-BOTTOM: 0px; PADDING-LEFT: 0px; PADDING-RIGHT: =
0px; PADDING-TOP: 0px
}
H4 {
	MARGIN: 3px 0px; PADDING-BOTTOM: 0px; PADDING-LEFT: 0px; PADDING-RIGHT: =
0px; PADDING-TOP: 0px
}
H5 {
	MARGIN: 3px 0px; PADDING-BOTTOM: 0px; PADDING-LEFT: 0px; PADDING-RIGHT: =
0px; PADDING-TOP: 0px
}
H6 {
	MARGIN: 3px 0px; PADDING-BOTTOM: 0px; PADDING-LEFT: 0px; PADDING-RIGHT: =
0px; PADDING-TOP: 0px
}
A {
	TEXT-DECORATION: none
}
A:visited {
	COLOR: #96c
}
A:visited CODE {
	COLOR: #96c
}
A:link {
	COLOR: #594fbf
}
A.named:visited {
	COLOR: #594fbf
}
DIV.breadcrumb A:visited {
	COLOR: #594fbf
}
DIV.sitelinks A:visited {
	COLOR: #594fbf
}
A CODE {
	COLOR: #594fbf
}
A:hover {
	TEXT-DECORATION: underline
}
B.error {
	TEXT-DECORATION: underline
}
SPAN.error {
	TEXT-DECORATION: underline
}
DT {
	FONT-WEIGHT: bold; PADDING-BOTTOM: 0px; PADDING-LEFT: 0px; =
PADDING-RIGHT: 0px; PADDING-TOP: 5px
}
UL LI {
	LIST-STYLE: square url(/css/ic_bullet.gif)
}
FORM {
	DISPLAY: inline
}
FORM {
	MARGIN: 0px; PADDING-BOTTOM: 0px; PADDING-LEFT: 0px; PADDING-RIGHT: =
0px; PADDING-TOP: 0px
}
SELECT {
	MARGIN: 0px; PADDING-BOTTOM: 0px; PADDING-LEFT: 0px; PADDING-RIGHT: =
0px; PADDING-TOP: 0px
}
INPUT {
	MARGIN: 0px; PADDING-BOTTOM: 0px; PADDING-LEFT: 0px; PADDING-RIGHT: =
0px; PADDING-TOP: 0px
}
TEXTAREA {
	MARGIN: 0px; PADDING-BOTTOM: 0px; PADDING-LEFT: 0px; PADDING-RIGHT: =
0px; PADDING-TOP: 0px
}
UL LI {
	MARGIN: 0px; PADDING-BOTTOM: 0px; PADDING-LEFT: 0px; PADDING-RIGHT: =
0px; PADDING-TOP: 0px
}
DIV.pagetitle {
	COLOR: #333; FONT-WEIGHT: normal; PADDING-BOTTOM: 0px; PADDING-LEFT: =
10px; PADDING-RIGHT: 10px; PADDING-TOP: 0px
}
DIV.smallpagetitle {
	COLOR: #000; FONT-WEIGHT: bold; PADDING-BOTTOM: 0px; PADDING-LEFT: =
10px; PADDING-RIGHT: 10px; PADDING-TOP: 0px
}
DIV.pagetitle {
	FONT-SIZE: 23px
}
DIV.pagetitle CODE {
	FONT-SIZE: 23px
}
DIV.pagetitle2 {
	COLOR: #333; FONT-SIZE: 16px; FONT-WEIGHT: bold
}
DIV.breadcrumb {
	COLOR: #899ce6
}
DIV.navtitle {
	FONT-WEIGHT: bold; PADDING-BOTTOM: 5px; PADDING-LEFT: 0px; =
PADDING-RIGHT: 0px; PADDING-TOP: 0px
}
SPAN.rightarrowblue {
	COLOR: #899ce6
}
SPAN.rightarrowred {
	COLOR: #cc3335
}
SPAN.rightarrowwhite {
	COLOR: #fff
}
SPAN.rightarrow {
	FONT-FAMILY: Verdana,arial,sans-serif; FONT-SIZE: 12px; FONT-WEIGHT: =
bold
}
SPAN.rightarrowblue {
	FONT-FAMILY: Verdana,arial,sans-serif; FONT-SIZE: 12px; FONT-WEIGHT: =
bold
}
SPAN.rightarrowred {
	FONT-FAMILY: Verdana,arial,sans-serif; FONT-SIZE: 12px; FONT-WEIGHT: =
bold
}
SPAN.rightarrowwhite {
	FONT-FAMILY: Verdana,arial,sans-serif; FONT-SIZE: 12px; FONT-WEIGHT: =
bold
}
.red {
	COLOR: #d12124
}
B.error {
	COLOR: #d12124
}
SPAN.error {
	COLOR: #d12124
}
.new {
	COLOR: #f00
}
.note {
	COLOR: #000
}
.new {
	FONT-WEIGHT: bold; TEXT-TRANSFORM: uppercase
}
.note {
	FONT-WEIGHT: bold; TEXT-TRANSFORM: uppercase
}
P.compact {
	MARGIN: 0px
}
P.compact2 {
	MARGIN: 0px 0px 7px
}
.sunred {
	BACKGROUND: #d12124
}
.sunblue {
	BACKGROUND: #594fbf
}
.sunyellow {
	BACKGROUND: #fbe249
}
.sunred {
	COLOR: #fff
}
.sunblue {
	COLOR: #fff
}
TD.sunred A {
	COLOR: #fff
}
TD.sunblue A {
	COLOR: #fff
}
TD.sunred B {
	COLOR: #ffde00; FONT-WEIGHT: bold
}
TD.sunred DIV.navtitle {
	COLOR: #ffde00; FONT-WEIGHT: bold
}
TD.sunred LI {
	COLOR: #fff; LIST-STYLE: url(/css/ic_bullet_white.gif)
}
TD.sunblue LI {
	COLOR: #fff; LIST-STYLE: url(/css/ic_bullet_white.gif)
}
TD.sunred UL {
	COLOR: #fff; LIST-STYLE: url(/css/ic_bullet_white.gif)
}
TD.sunblue UL {
	COLOR: #fff; LIST-STYLE: url(/css/ic_bullet_white.gif)
}
TD.sunblue B {
	COLOR: #ffde00
}
TD.sunblue DIV.navtitle {
	COLOR: #ffde00
}
TD.sunyellow B {
	COLOR: #594fbf
}
TD.sunyellow DIV.navtitle {
	COLOR: #594fbf
}
TD.sunyellow A:link {
	COLOR: #594fbf
}
TD.sunyellow A:visited {
	COLOR: #594fbf
}
TD.sunyellow A:hover {
	COLOR: #594fbf; TEXT-DECORATION: underline
}
DIV.pad0x10 {
	PADDING-BOTTOM: 0px; PADDING-LEFT: 10px; PADDING-RIGHT: 10px; =
PADDING-TOP: 0px
}
DIV.sitelinks {
	PADDING-BOTTOM: 0px; PADDING-LEFT: 10px; PADDING-RIGHT: 10px; =
PADDING-TOP: 0px
}
DIV.pagetitle2 {
	PADDING-BOTTOM: 0px; PADDING-LEFT: 10px; PADDING-RIGHT: 10px; =
PADDING-TOP: 0px
}
DIV.breadcrumb {
	PADDING-BOTTOM: 0px; PADDING-LEFT: 10px; PADDING-RIGHT: 10px; =
PADDING-TOP: 0px
}
DIV.pad6 {
	PADDING-BOTTOM: 6px; PADDING-LEFT: 6px; PADDING-RIGHT: 6px; =
PADDING-TOP: 6px
}
DIV.pad8 {
	PADDING-BOTTOM: 8px; PADDING-LEFT: 8px; PADDING-RIGHT: 8px; =
PADDING-TOP: 8px
}
DIV.pad10 {
	PADDING-BOTTOM: 10px; PADDING-LEFT: 10px; PADDING-RIGHT: 10px; =
PADDING-TOP: 10px
}
DIV.pad5x10 {
	PADDING-BOTTOM: 5px; PADDING-LEFT: 10px; PADDING-RIGHT: 10px; =
PADDING-TOP: 5px
}
DIV.pad10x0 {
	PADDING-BOTTOM: 10px; PADDING-LEFT: 0px; PADDING-RIGHT: 0px; =
PADDING-TOP: 10px
}
DIV.pad3x0 {
	PADDING-BOTTOM: 3px; PADDING-LEFT: 0px; PADDING-RIGHT: 0px; =
PADDING-TOP: 3px
}
DIV.contentdivider {
	PADDING-BOTTOM: 8px; PADDING-LEFT: 0px; PADDING-RIGHT: 0px; =
PADDING-TOP: 4px
}
DIV.pad2x0x10x0 {
	PADDING-BOTTOM: 10px; PADDING-LEFT: 0px; PADDING-RIGHT: 0px; =
PADDING-TOP: 2px
}
.sp10 {
	FONT-SIZE: 8px! important
}
.sp8 {
	FONT-SIZE: 7px! important
}
.sp5 {
	FONT-SIZE: 4px! important
}
.sp4 {
	FONT-SIZE: 3px! important
}
.sp2 {
	FONT-SIZE: 2px! important
}
SPAN.sp20 {
	FONT-SIZE: 19px! important
}
TD.vatop {
	VERTICAL-ALIGN: top
}
TH.vatop {
	VERTICAL-ALIGN: top
}
TR.vatop TD {
	VERTICAL-ALIGN: top
}
TR.vatop TH {
	VERTICAL-ALIGN: top
}
TABLE.vatop TD {
	VERTICAL-ALIGN: top
}
TABLE.vatop TH {
	VERTICAL-ALIGN: top
}
DIV.vatop {
	VERTICAL-ALIGN: top
}
TD.vamiddle {
	VERTICAL-ALIGN: middle
}
TH.vamiddle {
	VERTICAL-ALIGN: middle
}
TR.vamiddle TD {
	VERTICAL-ALIGN: middle
}
TR.vamiddle TH {
	VERTICAL-ALIGN: middle
}
TABLE.vamiddle TD {
	VERTICAL-ALIGN: middle
}
TABLE.vamiddle TH {
	VERTICAL-ALIGN: middle
}
DIV.vamiddle {
	VERTICAL-ALIGN: middle
}
TD.vabottom {
	VERTICAL-ALIGN: bottom
}
TH.vabottom {
	VERTICAL-ALIGN: bottom
}
TR.vabottom TD {
	VERTICAL-ALIGN: bottom
}
TR.vabottom TH {
	VERTICAL-ALIGN: bottom
}
TABLE.vabottom TD {
	VERTICAL-ALIGN: bottom
}
TABLE.vabottom TH {
	VERTICAL-ALIGN: bottom
}
DIV.vabottom {
	VERTICAL-ALIGN: bottom
}
TABLE.dkgrey {
	BACKGROUND: #666
}
TABLE.white {
	BACKGROUND: #fff
}
TD.white {
	BACKGROUND: #fff
}
TH.white {
	BACKGROUND: #fff
}
TR.white TD {
	BACKGROUND: #fff
}
TR.white TH {
	BACKGROUND: #fff
}
TABLE TR TD.white {
	BACKGROUND: #fff
}
TABLE TR TH.white {
	BACKGROUND: #fff
}
TD.white {
	BACKGROUND: #fff
}
TABLE.white1 {
	BACKGROUND: #fff
}
TD.white1 {
	BACKGROUND: #fff
}
TH.white1 {
	BACKGROUND: #fff
}
TR.white1 TD {
	BACKGROUND: #fff
}
TR.white1 TH {
	BACKGROUND: #fff
}
TABLE TR TD.white1 {
	BACKGROUND: #fff
}
TABLE TR TH.white1 {
	BACKGROUND: #fff
}
TD.white1 {
	BACKGROUND: #fff
}
TABLE.ltgrey {
	BACKGROUND: #ccc
}
TD.ltgrey {
	BACKGROUND: #ccc
}
TH.ltgrey {
	BACKGROUND: #ccc
}
TR.ltgrey TD {
	BACKGROUND: #ccc
}
TR.ltgrey TH {
	BACKGROUND: #ccc
}
TABLE TR TD.ltgrey {
	BACKGROUND: #ccc
}
TABLE TR TH.ltgrey {
	BACKGROUND: #ccc
}
TABLE.vltgrey {
	BACKGROUND: #ddd
}
TD.vltgrey {
	BACKGROUND: #ddd
}
TH.vltgrey {
	BACKGROUND: #ddd
}
TR.vltgrey TD {
	BACKGROUND: #ddd
}
TR.vltgrey TH {
	BACKGROUND: #ddd
}
TABLE TR TD.vltgrey {
	BACKGROUND: #ddd
}
TABLE TR TH.vltgrey {
	BACKGROUND: #ddd
}
TABLE.dkgrey1 {
	BACKGROUND: #bbb
}
TD.dkgrey1 {
	BACKGROUND: #bbb
}
TH.dkgrey1 {
	BACKGROUND: #bbb
}
TR.dkgrey1 TD {
	BACKGROUND: #bbb
}
TR.dkgrey1 TH {
	BACKGROUND: #bbb
}
TABLE TR TD.dkgrey1 {
	BACKGROUND: #bbb
}
TABLE TR TH.dkgrey1 {
	BACKGROUND: #bbb
}
TABLE.grey3 {
	BACKGROUND: #e3e3e3
}
TD.grey3 {
	BACKGROUND: #e3e3e3
}
TH.grey3 {
	BACKGROUND: #e3e3e3
}
TR.grey3 TD {
	BACKGROUND: #e3e3e3
}
TR.grey3 TH {
	BACKGROUND: #e3e3e3
}
TABLE TR TD.grey3 {
	BACKGROUND: #e3e3e3
}
TABLE TR TH.grey3 {
	BACKGROUND: #e3e3e3
}
TABLE.navblue {
	BACKGROUND: #e4e9ff
}
TD.navblue {
	BACKGROUND: #e4e9ff
}
TH.navblue {
	BACKGROUND: #e4e9ff
}
TR.navblue TD {
	BACKGROUND: #e4e9ff
}
TR.navblue TH {
	BACKGROUND: #e4e9ff
}
TABLE TR TD.navblue {
	BACKGROUND: #e4e9ff
}
TABLE TR TH.navblue {
	BACKGROUND: #e4e9ff
}
TABLE.blue1 {
	BACKGROUND: #8a9ce8
}
TD.blue1 {
	BACKGROUND: #8a9ce8
}
TH.blue1 {
	BACKGROUND: #8a9ce8
}
TR.blue1 TD {
	BACKGROUND: #8a9ce8
}
TR.blue1 TH {
	BACKGROUND: #8a9ce8
}
TABLE TR TD.blue1 {
	BACKGROUND: #8a9ce8
}
TABLE TR TH.blue1 {
	BACKGROUND: #8a9ce8
}
TABLE.yellow2 {
	BACKGROUND: #ffffe2
}
TD.yellow2 {
	BACKGROUND: #ffffe2
}
TH.yellow2 {
	BACKGROUND: #ffffe2
}
TR.yellow2 TD {
	BACKGROUND: #ffffe2
}
TR.yellow2 TH {
	BACKGROUND: #ffffe2
}
TABLE TR TD.yellow2 {
	BACKGROUND: #ffffe2
}
TABLE TR TH.yellow2 {
	BACKGROUND: #ffffe2
}
.sectiontitle1 {
	FONT-SIZE: 16px; FONT-WEIGHT: bold
}
.sectiontitle1 A {
	FONT-SIZE: 16px; FONT-WEIGHT: bold
}
.sectiontitle2 {
	FONT-SIZE: 16px; FONT-WEIGHT: bold
}
.sectiontitle2 A {
	FONT-SIZE: 16px; FONT-WEIGHT: bold
}
SPAN.quotehighlight {
	COLOR: #666; FONT-SIZE: 16px; LINE-HEIGHT: 21px
}
DIV.sectiontitle1 A {
	FONT-FAMILY: arial,helvetica,sans-serif; FONT-WEIGHT: bold
}
TD.selectcell {
	FONT-SIZE: 12px
}
TABLE.topnav TD A {
	FONT-SIZE: 12px
}
TABLE.topnav TD {
	FONT-SIZE: 12px
}
TABLE.topnavlight TD A {
	FONT-SIZE: 12px
}
TABLE.topnavlight TD {
	FONT-SIZE: 12px
}
TD.selectcell {
	FONT-SIZE: 12px
}
SPAN.ltcaption1 {
	FONT-SIZE: 12px
}
SPAN.ltcaption1 A {
	FONT-SIZE: 12px
}
SPAN.dkcaption1 {
	FONT-SIZE: 12px
}
SPAN.dkcaption1 A {
	FONT-SIZE: 12px
}
DIV.footer {
	FONT-SIZE: 12px
}
DIV.footer A {
	FONT-SIZE: 12px
}
A:visited SPAN.ltcaption1 {
	COLOR: #96c
}
A:link SPAN.ltcaption1 {
	COLOR: #594fbf
}
P {
	MARGIN-BOTTOM: 17px; MARGIN-TOP: 0px
}
TABLE.dkgrey2 {
	BACKGROUND-COLOR: #d6d6d6
}
TR.dkgrey2 {
	BACKGROUND-COLOR: #d6d6d6
}
TH.dkgrey2 {
	BACKGROUND-COLOR: #d6d6d6
}
TD.dkgrey2 {
	BACKGROUND-COLOR: #d6d6d6
}
TABLE.grey4 {
	BACKGROUND-COLOR: #e7e7e7
}
TR.grey4 {
	BACKGROUND-COLOR: #e7e7e7
}
TH.grey4 {
	BACKGROUND-COLOR: #e7e7e7
}
TD.grey4 {
	BACKGROUND-COLOR: #e7e7e7
}
TABLE.grey5 {
	BACKGROUND-COLOR: #f1f1f1
}
TR.grey5 {
	BACKGROUND-COLOR: #f1f1f1
}
TH.grey5 {
	BACKGROUND-COLOR: #f1f1f1
}
TD.grey5 {
	BACKGROUND-COLOR: #f1f1f1
}
TABLE.navblue2 {
	BACKGROUND: #f0f4ff
}
TR.navblue2 {
	BACKGROUND: #f0f4ff
}
TD.navblue2 {
	BACKGROUND: #f0f4ff
}
DIV.datacell {
	PADDING-BOTTOM: 4px; PADDING-LEFT: 6px; PADDING-RIGHT: 6px; =
PADDING-TOP: 3px
}
DIV.pad4x9 {
	PADDING-BOTTOM: 4px; PADDING-LEFT: 9px; PADDING-RIGHT: 9px; =
PADDING-TOP: 4px
}
DIV.pad3x5 {
	PADDING-BOTTOM: 3px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px; =
PADDING-TOP: 3px
}
DIV.pad3 {
	PADDING-BOTTOM: 3px; PADDING-LEFT: 3px; PADDING-RIGHT: 3px; =
PADDING-TOP: 3px
}
DIV.colpadding1 {
	PADDING-BOTTOM: 8px; PADDING-LEFT: 10px; PADDING-RIGHT: 10px; =
PADDING-TOP: 7px
}
DIV.colpadding2 {
	PADDING-BOTTOM: 8px; PADDING-LEFT: 8px; PADDING-RIGHT: 8px; =
PADDING-TOP: 4px
}
DIV.colpadding3 {
	PADDING-BOTTOM: 8px; PADDING-LEFT: 10px; PADDING-RIGHT: 10px; =
PADDING-TOP: 4px
}
DIV.colcaption1 {
	PADDING-BOTTOM: 0px; PADDING-LEFT: 6px; PADDING-RIGHT: 6px; =
PADDING-TOP: 4px
}
DIV.padbottom10 {
	PADDING-BOTTOM: 10px
}
DIV.headerpadding2 {
	PADDING-BOTTOM: 2px; PADDING-LEFT: 6px; PADDING-RIGHT: 6px; =
PADDING-TOP: 1px
}
TABLE.topnav TD {
	COLOR: #666
}
TABLE.topnavlight TD A {
	COLOR: #fff
}
TABLE.topnavlight TD A:visited {
	COLOR: #fff
}
TABLE.topnavlight TD {
	COLOR: #fff
}
TABLE.topnav TD A:visited {
	COLOR: #594fbf
}
TABLE.topnav SPAN.rightarrowblue {
	FONT-SIZE: 11px
}
TABLE.topnav SPAN.rightarrowwhite {
	FONT-SIZE: 11px
}
TD.headerbar1 {
	BACKGROUND: #e7e7e7; COLOR: #333; FONT-WEIGHT: bold
}
TD.headerbar2 {
	BACKGROUND: #e7e7e7; COLOR: #666; FONT-WEIGHT: bold
}
TD.headerbar3 {
	BACKGROUND: #594fbf; COLOR: #fff; FONT-WEIGHT: bold
}
TD.headerbar4 {
	BACKGROUND: #666; COLOR: #fff; FONT-WEIGHT: bold
}
TD.headerbar5 {
	BACKGROUND: #ccd6f7; COLOR: #666; FONT-WEIGHT: bold
}
TD.headerbar6 {
	BACKGROUND: #999; COLOR: #fff; FONT-WEIGHT: bold
}
TH.headerbar6 {
	BACKGROUND: #999; COLOR: #fff; FONT-WEIGHT: bold
}
SPAN.ltcaption1 {
	COLOR: #999
}
SPAN.dkcaption1 {
	COLOR: #666
}
B.dkgrey {
	COLOR: #666
}
SPAN.ltcaption2 {
	COLOR: #999
}
SPAN.termhighlight {
	BACKGROUND-COLOR: #ff9; layer-background-color: #FF9
}
SPAN.eventdate {
	COLOR: #666; FONT-SIZE: 23px! important
}
INPUT.medium {
	WIDTH: 95px
}
INPUT.large {
	WIDTH: 155px
}
SELECT.large {
	WIDTH: 155px
}
TEXTAREA.large {
	WIDTH: 155px
}
INPUT.xxlarge {
	WIDTH: 300px
}
TEXTAREA.xxlarge {
	WIDTH: 300px
}
SELECT.xxlarge {
	WIDTH: 300px
}
SELECT.globalsearch {
	BACKGROUND: #e3e3e3
}
DIV.greyformfield SELECT {
	BACKGROUND: #f1f1f1
}
DIV.greyformfield INPUT {
	BACKGROUND: #f1f1f1
}
DIV.greyformfield TEXTAREA {
	BACKGROUND: #f1f1f1
}
INPUT.buttonltblue {
	BORDER-BOTTOM: #000 0px; BORDER-LEFT: #000 0px; BORDER-RIGHT: #000 0px; =
BORDER-TOP: #000 0px; COLOR: #fff; CURSOR: hand; FONT-FAMILY: =
Verdana,lucida,arial,sans-serif; FONT-SIZE: 11px; FONT-WEIGHT: bold; =
HEIGHT: 1.45em; MARGIN: 0px; PADDING-BOTTOM: 0px; PADDING-LEFT: 0px; =
PADDING-RIGHT: 0px; PADDING-TOP: 0px
}
INPUT.buttonblue2 {
	BORDER-BOTTOM: #000 0px; BORDER-LEFT: #000 0px; BORDER-RIGHT: #000 0px; =
BORDER-TOP: #000 0px; COLOR: #fff; CURSOR: hand; FONT-FAMILY: =
Verdana,lucida,arial,sans-serif; FONT-SIZE: 11px; FONT-WEIGHT: bold; =
HEIGHT: 1.45em; MARGIN: 0px; PADDING-BOTTOM: 0px; PADDING-LEFT: 0px; =
PADDING-RIGHT: 0px; PADDING-TOP: 0px
}
DIV.leftnav1 {
	COLOR: #999; FONT-WEIGHT: bold
}
DIV.leftnav1 A {
	FONT-WEIGHT: bold
}
TD.tooltab {
	BACKGROUND-COLOR: #d4d6d5; VERTICAL-ALIGN: bottom; =
layer-background-color: #D4D6D5
}
TD.tooltab DIV {
	BORDER-BOTTOM: #b8b8b8 3px solid; BORDER-TOP: #fff 2px solid; =
PADDING-BOTTOM: 1px; PADDING-LEFT: 6px; PADDING-RIGHT: 0px; PADDING-TOP: =
1px
}
TD.tooltabon {
	BACKGROUND-COLOR: #666; VERTICAL-ALIGN: bottom; layer-background-color: =
#666
}
TD.tooltabon DIV {
	PADDING-BOTTOM: 3px; PADDING-LEFT: 6px; PADDING-RIGHT: 0px; =
PADDING-TOP: 3px
}
TD.tooltabon B {
	COLOR: #fff
}
INPUT.buttonblue2 {
	BACKGROUND: #594fbf
}
INPUT.buttonltblue {
	BACKGROUND: #969ade
}
TABLE.photobackground {
	BACKGROUND-REPEAT: no-repeat
}
.hyphen {
	COLOR: #594fbf; TEXT-ALIGN: right; WHITE-SPACE: nowrap
}
DIV.footer {
	COLOR: #999; PADDING-BOTTOM: 10px; PADDING-LEFT: 0px; PADDING-RIGHT: =
0px; PADDING-TOP: 5px
}
DIV.mastheadcaption {
	BACKGROUND-COLOR: #fff; LEFT: 200px; PADDING-BOTTOM: 0px; PADDING-LEFT: =
3px; PADDING-RIGHT: 3px; PADDING-TOP: 0px; POSITION: absolute; TOP: 0px; =
VISIBILITY: hidden; layer-background-color: #FFF
}
DIV.mastheadcaption {
	FILTER: alpha(opacity=3D87); moz-opacity: 0.87
}
DIV.photobg1 {
	BACKGROUND-COLOR: #4394cc
}
DIV.photobg2 {
	BACKGROUND-COLOR: #f1eee9
}
DIV.photobg3 {
	BACKGROUND-COLOR: #3a0107
}
A.red {
	COLOR: #d12124; FONT-SIZE: 9px
}
A.red:link {
	COLOR: #d12124; FONT-FAMILY: Verdana,lucida,arial,sans-serif; =
FONT-SIZE: 10px; FONT-WEIGHT: bold
}
A.red:visited {
	COLOR: #d12124; FONT-FAMILY: Verdana,lucida,arial,sans-serif; =
FONT-SIZE: 10px; FONT-WEIGHT: bold
}
DIV.red A:visited {
	COLOR: #d12124; FONT-FAMILY: Verdana,lucida,arial,sans-serif; =
FONT-SIZE: 10px; FONT-WEIGHT: bold
}
.trafficalert {
	BACKGROUND-COLOR: #f1f1f1; COLOR: #666; FONT-FAMILY: =
Verdana,lucida,arial,sans-serif; FONT-SIZE: 10px; FONT-WEIGHT: bold; =
MARGIN: 1px
}
TABLE.highlight {
	BACKGROUND: #ffffe2
}
TD.highlight {
	BACKGROUND: #ffffe2
}
TH.highlight {
	BACKGROUND: #ffffe2
}
TR.highlight TD {
	BACKGROUND: #ffffe2
}
TR.highlight TH {
	BACKGROUND: #ffffe2
}
TABLE TR TD.highlight {
	BACKGROUND: #ffffe2
}
TABLE TR TH.highlight {
	BACKGROUND: #ffffe2
}
SPAN.wrapper {
	FONT-FAMILY: Verdana,Arial,Helvetica,sans-serif; FONT-SIZE: 13px
}
SPAN.title {
	COLOR: #000; FONT-FAMILY: Verdana,sans-serif; FONT-SIZE: 20px; =
FONT-WEIGHT: bold
}
SPAN.body {
	COLOR: #000; FONT-FAMILY: Verdana,sans-serif; FONT-SIZE: 13px
}
SPAN.copyright {
	COLOR: #000; FONT-FAMILY: Verdana,sans-serif; FONT-SIZE: 10px
}
SPAN.date {
	COLOR: #ccc; FONT-FAMILY: Verdana,sans-serif; FONT-SIZE: 10px
}
SPAN.byline {
	COLOR: #000; FONT-FAMILY: Verdana,sans-serif; FONT-SIZE: 13px
}
A.tab:link {
	FONT-FAMILY: Verdana,sans-serif; FONT-SIZE: 14px; FONT-WEIGHT: bold; =
TEXT-DECORATION: none
}
A.tab:active {
	FONT-FAMILY: Verdana,sans-serif; FONT-SIZE: 14px; FONT-WEIGHT: bold; =
TEXT-DECORATION: none
}
A.tab:visited {
	FONT-FAMILY: Verdana,sans-serif; FONT-SIZE: 14px; FONT-WEIGHT: bold; =
TEXT-DECORATION: none
}
A.tab2:link {
	FONT-FAMILY: Verdana,sans-serif; FONT-SIZE: 14px; FONT-WEIGHT: bold; =
TEXT-DECORATION: none
}
A.tab2:active {
	FONT-FAMILY: Verdana,sans-serif; FONT-SIZE: 14px; FONT-WEIGHT: bold; =
TEXT-DECORATION: none
}
A.tab2:visited {
	FONT-FAMILY: Verdana,sans-serif; FONT-SIZE: 14px; FONT-WEIGHT: bold; =
TEXT-DECORATION: none
}
A.tab:link {
	COLOR: #336
}
A.tab:visited {
	COLOR: #336
}
A.tab:active {
	COLOR: #000
}
A.tab2:active {
	COLOR: #000
}
A.tab2:link {
	COLOR: #fff
}
A.tab2:visited {
	COLOR: #fff
}
A.footer:link {
	FONT-FAMILY: Verdana,sans-serif; FONT-SIZE: 10px
}
A.footer:visited {
	FONT-FAMILY: Verdana,sans-serif; FONT-SIZE: 10px
}
A.footer:active {
	FONT-FAMILY: Verdana,sans-serif; FONT-SIZE: 10px
}
A.footer:link {
	COLOR: #00f
}
A.footer:visited {
	COLOR: #606
}
A.footer:active {
	COLOR: #000
}
TD.dkgray {
	BACKGROUND: #999
}
TD.yellow {
	BACKGROUND: #ffc
}
SPAN.search {
	COLOR: #fff; FONT-FAMILY: Verdana,sans-serif; FONT-SIZE: 13px
}
SPAN.subtitle {
	COLOR: #000; FONT-FAMILY: Verdana,sans-serif; FONT-SIZE: 13px; =
FONT-WEIGHT: bold
}
SPAN.rtbtitle {
	COLOR: #666; FONT-FAMILY: Verdana,sans-serif; FONT-SIZE: 13px; =
FONT-WEIGHT: bold
}
SPAN.right {
	COLOR: #3c6; FONT-FAMILY: Verdana,sans-serif; FONT-SIZE: 13px; =
FONT-WEIGHT: bold
}
SPAN.wrong {
	COLOR: #c00; FONT-FAMILY: Verdana,sans-serif; FONT-SIZE: 13px; =
FONT-WEIGHT: bold
}
DIV.box2 {
	PADDING-TOP: 0px
}
DIV.box {
	PADDING-TOP: 4px
}
TD.leftnav DIV.box {
	PADDING-TOP: 3px
}
TD.leftnav DIV.box2 {
	PADDING-TOP: 1px
}
TABLE.black {
	BACKGROUND: #000
}
TABLE.gray {
	BACKGROUND: #ccc
}
TABLE.ltgray {
	BACKGROUND: #eee
}
TR.ltgray {
	BACKGROUND: #eee
}
TD.code {
	FONT-FAMILY: Monaco,Courier,"Courier New"; FONT-SIZE: 12px
}
TD.ltblue {
	BACKGROUND: #c3e1ff; COLOR: #000
}
TD.gray {
	BACKGROUND: #eee; COLOR: #000; FONT-FAMILY: Verdana,sans-serif; =
FONT-SIZE: 13px; TEXT-DECORATION: none
}
TD.grayline {
	BACKGROUND: #ccc
}
TD.heading {
	BACKGROUND: #eee; COLOR: #9a9a9a; FONT-SIZE: 14px; FONT-WEIGHT: bold
}
TD.whitetitle {
	BACKGROUND: #fff; FONT-FAMILY: Verdana,sans-serif; FONT-SIZE: 13px; =
FONT-WEIGHT: bold
}
TD.yellowtitle {
	BACKGROUND: #ffc; COLOR: #666; FONT-FAMILY: Verdana,sans-serif; =
FONT-SIZE: 13px; FONT-WEIGHT: bold
}
TD.ltyellow {
	BACKGROUND: #ffc
}
INPUT.textentry {
	COLOR: #000; FONT-FAMILY: Verdana,sans-serif; FONT-SIZE: 10px; =
FONT-WEIGHT: normal
}
A.tree:link {
	COLOR: #000; FONT-SIZE: 12px; TEXT-DECORATION: none
}
A.tree:visited {
	COLOR: #000; FONT-SIZE: 12px; TEXT-DECORATION: none
}
A.tree:active {
	COLOR: #000; FONT-SIZE: 12px; TEXT-DECORATION: none
}
A.map {
	COLOR: #000; FONT-FAMILY: Verdana,sans-serif; FONT-SIZE: 13px; =
TEXT-DECORATION: none
}
A.jscnav:link {
	COLOR: #99c; FONT-FAMILY: Verdana,sans-serif; FONT-SIZE: 13px; =
FONT-WEIGHT: bold; TEXT-DECORATION: none
}
A.jscnav:active {
	COLOR: #99c; FONT-FAMILY: Verdana,sans-serif; FONT-SIZE: 13px; =
FONT-WEIGHT: bold; TEXT-DECORATION: none
}
A.jscnav:visited {
	COLOR: #99c; FONT-FAMILY: Verdana,sans-serif; FONT-SIZE: 13px; =
FONT-WEIGHT: bold; TEXT-DECORATION: none
}
A.wdnav:link {
	COLOR: #339; FONT-FAMILY: Verdana,sans-serif; FONT-SIZE: 13px; =
FONT-WEIGHT: bold; TEXT-DECORATION: none
}
A.wdnav:active {
	COLOR: #339; FONT-FAMILY: Verdana,sans-serif; FONT-SIZE: 13px; =
FONT-WEIGHT: bold; TEXT-DECORATION: none
}
A.wdnav:visited {
	COLOR: #339; FONT-FAMILY: Verdana,sans-serif; FONT-SIZE: 13px; =
FONT-WEIGHT: bold; TEXT-DECORATION: none
}
.iePageTitleClass {
	BACKGROUND-IMAGE: url(/pics/map/captionBG.gif); LEFT: 0px; POSITION: =
absolute; TOP: 0px
}
.menu {
	BACKGROUND-COLOR: #ffc; POSITION: absolute; WIDTH: 300px
}
.menuborder {
	BACKGROUND-COLOR: #ccc; POSITION: absolute; WIDTH: 302px
}
.origin {
	BACKGROUND-COLOR: #000; POSITION: absolute
}
.popText {
	COLOR: #000; FONT-FAMILY: arial; FONT-SIZE: 12px; TEXT-DECORATION: none
}

------=_NextPart_000_0000_01C513A0.3B9F7C10
Content-Type: application/octet-stream
Content-Transfer-Encoding: quoted-printable
Content-Location: http://java.sun.com/js/popUp.js

function =
openPopup(url,name,width,height,resizable,scrollbars,menubar,toolbar,loca=
tion,directories,status) {	=0A=
	popup =3D window.open(url, name, 'width=3D' + width + ',height=3D' + =
height + ',resizable=3D' + resizable + ',scrollbars=3D' + scrollbars=0A=
	+ ',menubar=3D' + menubar + ',toolbar=3D' + toolbar + ',location=3D' + =
location + ',directories=3D' + directories + ',status=3D' + status=0A=
	);=0A=
//popup.moveTo(((screen.availWidth-340)/2),((screen.availHeight-360)/2));=0A=
	popup.focus();=0A=
}
------=_NextPart_000_0000_01C513A0.3B9F7C10
Content-Type: application/octet-stream
Content-Transfer-Encoding: quoted-printable
Content-Location: http://java.sun.com/js/omi/jsc/s_code_remote.js

/* SiteCatalyst Code Version: G.5 */=0A=
/* SMI Version July19,2004 */=0A=
/* Increases hierarchy from 3 to 8=0A=
   Adds s_prop2=3Dsite_id		*/=0A=
=0A=
/************************** CONFIG SECTION **************************/=0A=
=0A=
/* Set the Report Suite ID(s) and site ID for each Sun site. The site ID =0A=
   is pre-pended to pageNames and channel names. */=0A=
var s_account=3D"sunglobal,sundeveloper"=0A=
// var s_account=3D"devsunjavas"=0A=
=0A=
/* Uncomment one of the following */=0A=
var s_siteid =3D "jsc:"=0A=
// var s_siteid=3D"ss:"=0A=
// var s_siteid=3D"mysun:"=0A=
// var s_siteid=3D"java:"=0A=
// var s_siteid=3D"one:"=0A=
=0A=
var s_dynamicAccountSelection=3Dfalse=0A=
var s_dynamicAccountList=3D""=0A=
=0A=
=0A=
var =
s_linkInternalFilters=3D"javascript:,sun.com,java.com,sunsolve,star-auth,=
sfbay,amused.corp"=0A=
/* List s_prop and s_eVar variables to be passed during =
custom/exit/download links.=0A=
   Otherwise, values passed in are ignored. */=0A=
var s_linkTrackVars=3D"s_prop1"=0A=
/* List event values in "s_events" to be passed during =
custom/exit/download links.=0A=
   Otherwise, events are ignored by default. */=0A=
var s_linkTrackEvents=3D"event6"=0A=
=0A=
/* Plugin Config - may be specific to each Sun site */=0A=
var s_usePlugins=3Dtrue=0A=
=0A=
function s_doPlugins() {=0A=
  /* Add calls to plugins here */=0A=
  /* External campaigns */=0A=
  if(s_campaign=3D=3D"")=0A=
    s_vp_getCGI('s_campaign','source');=0A=
  // Internal campaigns=0A=
  s_vp_getCGI('s_eVar1','intcmp');=0A=
  s_vp_getCGI('s_eVar3','redir');=0A=
  s_vp_getFormAbandonState("s_prop1","o","Form Abandonment");=0A=
}=0A=
=0A=
/***************** STANDARD CODE FOR ALL SUN SITES ******************/=0A=
/**********TO BE CHANGED ONLY BY SMI EMETRICS PROGRAM MANAGEMENT*****/=0A=
=0A=
/* Make certain these variables are defined, if not on page */=0A=
if (typeof s_channel=3D=3D'undefined')=0A=
   var s_channel =3D "";=0A=
if (typeof s_pageName=3D=3D'undefined')=0A=
   var s_pageName =3D "";   =0A=
if(typeof s_events=3D=3D'undefined')=0A=
  var s_events=3D"";=0A=
if(typeof s_campaign=3D=3D'undefined')=0A=
  var s_campaign=3D"";=0A=
if(typeof s_hier1=3D=3D'undefined')=0A=
  var s_hier1=3D"";=0A=
=0A=
/* Check for this common problem */=0A=
if (s_pageName.toLowerCase()=3D=3D"document.title"){=0A=
  s_pageName=3Ddocument.title;=0A=
}=0A=
=0A=
/* Use URL as default page name unless s_pageName already populated. */=0A=
if (typeof s_pageName!=3D'undefined'){=0A=
  // See if it has a value=0A=
  if (s_pageName=3D=3D""){=0A=
  s_pageName=3Dwindow.top.location.pathname.toLowerCase();=0A=
  }=0A=
} =0A=
=0A=
var s_disableLegacyVars=3Dtrue=0A=
var s_eVarCFG=3D""=0A=
=0A=
/* Link Tracking Config */=0A=
var s_trackDownloadLinks=3Dtrue  // downloads=0A=
var s_trackExternalLinks=3Dtrue  // external links=0A=
var s_trackInlineStats=3Dtrue    // ClickMap=0A=
var =
s_linkDownloadFileTypes=3D"exe,zip,wav,mp3,mov,mpg,avi,doc,pdf,xls,bin,ta=
r,Z,gz"=0A=
var s_linkLeaveQueryString=3Dfalse=0A=
=0A=
/* Populate "s_channel" variable (if not already populated). Based on 3 =
levels of directory; also=0A=
   places entire directory path into "s_hier1" (hierarchy) variable. */=0A=
if(s_channel=3D=3D""){=0A=
  var s_t1=3D0=0A=
  var s_t2=3D0=0A=
  var s_du=3D""=0A=
  s_du=3Dwindow.top.location.href.toLowerCase()=0A=
  if((s_t1=3Ds_du.indexOf("://"))>=3D0){=0A=
    if((s_t2=3Ds_du.indexOf("/",s_t1+3))>=3D(s_t1+3)){=0A=
      if(s_du.indexOf(".",s_t1+3)<s_t2){=0A=
        var s_c2=3D""=0A=
       =0A=
        s_t1=3Ds_t2+1=0A=
        s_t2=3Ds_du.lastIndexOf("/")=0A=
        s_channel=3Ds_du.substring(s_t1,s_t2)=0A=
       =0A=
        // Replace all "/" chars with ":"=0A=
        for(s_t2=3D0; s_t2<s_channel.length; s_t2++){=0A=
          if(s_channel.charAt(s_t2)=3D=3D"/"){=0A=
            // Bogus code, but JavaScript 1.0-compatible=0A=
            =
s_c2=3Ds_channel.substring(0,s_t2)+":"+s_channel.substring(s_t2+1,s_chann=
el.length)=0A=
            s_channel=3Ds_c2=0A=
          }=0A=
        }=0A=
      }=0A=
    }=0A=
    if(s_channel!=3D""){=0A=
      s_hier1=3Ds_siteid+s_channel=0A=
    }=0A=
  =0A=
    // Remove everything after the eigth "/"=0A=
    s_t1=3D0=0A=
    for(s_t2=3D0;s_t2<s_channel.length;s_t2++){=0A=
      if(s_channel.charAt(s_t2)=3D=3D":"){=0A=
        s_t1++=0A=
        if(s_t1=3D=3D8){=0A=
          s_channel=3Ds_channel.substring(0,s_t1-1)=0A=
          break=0A=
        }=0A=
      }=0A=
    }=0A=
  }=0A=
}=0A=
=0A=
/* STANDARD SUN GLOBAL ACCOUNT CODE: pre-pend "pageName" and "channel" =
with "s_siteid" */=0A=
if(typeof s_siteid!=3D'undefined'){=0A=
  if(typeof s_pageName!=3D'undefined'&&s_pageName.length>0){=0A=
    if(s_pageName.substr(0,s_siteid.length).toLowerCase()!=3Ds_siteid){=0A=
      s_pageName=3Ds_siteid+s_pageName;=0A=
    }=0A=
  }=0A=
  if(s_channel.length>0){=0A=
    if (s_channel.substr(0,s_siteid.length).toLowerCase()!=3Ds_siteid){=0A=
        s_channel=3Ds_siteid+s_channel;=0A=
    }=0A=
  }=0A=
}=0A=
=0A=
/* PUT SITE_ID INTO S_PROP2*/=0A=
if(typeof s_siteid=3D=3D'undefined'){var s_siteid=3D""};=0A=
if(typeof s_prop2=3D=3D'undefined'){var s_prop2=3D""};=0A=
   s_prop2=3Ds_siteid;=0A=
=0A=
=0A=
=0A=
/************************** PLUGINS SECTION *************************/=0A=
/* You may insert any plugins you wish to use here.                 */=0A=
/*=0A=
 * Plugin: Get State Of Form On Abandon=0A=
 */=0A=
function s_vp_getFormAbandonState(vs,lt,ln)=0A=
	{if(!s_wd.s_vp_faolr){s_wd.s_vp_faol=3Ds_wd.onload;s_wd.onload=3D=0A=
	s_vp_fas;s_wd.s_vp_favs=3Dvs;s_wd.s_vp_falt=3Dlt;s_wd.s_vp_faln=3Dln=0A=
	s_wd.s_vp_faolr=3D1}}var s_vp_faolr=3D0;function s_vp_fas(e){var r=3D=0A=
	true;if(s_wd.s_vp_faol)r=3Ds_wd.s_vp_faol(e);if(s_d.forms&&=0A=
	s_d.forms.length>0){var vs=3Ds_wd.s_vp_favs,p=3Ds_gg('pageName'),fn,=0A=
	f,en,el,t,oc,och;for(fn=3D0;fn<s_d.forms.length;fn++){f=3Ds_d.forms[=0A=
	fn];if(vs&&!s_wd[vs])s_wd[vs]=3D(f.name?f.name:(p?p:''))=0A=
	+':No Data Entered';for(en=3D0;en<f.elements.length;en++){el=3D=0A=
	f.elements[en];t=3Del.type;if(t&&t.toUpperCase){t=3Dt.toUpperCase()=0A=
	oc=3Del.onclick?el.onclick.toString():'';och=3Del.onchange?=0A=
	el.onchange.toString():'';if(oc.indexOf("s_vp_fac(")<0&&=0A=
	och.indexOf("s_vp_fac(")<0){if(t=3D=3D'BUTTON'||t=3D=3D'CHECKBOX'||t=3D=3D=0A=
	'RADIO'||t=3D=3D'RESET'||t=3D=3D'SUBMIT'||t=3D=3D'IMAGE'){el.s_vp_faoc=3D=0A=
	el.onclick;if(((f.name&&oc.indexOf(f.name)>=3D0)||(oc.indexOf(=0A=
	'form.')>=3D0))&&oc.indexOf("submit(")>=3D0)el.onclick=3Ds_vp_fasu;else=0A=
	el.onclick=3Ds_vp_fac}else{el.s_vp_faoch=3Del.onchange;if(((f.name&&=0A=
	och.indexOf(f.name)>=3D0)||(och.indexOf('form.')>=3D0))&&och.indexOf(=0A=
	"submit(")>=3D0)el.onchange=3Ds_vp_fasu;else el.onchange=3Ds_vp_fac }}}=0A=
	}f.s_vp_faos=3Df.onsubmit;f.onsubmit=3Ds_vp_fasu}s_wd.s_vp_faul=3D=0A=
	s_wd.onunload;s_wd.onunload=3Ds_vp_fa}return r}function s_vp_fa(e){=0A=
	var vs=3Ds_wd.s_vp_favs;if(vs&&s_wd[vs]){s_lnk=3Dnew Object=0A=
	s_linkType=3Ds_wd.s_vp_falt;s_linkName=3Ds_wd.s_vp_faln;s_gs('')=0A=
	s_lnk=3D''}if(s_wd.s_ful)return s_wd.s_ful(e);return true}=0A=
	function s_vp_fasu(e){var vs=3Ds_wd.s_vp_favs;if(vs)s_wd[vs]=3D'';if(=0A=
	this.s_vp_faos)return this.s_vp_faos(e);if(this.s_vp_faoc)=0A=
	return this.s_vp_faoc(e);if(this.s_vp_faoch)=0A=
	return this.s_vp_faoch(e);return true}function s_vp_fac(e){var b=3D=0A=
	"s_gs(",vs=3Ds_wd.s_vp_favs,f=3Dthis.form,p=3Ds_gg('pageName');if(vs)=0A=
	s_wd[vs]=3D(f.name?f.name:(p?p:''))+':'+(this.name?this.name:'')=0A=
	if(this.s_vp_faoc)return this.s_vp_faoc(e);if(this.s_vp_faoch)=0A=
	return this.s_vp_faoch(e);return true}=0A=
/*=0A=
 * Plugin: Get Query String CGI Variable Value=0A=
 */=0A=
function s_vp_getCGI(vs,k)=0A=
	{var v=3D'';if(k&&s_wd.location.search){var q=3Ds_wd.location.search,=0A=
	qq=3Dq.indexOf('?');q=3Dqq<0?q:q.substring(qq+1);v=3Ds_pt(q,'&',s_cgif,=0A=
	k)}s_vpr(vs,v)}function s_cgif(t,k){if(t){var te=3Dt.indexOf('=3D'),=0A=
	sk=3Dte<0?t:t.substring(0,te),sv=3Dte<0?'True':t.substring(te+1);if(=0A=
	sk=3D=3Dk)return s_epa(sv)}return ''}=0A=
/*=0A=
 * Plugin: Get Plugin Modified Value=0A=
 */=0A=
function s_vp_getValue(vs)=0A=
	{var k=3Dvs.substring(0,2)=3D=3D's_'?vs.substring(2):vs;return s_wd[=0A=
	's_vpm_'+k]?s_wd['s_vpv_'+k]:s_gg(k)}=0A=
/*=0A=
 * Plugin Utilities v2.0 (Required For All Plugins)=0A=
 */=0A=
function s_vpr(vs,v){if(s_wd[vs])s_wd[vs]=3Ds_wd[vs];else s_wd[vs]=3D''=0A=
if(vs.substring(0,2) =3D=3D =
's_')vs=3Dvs.substring(2);s_wd['s_vpv_'+vs]=3Dv=0A=
s_wd['s_vpm_'+vs]=3D1}function s_dt(tz,t){var d=3Dnew =
Date;if(t)d.setTime(=0A=
t);d=3Dnew Date(d.getTime()+(d.getTimezoneOffset()*60*1000))=0A=
return new Date(Math.floor(d.getTime()+(tz*60*60*1000)))}=0A=
function s_vh_gt(k,v){var vh=3D'|'+s_c_r('s_vh_'+k),vi=3Dvh.indexOf('|'+v=0A=
+'=3D'),ti=3Dvi<0?vi:vi+2+v.length,pi=3Dvh.indexOf('|',ti),t=3Dti<0?'':=0A=
vh.substring(ti,pi<0?vh.length:pi);return t}function s_vh_gl(k){var=0A=
vh=3Ds_c_r('s_vh_'+k),e=3Dvh?vh.indexOf('=3D'):0;return =
vh?(vh.substring(0,=0A=
e?e:vh.length)):''}function s_vh_s(k,v){if(k&&v){var e=3Dnew Date,st=3D=0A=
e.getTime(),y=3De.getYear(),c=3D's_vh_'+k,vh=3D'|'+s_c_r(c)+'|',t=3Ds_vh_=
gt(k,=0A=
v);e.setYear((y<1900?y+1900:y)+5);if(t)vh=3Ds_rep(vh,'|'+v+'=3D'+t+'|','|=
'=0A=
);if(vh.substring(0,1)=3D=3D'|')vh=3Dvh.substring(1);if(vh.substring(=0A=
vh.length-1,vh.length)=3D=3D'|')vh=3Dvh.substring(0,vh.length-1);vh=3Dv=0A=
+'=3D[PCC]'+(vh?'|'+vh:'');s_c_w(c,vh,e);if(s_vh_gt(k,v)!=3D'[PCC]')=0A=
return 0;vh=3Ds_rep(vh,'[PCC]',st);s_c_w(c,vh,e)}return 1}=0A=
=0A=
/************* DO NOT ALTER ANYTHING BELOW THIS LINE ! **************/=0A=
var =
s_un,s_ios=3D0,s_q=3D'',s_code=3D'',code=3D'',s_bcr=3D0,s_lnk=3D'',s_eo=3D=
'',=0A=
s_vb,s_pl,s_tfs=3D0,s_etfs=3D0,s_wd=3Dwindow,s_d=3Ds_wd.document,s_ssl=3D=
(=0A=
s_wd.location.protocol.toLowerCase().indexOf('https')>=3D0),s_n=3D=0A=
navigator,s_u=3Ds_n.userAgent,s_apn=3Ds_n.appName,s_v=3Ds_n.appVersion,=0A=
s_apv,s_i,s_ie=3Ds_v.indexOf('MSIE '),s_ns6=3Ds_u.indexOf('Netscape6/')=0A=
if(s_v.indexOf('Opera')>=3D0||s_u.indexOf('Opera')>=3D0)s_apn=3D'Opera';v=
ar=0A=
s_isie=3D(s_apn=3D=3D'Microsoft Internet Explorer'),s_isns=3D(s_apn=3D=3D=0A=
'Netscape'),s_isopera=3D(s_apn=3D=3D'Opera'),s_ismac=3D(s_u.indexOf('Mac'=
)>=3D0)=0A=
if(s_ie>0){s_apv=3DparseInt(s_i=3Ds_v.substring(s_ie+5));if(s_apv>3)s_apv=
=3D=0A=
parseFloat(s_i)}else if(s_ns6>0)s_apv=3DparseFloat(s_u.substring(s_ns6=0A=
+10));else s_apv=3DparseFloat(s_v);function s_fl(s,l){return (s+''=0A=
).substring(0,l)}function s_co(o){if(!o)return o;var n=3Dnew Object=0A=
for(x in o)n[x]=3Do[x];return n}function s_num(x){var s=3Dx.toString(),g=3D=0A=
'0123456789',p,d;for(p=3D0;p<s.length;p++){d=3Ds.substring(p,p+1);if(=0A=
g.indexOf(d)<0)return 0}return 1}function s_rep(s,o,n){var i=3D=0A=
s.indexOf(o),l=3Dn.length>0?n.length:1;while(s&&i>=3D0){s=3Ds.substring(0=
,i)=0A=
+n+s.substring(i+o.length);i=3Ds.indexOf(o,i+l)}return s}function s_ape(=0A=
s){return s?s_rep(escape(''+s),'+','%2B'):s}function s_epa(s){=0A=
return s?unescape(s_rep(''+s,'+',' ')):s}function s_pt(s,d,f,a){var t=3D=0A=
s,x=3D0,y,r;while(t){y=3Dt.indexOf(d);y=3Dy<0?t.length:y;t=3Dt.substring(=
0,y)=0A=
r=3Df(t,a);if(r)return =
r;x+=3Dy+d.length;t=3Ds.substring(x,s.length);t=3Dx<=0A=
s.length?t:''}return ''}function =
s_isf(t,a){if(t.substring(0,2)=3D=3D's_')=0A=
t=3Dt.substring(2);return (t!=3D''&&t=3D=3Da)}function =
s_fsf(t,a){if(s_pt(a,=0A=
',',s_isf,t))s_fsg+=3D(s_fsg!=3D''?',':'')+t;return 0}var s_fsg=0A=
function s_fs(s,f){s_fsg=3D'';s_pt(s,',',s_fsf,f);return s_fsg}var=0A=
s_c_d=3D'';function s_c_gdf(t,a){if(!s_num(t))return 1;return 0}=0A=
function s_c_gd(){var d=3Ds_wd.location.hostname,n=3Ds_gg(=0A=
'cookieDomainPeriods'),p;if(d&&!s_c_d){n=3Dn?parseInt(n):2;n=3Dn>2?n:2;p=3D=0A=
d.lastIndexOf('.');while(p>=3D0&&n>1){p=3Dd.lastIndexOf('.',p-1);n--}=0A=
s_c_d=3Dp>0&&s_pt(d,'.',s_c_gdf,0)?d.substring(p):''}return s_c_d}=0A=
function s_c_r(k){k=3Ds_ape(k);var c=3D' '+s_d.cookie,s=3Dc.indexOf(' '+k=0A=
+'=3D'),e=3Ds<0?s:c.indexOf(';',s),v=3Ds<0?'':s_epa(c.substring(s+2=0A=
+k.length,e<0?c.length:e));return v}function s_c_w(k,v,e){var d=3D=0A=
s_c_gd(),l=3Ds_gg('cookieLifetime');v=3D''+v;l=3Dl?(''+l).toUpperCase():'=
'=0A=
if(e&&l!=3D'SESSION'&&l!=3D'NONE'){l=3DparseInt(l);if(l){e=3Dnew Date=0A=
e.setTime(e.getTime()+(parseInt(l)*1000))}}if(k&&l!=3D'NONE'){=0A=
s_d.cookie=3Dk+'=3D'+s_ape(v)+'; path=3D/;'+(e&&l!=3D'SESSION'?' =
expires=3D'=0A=
+e.toGMTString()+';':'')+(d?' domain=3D'+d+';':'');return =
s_c_r(k)=3D=3Dv}=0A=
return 0}function s_cet(f,a,et,oe,fb){var r,d=3D0=0A=
/*@cc_on@if(@_jscript_version>=3D5){try{return f(a)}catch(e){return =
et(e)}d=3D1}@end@*/=0A=
if(!d){if(s_ismac&&s_u.indexOf('MSIE 4')>=3D0)return fb(a);else{=0A=
s_wd.s_oe=3Ds_wd.onerror;s_wd.onerror=3Doe;r=3Df(a);s_wd.onerror=3Ds_wd.s=
_oe=0A=
return r}}}function s_gtfset(e){return s_tfs}function s_gtfsoe(e){=0A=
s_wd.onerror=3Ds_wd.s_oe;s_etfs=3D1;var =
code=3Ds_gs(s_un);if(code)s_d.write(=0A=
code);s_etfs=3D0;return true}function s_gtfsfb(a){return s_wd}=0A=
function s_gtfsf(w){var p=3Dw.parent,l=3Dw.location;s_tfs=3Dw;if(p&&=0A=
p.location!=3Dl&&p.location.host=3D=3Dl.host){s_tfs=3Dp;return =
s_gtfsf(s_tfs)}=0A=
return s_tfs}function s_gtfs(){if(!s_tfs){s_tfs=3Ds_wd;if(!s_etfs)s_tfs=3D=0A=
s_cet(s_gtfsf,s_tfs,s_gtfset,s_gtfsoe,s_gtfsfb)}return s_tfs}=0A=
function s_ca(un){un=3Dun.toLowerCase();var =
ci=3Dun.indexOf(','),fun=3Dci<0?=0A=
un:un.substring(0,ci),imn=3D's_i_'+fun;if(s_d.images&&s_apv>=3D3&&=0A=
!s_isopera&&(s_ns6<0||s_apv>=3D6.1)){s_ios=3D1;if(!s_d.images[imn]&&(=0A=
!s_isns||(s_apv<4||s_apv>=3D5))){s_d.write('<im'+'g name=3D"'+imn=0A=
+'" height=3D1 width=3D1 border=3D0 =
alt=3D"">');if(!s_d.images[imn])s_ios=3D0}}}=0A=
function s_it(un){s_ca(un)}function s_mr(un,sess,q,ta){un=3D=0A=
un.toLowerCase();var ci=3Dun.indexOf(','),fun=3Dci<0?un:un.substring(0,ci=0A=
),unc=3Ds_rep(fun,'_','-'),imn=3D's_i_'+fun,im,b,e,rs=3D'http'+(s_ssl?'s'=
:''=0A=
)+'://'+(s_ssl?'102':unc)+'.112.2O7.net/b/ss/'+un+'/1/G.5-PD-R/'=0A=
+sess+'?[AQB]&ndh=3D1'+(q?q:'')+(s_q?s_q:'')+'&[AQE]';if(s_ios){im=3Ds_wd=
[=0A=
imn]?s_wd[imn]:s_d.images[imn];if(!im)im=3Ds_wd[imn]=3Dnew =
Image;im.src=3Drs=0A=
if(rs.indexOf('&pe=3D')>=3D0&&(!ta||ta=3D=3D'_self'||ta=3D=3D'_top'||(s_w=
d.name&&=0A=
ta=3D=3Ds_wd.name))){b=3De=3Dnew =
Date;while(e.getTime()-b.getTime()<500)e=3D=0A=
new Date}return ''}return '<im'+'g sr'+'c=3D"'+rs=0A=
+'" width=3D1 height=3D1 border=3D0 alt=3D"">'}function s_gg(v){var =
g=3D's_'+v=0A=
return s_wd[g]||s_wd.s_disableLegacyVars?s_wd[g]:s_wd[v]}var s_qav=3D''=0A=
function s_havf(t,a){var b=3Dt.substring(0,4),s=3Dt.substring(4),n=3D=0A=
parseInt(s),k=3D's_g_'+t,m=3D's_vpm_'+t,q=3Dt,v=3Ds_gg('linkTrackVars'),e=
=3D=0A=
s_gg('linkTrackEvents');if(!s_wd['s_'+t])s_wd['s_'+t]=3D'';s_wd[k]=3Ds_wd=
[=0A=
m]?s_wd['s_vpv_'+t]:s_gg(t);if(s_lnk||s_eo){v=3Dv?v+',pageName,charSet,'=0A=
+'cookieDomainPeriods,cookieLifetime,eVarCFG,purchaseID':'';if(v&&=0A=
!s_pt(v,',',s_isf,t))s_wd[k]=3D'';if(t=3D=3D'events'&&e)s_wd[k]=3Ds_fs(s_=
wd[k=0A=
],e)}s_wd[m]=3D0;if(t=3D=3D'charSet')q=3D'ce';else =
if(t=3D=3D'cookieDomainPeriods'=0A=
)q=3D'cdp';else if(t=3D=3D'cookieLifetime')q=3D'cl';else =
if(t=3D=3D'channel')q=3D=0A=
'ch';else if(t=3D=3D'campaign')q=3D'v0';else =
if(s_num(s)){if(b=3D=3D'prop')q=3D'c'=0A=
+n;else if(b=3D=3D'eVar')q=3D'v'+n;else =
if(b=3D=3D'hier')q=3D'h'+n}if(s_wd[k]&&t!=3D=0A=
'linkName'&&t!=3D'linkType')s_qav+=3D'&'+q+'=3D'+s_ape(s_wd[k]);return =
''}=0A=
function s_hav(){var n,av=3D'charSet,cookieDomainPeriods,cookieLifetime'=0A=
+',pageName,channel,server,pageType,campaign,state,zip,events,product'=0A=
+'s,purchaseID,eVarCFG,linkName,linkType';for(n=3D1;n<26;n++)av+=3D',prop=
'=0A=
+n+',eVar'+n+',hier'+n;s_qav=3D'';s_pt(av,',',s_havf,0);return s_qav}=0A=
function s_lnf(t,h){t=3Dt?t.toLowerCase():'';h=3Dh?h.toLowerCase():'';var=0A=
te=3Dt.indexOf('=3D');if(t&&te>0&&h.indexOf(t.substring(te+1))>=3D0)=0A=
return t.substring(0,te);return ''}function s_ln(h){if(s_gg(=0A=
'linkNames'))return s_pt(s_gg('linkNames'),',',s_lnf,h);return ''}=0A=
function =
s_ltdf(t,h){t=3Dt?t.toLowerCase():'';h=3Dh?h.toLowerCase():'';var=0A=
qi=3Dh.indexOf('?');h=3Dqi>=3D0?h.substring(0,qi):h;if(t&&h.substring(=0A=
h.length-(t.length+1))=3D=3D'.'+t)return 1;return 0}function s_ltef(t,h){=0A=
t=3Dt?t.toLowerCase():'';h=3Dh?h.toLowerCase():'';if(t&&h.indexOf(t)>=3D0=
)=0A=
return 1;return 0}function s_lt(h){var lft=3Ds_gg(=0A=
'linkDownloadFileTypes'),lef=3Ds_gg('linkExternalFilters'),lif=3Ds_gg(=0A=
'linkInternalFilters')?s_gg('linkInternalFilters'):=0A=
s_wd.location.hostname;h=3Dh.toLowerCase();if(s_gg('trackDownloadLinks'=0A=
)&&lft&&s_pt(lft,',',s_ltdf,h))return 'd';if(s_gg('trackExternalLinks'=0A=
)&&(lef||lif)&&(!lef||s_pt(lef,',',s_ltef,h))&&(!lif||!s_pt(lif,',',=0A=
s_ltef,h)))return 'e';return ''}function s_lc(e){s_lnk=3Ds_co(this)=0A=
s_gs('');s_lnk=3D'';if(this.s_oc)return this.s_oc(e);return true}=0A=
function s_ls(){var l,ln,oc;for(ln=3D0;ln<s_d.links.length;ln++){l=3D=0A=
s_d.links[ln];oc=3Dl.onclick?l.onclick.toString():'';if(oc.indexOf(=0A=
"s_gs(")<0&&oc.indexOf("s_lc(")<0){l.s_oc=3Dl.onclick;l.onclick=3Ds_lc}}}=0A=
function s_bc(e){s_eo=3De.srcElement?e.srcElement:e.target;s_gs('')=0A=
s_eo=3D''}function s_ot(o){var x=3Do.type,y=3Do.tagName;return (x&&=0A=
x.toUpperCase?x:y&&y.toUpperCase?y:o.href?'A':'').toUpperCase()}=0A=
function s_oid(o){var =
t=3Ds_ot(o),p=3Do.protocol,c=3Do.onclick,n=3D'',x=3D0;if(=0A=
!o.s_oid){if(o.href&&(t=3D=3D'A'||t=3D=3D'AREA')&&(!c||!p||p.toLowerCase(=0A=
).indexOf('javascript')<0))n=3Do.href;else if(c){n=3Ds_rep(s_rep(s_rep(=0A=
s_rep(c.toString(),"\r",''),"\n",''),"\t",''),' ','');x=3D2}else if(=0A=
o.value&&(t=3D=3D'INPUT'||t=3D=3D'SUBMIT')){n=3Do.value;x=3D3}else =
if(o.src&&t=3D=3D=0A=
'IMAGE')n=3Do.src;if(n){o.s_oid=3Ds_fl(n,100);o.s_oidt=3Dx}}return =
o.s_oid}=0A=
function s_rqf(t,un){var =
e=3Dt.indexOf('=3D'),u=3De>=3D0?','+t.substring(0,e)=0A=
+',':'';return u&&u.indexOf(','+un+',')>=3D0?s_epa(t.substring(e+1)):''}=0A=
function s_rq(un){var =
c=3Dun.indexOf(','),v=3Ds_c_r('s_sq'),q=3D'';if(c<0)=0A=
return s_pt(v,'&',s_rqf,un);return s_pt(un,',',s_rq,0)}var s_sqq,s_squ=0A=
function s_sqp(t,a){var =
e=3Dt.indexOf('=3D'),q=3De<0?'':s_epa(t.substring(e=0A=
+1));s_sqq[q]=3D'';if(e>=3D0)s_pt(t.substring(0,e),',',s_sqs,q);return 0}=0A=
function s_sqs(un,q){s_squ[un]=3Dq;return 0}function s_sq(un,q){s_sqq=3D=0A=
new Object;s_squ=3Dnew Object;s_sqq[q]=3D'';var =
k=3D's_sq',v=3Ds_c_r(k),x,c=3D0=0A=
s_pt(v,'&',s_sqp,0);s_pt(un,',',s_sqs,q);v=3D'';for(x in s_squ)s_sqq[=0A=
s_squ[x]]+=3D(s_sqq[s_squ[x]]?',':'')+x;for(x in s_sqq)if(x&&s_sqq[x]&&(=0A=
x=3D=3Dq||c<2)){v+=3D(v?'&':'')+s_sqq[x]+'=3D'+s_ape(x);c++}return =
s_c_w(k,v,0=0A=
)}function s_wdl(e){s_wd.s_wd_l=3D1;var =
r=3Dtrue;if(s_wd.s_ol)r=3Ds_wd.s_ol(=0A=
e);if(s_wd.s_ls)s_wd.s_ls();return r}function s_wds(un){un=3D=0A=
un.toLowerCase();s_wd.s_wd_l=3D1;if(s_apv>3&&(!s_isie||!s_ismac||s_apv>=3D=0A=
5)){s_wd.s_wd_l=3D0;if(!s_wd.s_unl)s_wd.s_unl=3Dnew Array;s_wd.s_unl[=0A=
s_wd.s_unl.length]=3Dun;if(s_d.body&&s_d.body.attachEvent){if(=0A=
!s_wd.s_bcr&&s_d.body.attachEvent('onclick',s_bc))s_wd.s_bcr=3D1}=0A=
else if(s_d.body&&s_d.body.addEventListener){if(!s_wd.s_bcr&&=0A=
s_d.body.addEventListener('click',s_bc,false))s_wd.s_bcr=3D1}else{var=0A=
ol=3Ds_wd.onload?s_wd.onload.toString():'';if(ol.indexOf("s_wdl(")<0){=0A=
s_wd.s_ol=3Ds_wd.onload;s_wd.onload=3Ds_wdl}}}}function s_iepf(i,a){if(=0A=
i.substring(0,1)!=3D'{')i=3D'{'+i+'}';if(s_d.body.isComponentInstalled(i,=0A=
'ComponentID')){var n=3Ds_pl.length;s_pl[n]=3Dnew Object;s_pl[n].name=3Di=0A=
+':'+s_d.body.getComponentVersion(i,'ComponentID')}return 0}=0A=
function s_vs(un,x){var s=3Ds_gg('visitorSampling'),g=3Ds_gg(=0A=
'visitorSamplingGroup'),k=3D's_vsn_'+un+(g?'_'+g:''),n=3Ds_c_r(k),e=3D=0A=
new Date,y=3De.getYear();e.setYear(y+10+(y<1900?1900:0));if(s){s*=3D100=0A=
if(!n){if(!s_c_w(k,x,e))return 0;n=3Dx}if(n%10000>s)return 0}return 1}=0A=
function s_dyasmf(t,m){if(t&&m&&m.indexOf(t)>=3D0)return 1;return 0}=0A=
function s_dyasf(t,m){var =
i=3Dt?t.indexOf('=3D'):-1,un,s;if(i>=3D0&&m){var=0A=
un=3Dt.substring(0,i),s=3Dt.substring(i+1);if(s_pt(s,',',s_dyasmf,m))=0A=
return un}return 0}function s_dyas(un,l,m){if(!m)m=3Ds_wd.location.host=0A=
if(!m.toLowerCase)m=3Dm.toString();l=3Dl.toLowerCase();m=3Dm.toLowerCase(=
)=0A=
var nun=3Ds_pt(l,';',s_dyasf,m);if(nun)return nun;return un}=0A=
function s_gs(un){un=3Dun.toLowerCase()=0A=
var dyas=3Ds_gg('dynamicAccountSelection'),dyal=3Ds_gg(=0A=
'dynamicAccountList'),dyam=3Ds_gg('dynamicAccountMatch');if(dyas&&dyal)=0A=
un=3Ds_dyas(un,dyal,dyam);=0A=
s_un=3Dun;var trk=3D1,tm=3Dnew Date,sed=3DMath&&Math.random?Math.floor(=0A=
Math.random()*10000000000000):tm.getTime(),sess=3D's'+Math.floor(=0A=
tm.getTime()/10800000)%10+sed,yr=3Dtm.getYear(),t,ta=3D'',q=3D'',qs=3D'';=
yr=3D=0A=
yr<1900?yr+1900:yr;t=3Dtm.getDate()+'/'+tm.getMonth()+'/'+yr+' '=0A=
+tm.getHours()+':'+tm.getMinutes()+':'+tm.getSeconds()+' '+tm.getDay()=0A=
+' '+tm.getTimezoneOffset();if(!s_q){var =
tfs=3Ds_gtfs(),tl=3Dtfs.location,=0A=
r=3Dtfs.document.referrer,s=3D'',c=3D'',v=3D'',p=3D'',bw=3D'',bh=3D'',j=3D=
'1.0',g=3D=0A=
s_wd.location,k=3Ds_c_w('s_cc','true',0)?'Y':'N',hp=3D'',ct=3D'',iepl=3Ds=
_gg(=0A=
'iePlugins'),pn=3D0,ps;if(s_apv>=3D4)s=3Dscreen.width+'x'+screen.height;i=
f(=0A=
s_isns||s_isopera){if(s_apv>=3D3){j=3D'1.1';v=3Ds_n.javaEnabled()?'Y':'N'=0A=
if(s_apv>=3D4){j=3D'1.2';c=3Dscreen.pixelDepth;bw=3Ds_wd.innerWidth;bh=3D=0A=
s_wd.innerHeight;if(s_apv>=3D4.06)j=3D'1.3'}}s_pl=3Ds_n.plugins}else if(=0A=
s_isie){if(s_apv>=3D4){v=3Ds_n.javaEnabled()?'Y':'N';j=3D'1.2';c=3D=0A=
screen.colorDepth;if(s_apv>=3D5){bw=3Ds_d.documentElement.offsetWidth;bh=3D=0A=
s_d.documentElement.offsetHeight;j=3D'1.3';if(!s_ismac&&s_d.body){=0A=
s_d.body.addBehavior("#default#homePage");hp=3Ds_d.body.isHomePage(tl)?=0A=
"Y":"N";s_d.body.addBehavior("#default#clientCaps");ct=3D=0A=
s_d.body.connectionType;if(iepl){s_pl=3Dnew Array;s_pt(iepl,',',s_iepf,=0A=
'');}}}}else r=3D'';if(!s_pl&&iepl)s_pl=3Ds_n.plugins}if(s_pl)while(pn<=0A=
s_pl.length&&pn<30){ps=3Ds_fl(s_pl[pn].name,100)+';';if(p.indexOf(ps)<0)=0A=
p+=3Dps;pn++}s_q=3D(g?'&g=3D'+s_ape(s_fl(g,255)):'')+(r?'&r=3D'+s_ape(s_f=
l(r,=0A=
255)):'')+(s?'&s=3D'+s_ape(s):'')+(c?'&c=3D'+s_ape(c):'')+(j?'&j=3D'+j:''=
)+(=0A=
v?'&v=3D'+v:'')+(k?'&k=3D'+k:'')+(bw?'&bw=3D'+bw:'')+(bh?'&bh=3D'+bh:'')+=
(ct?=0A=
'&ct=3D'+s_ape(ct):'')+(hp?'&hp=3D'+hp:'')+(s_vb?'&vb=3D'+s_vb:'')+(p?'&p=
=3D'=0A=
+s_ape(p):'')}if(s_gg('usePlugins'))s_wd.s_doPlugins();q+=3D(t?'&t=3D'=0A=
+s_ape(t):'')+s_hav();if(s_lnk||s_eo){var o=3Ds_eo?s_eo:s_lnk;if(!o)=0A=
return '';var =
p=3Ds_wd.s_g_pageName,w=3D1,t=3Ds_ot(o),n=3Ds_oid(o),x=3Do.s_oidt,=0A=
h,l,i,oc;if(s_eo&&o=3D=3Ds_eo){while(o&&!n&&t!=3D'BODY'){o=3Do.parentElem=
ent?=0A=
o.parentElement:o.parentNode;if(!o)return '';t=3Ds_ot(o);n=3Ds_oid(o);x=3D=0A=
o.s_oidt}oc=3Do.onclick?o.onclick.toString():'';if(oc.indexOf("s_gs(")>=3D=0A=
0)return =
''}ta=3Do.target;h=3Do.href?o.href:'';i=3Dh.indexOf('?');h=3Ds_gg(=0A=
'linkLeaveQueryString')||i<0?h:h.substring(0,i);l=3Ds_gg('linkName')?=0A=
s_gg('linkName'):s_ln(h);t=3Ds_gg('linkType')?s_gg('linkType'=0A=
).toLowerCase():s_lt(h);if(t&&(h||l))q+=3D'&pe=3Dlnk_'+(t=3D=3D'd'||t=3D=3D=
'e'?=0A=
s_ape(t):'o')+(h?'&pev1=3D'+s_ape(h):'')+(l?'&pev2=3D'+s_ape(l):'');else=0A=
trk=3D0;if(s_gg('trackInlineStats')){if(!p){p=3Ds_wd.location.href;w=3D0}=
p=3D=0A=
p?s_fl(p,255):'';t=3Ds_ot(o);i=3Do.sourceIndex;if(s_gg('objectID')){n=3D=0A=
s_gg('objectID');x=3D1;i=3D1}if(p&&n&&t)qs=3D'&pid=3D'+s_ape(p)+(w?'&pidt=
=3D'+w:=0A=
'')+'&oid=3D'+s_ape(n)+(x?'&oidt=3D'+x:'')+'&ot=3D'+s_ape(t)+(i?'&oi=3D'+=
i:'')=0A=
}s_wd.s_linkName=3Ds_wd.s_linkType=3Ds_wd.s_objectID=3Ds_lnk=3Ds_eo=3D'';=
if(=0A=
!s_wd.s_disableLegacyVars)s_wd.linkName=3Ds_wd.linkType=3Ds_wd.objectID=3D=
''=0A=
}if(!trk&&!qs)return '';var code=3D'';if(un){if(trk&&s_vs(un,sed))code+=3D=0A=
s_mr(un,sess,q+(qs?qs:s_rq(un)),ta);s_sq(un,trk?'':qs)}else if(=0A=
s_wd.s_unl)for(var unn=3D0;unn<s_wd.s_unl.length;unn++){un=3Ds_wd.s_unl[=0A=
unn];if(trk&&s_vs(un,sed))code+=3Ds_mr(un,sess,q+(qs?qs:s_rq(un)),ta)=0A=
s_sq(un,trk?'':qs)}return code}function s_dc(un){un=3Dun.toLowerCase()=0A=
var dyas=3Ds_gg('dynamicAccountSelection'),dyal=3Ds_gg(=0A=
'dynamicAccountList'),dyam=3Ds_gg('dynamicAccountMatch');if(dyas&&dyal)=0A=
un=3Ds_dyas(un,dyal,dyam);=0A=
s_wds(un);s_ca(un);return s_gs(un)}=0A=
s_code=3Ds_dc(s_account);if(s_code)s_d.write(s_code)=0A=

------=_NextPart_000_0000_01C513A0.3B9F7C10--
